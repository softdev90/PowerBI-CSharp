// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.PowerBI.Api.Beta
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class DatasetsExtensions
    {
            /// <summary>
            /// Returns the EntitySet datasets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            public static ODataResponseListDataset GetDatasets(this IDatasets operations, string collectionName, string workspaceId)
            {
                return Task.Factory.StartNew(s => ((IDatasets)s).GetDatasetsAsync(collectionName, workspaceId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the EntitySet datasets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDataset> GetDatasetsAsync( this IDatasets operations, string collectionName, string workspaceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetsWithHttpMessagesAsync(collectionName, workspaceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Post a new entity to EntitySet datasets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='dataset'>
            /// The entity to post
            /// </param>
            public static object PostDataset(this IDatasets operations, string collectionName, string workspaceId, Dataset dataset)
            {
                return Task.Factory.StartNew(s => ((IDatasets)s).PostDatasetAsync(collectionName, workspaceId, dataset), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post a new entity to EntitySet datasets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='dataset'>
            /// The entity to post
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostDatasetAsync( this IDatasets operations, string collectionName, string workspaceId, Dataset dataset, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostDatasetWithHttpMessagesAsync(collectionName, workspaceId, dataset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='requestMessage'>
            /// </param>
            public static object PostRows(this IDatasets operations, string collectionName, string workspaceId, string datasetKey, string tableName, object requestMessage)
            {
                return Task.Factory.StartNew(s => ((IDatasets)s).PostRowsAsync(collectionName, workspaceId, datasetKey, tableName, requestMessage), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='requestMessage'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostRowsAsync( this IDatasets operations, string collectionName, string workspaceId, string datasetKey, string tableName, object requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostRowsWithHttpMessagesAsync(collectionName, workspaceId, datasetKey, tableName, requestMessage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            public static object DeleteRows(this IDatasets operations, string collectionName, string workspaceId, string datasetKey, string tableName)
            {
                return Task.Factory.StartNew(s => ((IDatasets)s).DeleteRowsAsync(collectionName, workspaceId, datasetKey, tableName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteRowsAsync( this IDatasets operations, string collectionName, string workspaceId, string datasetKey, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRowsWithHttpMessagesAsync(collectionName, workspaceId, datasetKey, tableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            public static ODataResponseListTable GetTables(this IDatasets operations, string collectionName, string workspaceId, string datasetKey)
            {
                return Task.Factory.StartNew(s => ((IDatasets)s).GetTablesAsync(collectionName, workspaceId, datasetKey), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListTable> GetTablesAsync( this IDatasets operations, string collectionName, string workspaceId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTablesWithHttpMessagesAsync(collectionName, workspaceId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='requestMessage'>
            /// </param>
            public static object PutTable(this IDatasets operations, string collectionName, string workspaceId, string datasetKey, string tableName, object requestMessage)
            {
                return Task.Factory.StartNew(s => ((IDatasets)s).PutTableAsync(collectionName, workspaceId, datasetKey, tableName, requestMessage), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='tableName'>
            /// </param>
            /// <param name='requestMessage'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutTableAsync( this IDatasets operations, string collectionName, string workspaceId, string datasetKey, string tableName, object requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutTableWithHttpMessagesAsync(collectionName, workspaceId, datasetKey, tableName, requestMessage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static Dataset GetDatasetById(this IDatasets operations, string collectionName, string workspaceId, string datasetKey)
            {
                return Task.Factory.StartNew(s => ((IDatasets)s).GetDatasetByIdAsync(collectionName, workspaceId, datasetKey), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dataset> GetDatasetByIdAsync( this IDatasets operations, string collectionName, string workspaceId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetByIdWithHttpMessagesAsync(collectionName, workspaceId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static object DeleteDatasetById(this IDatasets operations, string collectionName, string workspaceId, string datasetKey)
            {
                return Task.Factory.StartNew(s => ((IDatasets)s).DeleteDatasetByIdAsync(collectionName, workspaceId, datasetKey), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteDatasetByIdAsync( this IDatasets operations, string collectionName, string workspaceId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDatasetByIdWithHttpMessagesAsync(collectionName, workspaceId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static ODataResponseListGatewayDatasource GetGatewayDatasources(this IDatasets operations, string collectionName, string workspaceId, string datasetKey)
            {
                return Task.Factory.StartNew(s => ((IDatasets)s).GetGatewayDatasourcesAsync(collectionName, workspaceId, datasetKey), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListGatewayDatasource> GetGatewayDatasourcesAsync( this IDatasets operations, string collectionName, string workspaceId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGatewayDatasourcesWithHttpMessagesAsync(collectionName, workspaceId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            public static ODataResponseListDatasource GetDatasources(this IDatasets operations, string collectionName, string workspaceId, string datasetKey)
            {
                return Task.Factory.StartNew(s => ((IDatasets)s).GetDatasourcesAsync(collectionName, workspaceId, datasetKey), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDatasource> GetDatasourcesAsync( this IDatasets operations, string collectionName, string workspaceId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasourcesWithHttpMessagesAsync(collectionName, workspaceId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='parameters'>
            /// </param>
            public static object SetAllConnections(this IDatasets operations, string collectionName, string workspaceId, string datasetKey, IDictionary<string, object> parameters)
            {
                return Task.Factory.StartNew(s => ((IDatasets)s).SetAllConnectionsAsync(collectionName, workspaceId, datasetKey, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The workspace collection name
            /// </param>
            /// <param name='workspaceId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='parameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetAllConnectionsAsync( this IDatasets operations, string collectionName, string workspaceId, string datasetKey, IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetAllConnectionsWithHttpMessagesAsync(collectionName, workspaceId, datasetKey, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
