// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.PowerBI.Api.Beta
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class DatasetsContExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The organizational group
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            public static Dataset GetDatasetByGroup(this IDatasetsCont operations, string group, string datasetKey)
            {
                return Task.Factory.StartNew(s => ((IDatasetsCont)s).GetDatasetByGroupAsync(group, datasetKey), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The organizational group
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dataset> GetDatasetByGroupAsync( this IDatasetsCont operations, string group, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetDatasetByGroupWithHttpMessagesAsync(group, datasetKey, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            public static Dataset GetDatasetByDatasetkey(this IDatasetsCont operations, string datasetKey)
            {
                return Task.Factory.StartNew(s => ((IDatasetsCont)s).GetDatasetByDatasetkeyAsync(datasetKey), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dataset> GetDatasetByDatasetkeyAsync( this IDatasetsCont operations, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetDatasetByDatasetkeyWithHttpMessagesAsync(datasetKey, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The organizational group
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            public static ODataResponseListGatewayDatasource GetBoundGatewayDatasourcesByGroup(this IDatasetsCont operations, string group, string datasetKey)
            {
                return Task.Factory.StartNew(s => ((IDatasetsCont)s).GetBoundGatewayDatasourcesByGroupAsync(group, datasetKey), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The organizational group
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListGatewayDatasource> GetBoundGatewayDatasourcesByGroupAsync( this IDatasetsCont operations, string group, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetBoundGatewayDatasourcesByGroupWithHttpMessagesAsync(group, datasetKey, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The organizational group
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            public static ODataResponseListDatasource GetDatasetDatasourcesByGroup(this IDatasetsCont operations, string group, string datasetKey)
            {
                return Task.Factory.StartNew(s => ((IDatasetsCont)s).GetDatasetDatasourcesByGroupAsync(group, datasetKey), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The organizational group
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDatasource> GetDatasetDatasourcesByGroupAsync( this IDatasetsCont operations, string group, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetDatasetDatasourcesByGroupWithHttpMessagesAsync(group, datasetKey, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The organizational group
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='parameters'>
            /// </param>
            public static object SetAllConnectionsByGroup(this IDatasetsCont operations, string group, string datasetKey, IDictionary<string, object> parameters)
            {
                return Task.Factory.StartNew(s => ((IDatasetsCont)s).SetAllConnectionsByGroupAsync(group, datasetKey, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='group'>
            /// The organizational group
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='parameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetAllConnectionsByGroupAsync( this IDatasetsCont operations, string group, string datasetKey, IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.SetAllConnectionsByGroupWithHttpMessagesAsync(group, datasetKey, parameters, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            public static ODataResponseListGatewayDatasource GetBoundGatewayDatasourcesByDatasetkey(this IDatasetsCont operations, string datasetKey)
            {
                return Task.Factory.StartNew(s => ((IDatasetsCont)s).GetBoundGatewayDatasourcesByDatasetkeyAsync(datasetKey), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListGatewayDatasource> GetBoundGatewayDatasourcesByDatasetkeyAsync( this IDatasetsCont operations, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetBoundGatewayDatasourcesByDatasetkeyWithHttpMessagesAsync(datasetKey, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            public static ODataResponseListDatasource GetDatasetDatasourcesByDatasetkey(this IDatasetsCont operations, string datasetKey)
            {
                return Task.Factory.StartNew(s => ((IDatasetsCont)s).GetDatasetDatasourcesByDatasetkeyAsync(datasetKey), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDatasource> GetDatasetDatasourcesByDatasetkeyAsync( this IDatasetsCont operations, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetDatasetDatasourcesByDatasetkeyWithHttpMessagesAsync(datasetKey, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='parameters'>
            /// </param>
            public static object SetAllConnectionsByDatasetkey(this IDatasetsCont operations, string datasetKey, IDictionary<string, object> parameters)
            {
                return Task.Factory.StartNew(s => ((IDatasetsCont)s).SetAllConnectionsByDatasetkeyAsync(datasetKey, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='parameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetAllConnectionsByDatasetkeyAsync( this IDatasetsCont operations, string datasetKey, IDictionary<string, object> parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.SetAllConnectionsByDatasetkeyWithHttpMessagesAsync(datasetKey, parameters, null, cancellationToken).ConfigureAwait(false);
                return _result.Body;
            }

    }
}
