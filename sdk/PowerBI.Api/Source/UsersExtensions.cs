// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Users.
    /// </summary>
    public static partial class UsersExtensions
    {
            /// <summary>
            /// Refreshes user permissions in Power BI.
            /// </summary>
            /// <remarks>
            ///
            /// When a user is granted permissions to a workspace, app, or Power BI item
            /// (such as a report or a dashboard), the new permissions might not be
            /// immediately available through API calls. This operation refreshes user
            /// permissions to ensure they're fully updated.
            ///
            /// &gt; [!IMPORTANT]
            /// &gt;
            /// &gt; - Call **Refresh User Permissions** before making other API calls.
            /// &gt; - Since it takes about two minutes for the permissions to get
            /// refreshed, wait for two minutes before making other API calls.
            ///
            /// ## Required scope
            ///
            /// Workspace.Read.All or Workspace.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum one call per hour.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void RefreshUserPermissions(this IUsers operations)
            {
                operations.RefreshUserPermissionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Refreshes user permissions in Power BI.
            /// </summary>
            /// <remarks>
            ///
            /// When a user is granted permissions to a workspace, app, or Power BI item
            /// (such as a report or a dashboard), the new permissions might not be
            /// immediately available through API calls. This operation refreshes user
            /// permissions to ensure they're fully updated.
            ///
            /// &gt; [!IMPORTANT]
            /// &gt;
            /// &gt; - Call **Refresh User Permissions** before making other API calls.
            /// &gt; - Since it takes about two minutes for the permissions to get
            /// refreshed, wait for two minutes before making other API calls.
            ///
            /// ## Required scope
            ///
            /// Workspace.Read.All or Workspace.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum one call per hour.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RefreshUserPermissionsAsync(this IUsers operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RefreshUserPermissionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of artifacts that the given user have access to (Preview).
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userGraphId'>
            /// The graph ID of user
            /// </param>
            /// <param name='continuationToken'>
            /// Token required to get the next chunk of the result set
            /// </param>
            public static ArtifactAccessResponse GetUserArtifactAccessAsAdmin(this IUsers operations, System.Guid userGraphId, string continuationToken = default(string))
            {
                return operations.GetUserArtifactAccessAsAdminAsync(userGraphId, continuationToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of artifacts that the given user have access to (Preview).
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userGraphId'>
            /// The graph ID of user
            /// </param>
            /// <param name='continuationToken'>
            /// Token required to get the next chunk of the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ArtifactAccessResponse> GetUserArtifactAccessAsAdminAsync(this IUsers operations, System.Guid userGraphId, string continuationToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserArtifactAccessAsAdminWithHttpMessagesAsync(userGraphId, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of subscriptions that the given user has subscribed to
            /// (Preview).
            /// </summary>
            /// <remarks>
            ///
            /// ### userId
            /// - The UserId can be userGraphId or UserPrincipalName
            /// ### Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userGraphId'>
            /// The graph ID of user or User Principal Name of the user
            /// </param>
            /// <param name='continuationToken'>
            /// Token required to get the next chunk of the result set
            /// </param>
            public static SubscriptionsByUserResponse GetUserSubscriptionsAsAdmin(this IUsers operations, System.Guid userGraphId, string continuationToken = default(string))
            {
                return operations.GetUserSubscriptionsAsAdminAsync(userGraphId, continuationToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of subscriptions that the given user has subscribed to
            /// (Preview).
            /// </summary>
            /// <remarks>
            ///
            /// ### userId
            /// - The UserId can be userGraphId or UserPrincipalName
            /// ### Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userGraphId'>
            /// The graph ID of user or User Principal Name of the user
            /// </param>
            /// <param name='continuationToken'>
            /// Token required to get the next chunk of the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriptionsByUserResponse> GetUserSubscriptionsAsAdminAsync(this IUsers operations, System.Guid userGraphId, string continuationToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserSubscriptionsAsAdminWithHttpMessagesAsync(userGraphId, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
