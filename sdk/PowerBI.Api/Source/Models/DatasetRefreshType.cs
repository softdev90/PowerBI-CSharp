// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for DatasetRefreshType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(DatasetRefreshTypeConverter))]
    public struct DatasetRefreshType : System.IEquatable<DatasetRefreshType>
    {
        private DatasetRefreshType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// For all partitions in the specified partition, table, or database,
        /// refresh data and recalculate all dependents. For a calculation
        /// partition, recalculate the partition and all its dependents.
        /// </summary>
        public static readonly DatasetRefreshType Full = "Full";

        /// <summary>
        /// Clear values in this object and all its dependents
        /// </summary>
        public static readonly DatasetRefreshType ClearValues = "ClearValues";

        /// <summary>
        /// Recalculate this object and all its dependents, but only if needed.
        /// This value doesn't force recalculation, except for volatile
        /// formulas.
        /// </summary>
        public static readonly DatasetRefreshType Calculate = "Calculate";

        /// <summary>
        /// Refresh data in this object and clear all dependents
        /// </summary>
        public static readonly DatasetRefreshType DataOnly = "DataOnly";

        /// <summary>
        /// If the object needs to be refreshed and recalculated, refresh and
        /// recalculate the object and all its dependents. Applies if the
        /// partition is in a state other than Ready.
        /// </summary>
        public static readonly DatasetRefreshType Automatic = "Automatic";

        /// <summary>
        /// Defragment the data in the specified table. As data is added to or
        /// removed from a table, the dictionaries of each column can become
        /// polluted with values that no longer exist in the actual column
        /// values. The defragment option will clean up the values in the
        /// dictionaries that are no longer used.
        /// </summary>
        public static readonly DatasetRefreshType Defragment = "Defragment";


        /// <summary>
        /// Underlying value of enum DatasetRefreshType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for DatasetRefreshType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type DatasetRefreshType
        /// </summary>
        public bool Equals(DatasetRefreshType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to DatasetRefreshType
        /// </summary>
        public static implicit operator DatasetRefreshType(string value)
        {
            return new DatasetRefreshType(value);
        }

        /// <summary>
        /// Implicit operator to convert DatasetRefreshType to string
        /// </summary>
        public static implicit operator string(DatasetRefreshType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum DatasetRefreshType
        /// </summary>
        public static bool operator == (DatasetRefreshType e1, DatasetRefreshType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum DatasetRefreshType
        /// </summary>
        public static bool operator != (DatasetRefreshType e1, DatasetRefreshType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for DatasetRefreshType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is DatasetRefreshType && Equals((DatasetRefreshType)obj);
        }

        /// <summary>
        /// Returns for hashCode DatasetRefreshType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
