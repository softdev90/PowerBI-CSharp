// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for GoalPermissions.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(GoalPermissionsConverter))]
    public struct GoalPermissions : System.IEquatable<GoalPermissions>
    {
        private GoalPermissions(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// No access.
        /// </summary>
        public static readonly GoalPermissions None = "None";

        /// <summary>
        /// View access only.
        /// </summary>
        public static readonly GoalPermissions View = "View";

        /// <summary>
        /// Current value can be updated.
        /// </summary>
        public static readonly GoalPermissions UpdateCurrentValue = "UpdateCurrentValue";

        /// <summary>
        /// Target value can be updated.
        /// </summary>
        public static readonly GoalPermissions UpdateTargetValue = "UpdateTargetValue";

        /// <summary>
        /// Notes can be updated.
        /// </summary>
        public static readonly GoalPermissions UpdateNotes = "UpdateNotes";

        /// <summary>
        /// Status can be updated.
        /// </summary>
        public static readonly GoalPermissions UpdateStatus = "UpdateStatus";

        /// <summary>
        /// Current and target values can be updated.
        /// </summary>
        public static readonly GoalPermissions UpdateValues = "UpdateValues";

        /// <summary>
        /// Values, notes, and status can be updated.
        /// </summary>
        public static readonly GoalPermissions All = "All";

        /// <summary>
        /// Current value and notes can be updated.
        /// </summary>
        public static readonly GoalPermissions UpdateCurrentValueAndNotes = "11";

        /// <summary>
        /// Target value and notes can be updated.
        /// </summary>
        public static readonly GoalPermissions UpdateTargetValueAndNotes = "13";

        /// <summary>
        /// Current value, target value, and notes can be updated.
        /// </summary>
        public static readonly GoalPermissions UpdateCurrentValueAndTargetValueAndNotes = "15";

        /// <summary>
        /// Current value and status can be updated.
        /// </summary>
        public static readonly GoalPermissions UpdateCurrentValueAndStatus = "19";

        /// <summary>
        /// Target value and status can be updated.
        /// </summary>
        public static readonly GoalPermissions UpdateTargetValueAndStatus = "21";

        /// <summary>
        /// Current value, target value, and status can be updated.
        /// </summary>
        public static readonly GoalPermissions UpdateCurrentValueAndTargetValueAndStatus = "23";

        /// <summary>
        /// Notes and status can be updated.
        /// </summary>
        public static readonly GoalPermissions UpdateNotesAndStatus = "25";

        /// <summary>
        /// Current value, notes, and status can be updated.
        /// </summary>
        public static readonly GoalPermissions UpdateCurrentValueAndNotesAndStatus = "27";

        /// <summary>
        /// Target value, notes, and status can be updated.
        /// </summary>
        public static readonly GoalPermissions UpdateTargetValueAndNotesAndStatus = "29";


        /// <summary>
        /// Underlying value of enum GoalPermissions
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for GoalPermissions
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type GoalPermissions
        /// </summary>
        public bool Equals(GoalPermissions e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to GoalPermissions
        /// </summary>
        public static implicit operator GoalPermissions(string value)
        {
            return new GoalPermissions(value);
        }

        /// <summary>
        /// Implicit operator to convert GoalPermissions to string
        /// </summary>
        public static implicit operator string(GoalPermissions e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum GoalPermissions
        /// </summary>
        public static bool operator == (GoalPermissions e1, GoalPermissions e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum GoalPermissions
        /// </summary>
        public static bool operator != (GoalPermissions e1, GoalPermissions e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for GoalPermissions
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is GoalPermissions && Equals((GoalPermissions)obj);
        }

        /// <summary>
        /// Returns for hashCode GoalPermissions
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
