// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for GoalProcessingStatus.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(GoalProcessingStatusConverter))]
    public struct GoalProcessingStatus : System.IEquatable<GoalProcessingStatus>
    {
        private GoalProcessingStatus(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Not processed
        /// </summary>
        public static readonly GoalProcessingStatus NotProcessed = "NotProcessed";

        /// <summary>
        /// Succeeded
        /// </summary>
        public static readonly GoalProcessingStatus Succeeded = "Succeeded";

        /// <summary>
        /// Failed
        /// </summary>
        public static readonly GoalProcessingStatus Failed = "Failed";

        /// <summary>
        /// User not found
        /// </summary>
        public static readonly GoalProcessingStatus UserNotFound = "UserNotFound";

        /// <summary>
        /// Query execution error
        /// </summary>
        public static readonly GoalProcessingStatus QueryExecutionError = "QueryExecutionError";

        /// <summary>
        /// Query result error
        /// </summary>
        public static readonly GoalProcessingStatus QueryResultError = "QueryResultError";

        /// <summary>
        /// Bad query result metadata
        /// </summary>
        public static readonly GoalProcessingStatus BadQueryResultMetadata = "BadQueryResultMetadata";

        /// <summary>
        /// Empty goal values
        /// </summary>
        public static readonly GoalProcessingStatus EmptyGoalValues = "EmptyGoalValues";

        /// <summary>
        /// Connected dataset deleted
        /// </summary>
        public static readonly GoalProcessingStatus ConnectedDatasetDeleted = "ConnectedDatasetDeleted";

        /// <summary>
        /// User not authorized
        /// </summary>
        public static readonly GoalProcessingStatus UserNotAuthorized = "UserNotAuthorized";

        /// <summary>
        /// Model not found
        /// </summary>
        public static readonly GoalProcessingStatus ModelNotFound = "ModelNotFound";

        /// <summary>
        /// Scorecard not found
        /// </summary>
        public static readonly GoalProcessingStatus ScorecardNotFound = "ScorecardNotFound";


        /// <summary>
        /// Underlying value of enum GoalProcessingStatus
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for GoalProcessingStatus
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type GoalProcessingStatus
        /// </summary>
        public bool Equals(GoalProcessingStatus e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to GoalProcessingStatus
        /// </summary>
        public static implicit operator GoalProcessingStatus(string value)
        {
            return new GoalProcessingStatus(value);
        }

        /// <summary>
        /// Implicit operator to convert GoalProcessingStatus to string
        /// </summary>
        public static implicit operator string(GoalProcessingStatus e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum GoalProcessingStatus
        /// </summary>
        public static bool operator == (GoalProcessingStatus e1, GoalProcessingStatus e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum GoalProcessingStatus
        /// </summary>
        public static bool operator != (GoalProcessingStatus e1, GoalProcessingStatus e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for GoalProcessingStatus
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is GoalProcessingStatus && Equals((GoalProcessingStatus)obj);
        }

        /// <summary>
        /// Returns for hashCode GoalProcessingStatus
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
