// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for Type.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(TypeConverter))]
    public struct Type : System.IEquatable<Type>
    {
        private Type(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// The datamart type was unset
        /// </summary>
        public static readonly Type Unset = "Unset";

        /// <summary>
        /// The datamart has no type
        /// </summary>
        public static readonly Type Ignore = "Ignore";

        /// <summary>
        /// The datamart is of Sql type
        /// </summary>
        public static readonly Type Sql = "Sql";

        /// <summary>
        /// The datamart is of Lakehouse type
        /// </summary>
        public static readonly Type Lakehouse = "Lakehouse";

        /// <summary>
        /// The datamart is of Dataverse type
        /// </summary>
        public static readonly Type Dataverse = "Dataverse";

        /// <summary>
        /// The datamart is of Datawarehouse type
        /// </summary>
        public static readonly Type Datawarehouse = "Datawarehouse";


        /// <summary>
        /// Underlying value of enum Type
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for Type
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type Type
        /// </summary>
        public bool Equals(Type e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to Type
        /// </summary>
        public static implicit operator Type(string value)
        {
            return new Type(value);
        }

        /// <summary>
        /// Implicit operator to convert Type to string
        /// </summary>
        public static implicit operator string(Type e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum Type
        /// </summary>
        public static bool operator == (Type e1, Type e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum Type
        /// </summary>
        public static bool operator != (Type e1, Type e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for Type
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is Type && Equals((Type)obj);
        }

        /// <summary>
        /// Returns for hashCode Type
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
