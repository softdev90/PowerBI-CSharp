// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for WorkloadState.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(WorkloadStateConverter))]
    public struct WorkloadState : System.IEquatable<WorkloadState>
    {
        private WorkloadState(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// The workload is disabled
        /// </summary>
        public static readonly WorkloadState Disabled = "Disabled";

        /// <summary>
        /// The workload is enabled
        /// </summary>
        public static readonly WorkloadState Enabled = "Enabled";

        /// <summary>
        /// The workload is unsupported by the current capacity SKU and cannot
        /// be enabled. This value cannot be set by the user in a [Patch
        /// Workload](/rest/api/power-bi/capacities/patch-workload) API call.
        /// </summary>
        public static readonly WorkloadState Unsupported = "Unsupported";


        /// <summary>
        /// Underlying value of enum WorkloadState
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for WorkloadState
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type WorkloadState
        /// </summary>
        public bool Equals(WorkloadState e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to WorkloadState
        /// </summary>
        public static implicit operator WorkloadState(string value)
        {
            return new WorkloadState(value);
        }

        /// <summary>
        /// Implicit operator to convert WorkloadState to string
        /// </summary>
        public static implicit operator string(WorkloadState e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum WorkloadState
        /// </summary>
        public static bool operator == (WorkloadState e1, WorkloadState e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum WorkloadState
        /// </summary>
        public static bool operator != (WorkloadState e1, WorkloadState e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for WorkloadState
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is WorkloadState && Equals((WorkloadState)obj);
        }

        /// <summary>
        /// Returns for hashCode WorkloadState
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
