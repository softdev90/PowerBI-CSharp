// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Power BI dataset refresh request
    /// </summary>
    public partial class DatasetRefreshRequest
    {
        /// <summary>
        /// Initializes a new instance of the DatasetRefreshRequest class.
        /// </summary>
        public DatasetRefreshRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatasetRefreshRequest class.
        /// </summary>
        /// <param name="notifyOption">Mail notification options. This is not
        /// applicable to enhanced refresh. Possible values include:
        /// 'NoNotification', 'MailOnFailure', 'MailOnCompletion'</param>
        /// <param name="type">The type of processing to perform. Possible
        /// values include: 'Full', 'ClearValues', 'Calculate', 'DataOnly',
        /// 'Automatic', 'Defragment'</param>
        /// <param name="commitMode">Determines if objects will be committed in
        /// batches or only when complete. Possible values include:
        /// 'Transactional', 'PartialBatch'</param>
        /// <param name="maxParallelism">The maximum number of threads on which
        /// to run parallel processing commands</param>
        /// <param name="retryCount">Number of times the operation will retry
        /// before failing</param>
        /// <param name="objects">An array of objects to be processed</param>
        /// <param name="applyRefreshPolicy">Determine if the policy is applied
        /// or not</param>
        /// <param name="effectiveDate">If an incremental refresh policy is
        /// applied, the `effectiveDate` parameter overrides the current
        /// date.</param>
        public DatasetRefreshRequest(NotifyOption notifyOption, DatasetRefreshType? type = default(DatasetRefreshType?), DatasetCommitMode? commitMode = default(DatasetCommitMode?), int? maxParallelism = default(int?), int? retryCount = default(int?), IList<DatasetRefreshObjects> objects = default(IList<DatasetRefreshObjects>), bool? applyRefreshPolicy = default(bool?), System.DateTime? effectiveDate = default(System.DateTime?))
        {
            NotifyOption = notifyOption;
            Type = type;
            CommitMode = commitMode;
            MaxParallelism = maxParallelism;
            RetryCount = retryCount;
            Objects = objects;
            ApplyRefreshPolicy = applyRefreshPolicy;
            EffectiveDate = effectiveDate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets mail notification options. This is not applicable to
        /// enhanced refresh. Possible values include: 'NoNotification',
        /// 'MailOnFailure', 'MailOnCompletion'
        /// </summary>
        [JsonProperty(PropertyName = "notifyOption")]
        public NotifyOption NotifyOption { get; set; }

        /// <summary>
        /// Gets or sets the type of processing to perform. Possible values
        /// include: 'Full', 'ClearValues', 'Calculate', 'DataOnly',
        /// 'Automatic', 'Defragment'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public DatasetRefreshType? Type { get; set; }

        /// <summary>
        /// Gets or sets determines if objects will be committed in batches or
        /// only when complete. Possible values include: 'Transactional',
        /// 'PartialBatch'
        /// </summary>
        [JsonProperty(PropertyName = "commitMode")]
        public DatasetCommitMode? CommitMode { get; set; }

        /// <summary>
        /// Gets or sets the maximum number of threads on which to run parallel
        /// processing commands
        /// </summary>
        [JsonProperty(PropertyName = "maxParallelism")]
        public int? MaxParallelism { get; set; }

        /// <summary>
        /// Gets or sets number of times the operation will retry before
        /// failing
        /// </summary>
        [JsonProperty(PropertyName = "retryCount")]
        public int? RetryCount { get; set; }

        /// <summary>
        /// Gets or sets an array of objects to be processed
        /// </summary>
        [JsonProperty(PropertyName = "objects")]
        public IList<DatasetRefreshObjects> Objects { get; set; }

        /// <summary>
        /// Gets or sets determine if the policy is applied or not
        /// </summary>
        [JsonProperty(PropertyName = "applyRefreshPolicy")]
        public bool? ApplyRefreshPolicy { get; set; }

        /// <summary>
        /// Gets or sets if an incremental refresh policy is applied, the
        /// `effectiveDate` parameter overrides the current date.
        /// </summary>
        [JsonProperty(PropertyName = "effectiveDate")]
        public System.DateTime? EffectiveDate { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
