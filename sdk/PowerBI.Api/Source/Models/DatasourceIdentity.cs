// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Effective identity for connecting DirectQuery data sources with single
    /// sign-on (SSO) enabled.
    /// </summary>
    public partial class DatasourceIdentity
    {
        /// <summary>
        /// Initializes a new instance of the DatasourceIdentity class.
        /// </summary>
        public DatasourceIdentity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatasourceIdentity class.
        /// </summary>
        /// <param name="identityBlob">A blob for specifying the
        /// identity.</param>
        /// <param name="datasources">An array of data sources that this
        /// identity applies to.</param>
        public DatasourceIdentity(string identityBlob, IList<DatasourceSelector> datasources)
        {
            IdentityBlob = identityBlob;
            Datasources = datasources;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a blob for specifying the identity.
        /// </summary>
        [JsonProperty(PropertyName = "identityBlob")]
        public string IdentityBlob { get; set; }

        /// <summary>
        /// Gets or sets an array of data sources that this identity applies
        /// to.
        /// </summary>
        [JsonProperty(PropertyName = "datasources")]
        public IList<DatasourceSelector> Datasources { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (IdentityBlob == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "IdentityBlob");
            }
            if (Datasources == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Datasources");
            }
            if (Datasources != null)
            {
                foreach (var element in Datasources)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
