// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Base request to deploy content from a deployment pipeline stage
    /// </summary>
    public partial class DeployRequestBase
    {
        /// <summary>
        /// Initializes a new instance of the DeployRequestBase class.
        /// </summary>
        public DeployRequestBase()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeployRequestBase class.
        /// </summary>
        /// <param name="sourceStageOrder">The numeric identifier of the
        /// pipeline deployment stage that the content should be deployed from.
        /// Development (0), Test (1), Production (2).</param>
        /// <param name="isBackwardDeployment">Whether the deployment will be
        /// from a later stage in the deployment pipeline, to an earlier one.
        /// The default value is `false`.</param>
        /// <param name="newWorkspace">The configuration details for creating a
        /// new workspace. Required when deploying to a stage that has no
        /// assigned workspaces. The deployment will fail if the new workspace
        /// configuration details aren't provided when required.</param>
        /// <param name="updateAppSettings">Update org app in the target
        /// workspace settings</param>
        /// <param name="options">Options that control the behavior of the
        /// entire deployment</param>
        public DeployRequestBase(int sourceStageOrder, bool? isBackwardDeployment = default(bool?), PipelineNewWorkspaceRequest newWorkspace = default(PipelineNewWorkspaceRequest), PipelineUpdateAppSettings updateAppSettings = default(PipelineUpdateAppSettings), DeploymentOptions options = default(DeploymentOptions))
        {
            SourceStageOrder = sourceStageOrder;
            IsBackwardDeployment = isBackwardDeployment;
            NewWorkspace = newWorkspace;
            UpdateAppSettings = updateAppSettings;
            Options = options;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the numeric identifier of the pipeline deployment
        /// stage that the content should be deployed from. Development (0),
        /// Test (1), Production (2).
        /// </summary>
        [JsonProperty(PropertyName = "sourceStageOrder")]
        public int SourceStageOrder { get; set; }

        /// <summary>
        /// Gets or sets whether the deployment will be from a later stage in
        /// the deployment pipeline, to an earlier one. The default value is
        /// `false`.
        /// </summary>
        [JsonProperty(PropertyName = "isBackwardDeployment")]
        public bool? IsBackwardDeployment { get; set; }

        /// <summary>
        /// Gets or sets the configuration details for creating a new
        /// workspace. Required when deploying to a stage that has no assigned
        /// workspaces. The deployment will fail if the new workspace
        /// configuration details aren't provided when required.
        /// </summary>
        [JsonProperty(PropertyName = "newWorkspace")]
        public PipelineNewWorkspaceRequest NewWorkspace { get; set; }

        /// <summary>
        /// Gets or sets update org app in the target workspace settings
        /// </summary>
        [JsonProperty(PropertyName = "updateAppSettings")]
        public PipelineUpdateAppSettings UpdateAppSettings { get; set; }

        /// <summary>
        /// Gets or sets options that control the behavior of the entire
        /// deployment
        /// </summary>
        [JsonProperty(PropertyName = "options")]
        public DeploymentOptions Options { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
