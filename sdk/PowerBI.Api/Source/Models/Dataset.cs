// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A Power BI dataset. The API returns a subset of the following list of
    /// dataset properties. The subset depends on the API called, caller
    /// permissions, and the availability of the data in the Power BI database.
    /// </summary>
    public partial class Dataset
    {
        /// <summary>
        /// Initializes a new instance of the Dataset class.
        /// </summary>
        public Dataset()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Dataset class.
        /// </summary>
        /// <param name="id">The dataset ID</param>
        /// <param name="name">The dataset name</param>
        /// <param name="configuredBy">The dataset owner</param>
        /// <param name="createdDate">The dataset creation date and
        /// time</param>
        /// <param name="contentProviderType">The content provider type for the
        /// dataset</param>
        /// <param name="description">The dataset description</param>
        /// <param name="upstreamDataflows">The upstream dataflows</param>
        /// <param name="createReportEmbedURL">The dataset create report embed
        /// URL</param>
        /// <param name="qnaEmbedURL">The dataset Q&amp;A embed URL</param>
        /// <param name="webUrl">The web URL of the dataset</param>
        /// <param name="isEffectiveIdentityRequired">Whether the dataset
        /// requires an effective identity, which you must send in a
        /// [GenerateToken](/rest/api/power-bi/embed-token/generate-token) API
        /// call.</param>
        /// <param name="isEffectiveIdentityRolesRequired">Whether row-level
        /// security is defined inside the .pbix file. If so, you must specify
        /// a role.</param>
        /// <param name="isOnPremGatewayRequired">Whether the dataset requires
        /// an on-premises data gateway</param>
        /// <param name="encryption">Dataset encryption information. Only
        /// applicable when `$expand` is specified.</param>
        /// <param name="users">(Empty value) The dataset user access details.
        /// This property will be removed from the payload response in an
        /// upcoming release. You can retrieve user information on a Power BI
        /// item (such as a report or a dashboard) by using the [Get Dataset
        /// Users as
        /// Admin](/rest/api/power-bi/admin/datasets-get-dataset-users-as-admin)
        /// API, or the
        /// [PostWorkspaceInfo](/rest/api/power-bi/admin/workspace-info-post-workspace-info)
        /// API with the `getArtifactUsers` parameter.</param>
        /// <param name="addRowsAPIEnabled">Whether the dataset allows adding
        /// new rows</param>
        /// <param name="isRefreshable">Whether the dataset can be
        /// refreshed</param>
        /// <param name="targetStorageMode">The dataset storage mode</param>
        public Dataset(string id, string name = default(string), string configuredBy = default(string), System.DateTime? createdDate = default(System.DateTime?), string contentProviderType = default(string), string description = default(string), IList<DependentDataflow> upstreamDataflows = default(IList<DependentDataflow>), string createReportEmbedURL = default(string), string qnaEmbedURL = default(string), string webUrl = default(string), bool? isEffectiveIdentityRequired = default(bool?), bool? isEffectiveIdentityRolesRequired = default(bool?), bool? isOnPremGatewayRequired = default(bool?), Encryption encryption = default(Encryption), IList<DatasetUser> users = default(IList<DatasetUser>), bool? addRowsAPIEnabled = default(bool?), bool? isRefreshable = default(bool?), string targetStorageMode = default(string))
        {
            Id = id;
            Name = name;
            ConfiguredBy = configuredBy;
            CreatedDate = createdDate;
            ContentProviderType = contentProviderType;
            Description = description;
            UpstreamDataflows = upstreamDataflows;
            CreateReportEmbedURL = createReportEmbedURL;
            QnaEmbedURL = qnaEmbedURL;
            WebUrl = webUrl;
            IsEffectiveIdentityRequired = isEffectiveIdentityRequired;
            IsEffectiveIdentityRolesRequired = isEffectiveIdentityRolesRequired;
            IsOnPremGatewayRequired = isOnPremGatewayRequired;
            Encryption = encryption;
            Users = users;
            AddRowsAPIEnabled = addRowsAPIEnabled;
            IsRefreshable = isRefreshable;
            TargetStorageMode = targetStorageMode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the dataset ID
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the dataset name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the dataset owner
        /// </summary>
        [JsonProperty(PropertyName = "configuredBy")]
        public string ConfiguredBy { get; set; }

        /// <summary>
        /// Gets or sets the dataset creation date and time
        /// </summary>
        [JsonProperty(PropertyName = "CreatedDate")]
        public System.DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or sets the content provider type for the dataset
        /// </summary>
        [JsonProperty(PropertyName = "ContentProviderType")]
        public string ContentProviderType { get; set; }

        /// <summary>
        /// Gets or sets the dataset description
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the upstream dataflows
        /// </summary>
        [JsonProperty(PropertyName = "upstreamDataflows")]
        public IList<DependentDataflow> UpstreamDataflows { get; set; }

        /// <summary>
        /// Gets or sets the dataset create report embed URL
        /// </summary>
        [JsonProperty(PropertyName = "CreateReportEmbedURL")]
        public string CreateReportEmbedURL { get; set; }

        /// <summary>
        /// Gets or sets the dataset Q&amp;amp;A embed URL
        /// </summary>
        [JsonProperty(PropertyName = "QnaEmbedURL")]
        public string QnaEmbedURL { get; set; }

        /// <summary>
        /// Gets or sets the web URL of the dataset
        /// </summary>
        [JsonProperty(PropertyName = "webUrl")]
        public string WebUrl { get; set; }

        /// <summary>
        /// Gets or sets whether the dataset requires an effective identity,
        /// which you must send in a
        /// [GenerateToken](/rest/api/power-bi/embed-token/generate-token) API
        /// call.
        /// </summary>
        [JsonProperty(PropertyName = "IsEffectiveIdentityRequired")]
        public bool? IsEffectiveIdentityRequired { get; set; }

        /// <summary>
        /// Gets or sets whether row-level security is defined inside the .pbix
        /// file. If so, you must specify a role.
        /// </summary>
        [JsonProperty(PropertyName = "IsEffectiveIdentityRolesRequired")]
        public bool? IsEffectiveIdentityRolesRequired { get; set; }

        /// <summary>
        /// Gets or sets whether the dataset requires an on-premises data
        /// gateway
        /// </summary>
        [JsonProperty(PropertyName = "IsOnPremGatewayRequired")]
        public bool? IsOnPremGatewayRequired { get; set; }

        /// <summary>
        /// Gets or sets dataset encryption information. Only applicable when
        /// `$expand` is specified.
        /// </summary>
        [JsonProperty(PropertyName = "Encryption")]
        public Encryption Encryption { get; set; }

        /// <summary>
        /// Gets or sets (Empty value) The dataset user access details. This
        /// property will be removed from the payload response in an upcoming
        /// release. You can retrieve user information on a Power BI item (such
        /// as a report or a dashboard) by using the [Get Dataset Users as
        /// Admin](/rest/api/power-bi/admin/datasets-get-dataset-users-as-admin)
        /// API, or the
        /// [PostWorkspaceInfo](/rest/api/power-bi/admin/workspace-info-post-workspace-info)
        /// API with the `getArtifactUsers` parameter.
        /// </summary>
        [JsonProperty(PropertyName = "users")]
        public IList<DatasetUser> Users { get; set; }

        /// <summary>
        /// Gets or sets whether the dataset allows adding new rows
        /// </summary>
        [JsonProperty(PropertyName = "addRowsAPIEnabled")]
        public bool? AddRowsAPIEnabled { get; set; }

        /// <summary>
        /// Gets or sets whether the dataset can be refreshed
        /// </summary>
        [JsonProperty(PropertyName = "IsRefreshable")]
        public bool? IsRefreshable { get; set; }

        /// <summary>
        /// Gets or sets the dataset storage mode
        /// </summary>
        [JsonProperty(PropertyName = "targetStorageMode")]
        public string TargetStorageMode { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Users != null)
            {
                foreach (var element in Users)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
