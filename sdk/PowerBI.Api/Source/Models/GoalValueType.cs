// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for GoalValueType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(GoalValueTypeConverter))]
    public struct GoalValueType : System.IEquatable<GoalValueType>
    {
        private GoalValueType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// The information is about current value of the goal.
        /// </summary>
        public static readonly GoalValueType Current = "Current";

        /// <summary>
        /// The information is about target value of the goal.
        /// </summary>
        public static readonly GoalValueType Target = "Target";

        /// <summary>
        /// The information is about status of the goal.
        /// </summary>
        public static readonly GoalValueType Status = "Status";


        /// <summary>
        /// Underlying value of enum GoalValueType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for GoalValueType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type GoalValueType
        /// </summary>
        public bool Equals(GoalValueType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to GoalValueType
        /// </summary>
        public static implicit operator GoalValueType(string value)
        {
            return new GoalValueType(value);
        }

        /// <summary>
        /// Implicit operator to convert GoalValueType to string
        /// </summary>
        public static implicit operator string(GoalValueType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum GoalValueType
        /// </summary>
        public static bool operator == (GoalValueType e1, GoalValueType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum GoalValueType
        /// </summary>
        public static bool operator != (GoalValueType e1, GoalValueType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for GoalValueType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is GoalValueType && Equals((GoalValueType)obj);
        }

        /// <summary>
        /// Returns for hashCode GoalValueType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
