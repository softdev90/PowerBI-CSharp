// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines the user identity and roles. For more information, see
    /// [Row-level security with Power BI
    /// Embedded](/power-bi/developer/embedded/embedded-row-level-security).
    /// </summary>
    public partial class EffectiveIdentity
    {
        /// <summary>
        /// Initializes a new instance of the EffectiveIdentity class.
        /// </summary>
        public EffectiveIdentity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EffectiveIdentity class.
        /// </summary>
        /// <param name="username">The effective username within a token that
        /// applies row-level security rules. For an on-premises model, the
        /// username can contain alphanumeric or any of the following
        /// characters `.`, `-`, `_`, `!`, `#`, `^`, `~`, `\\`, `@`. For cloud
        /// models, the username can contain any ASCII character. For either
        /// model, the username length must not exceed 256 characters, and the
        /// username shouldn't contain spaces.</param>
        /// <param name="datasets">An array of datasets for which this identity
        /// applies</param>
        /// <param name="roles">An array of row-level security (RLS) roles
        /// within a token that applies RLS rules. An identity can contain up
        /// to 50 roles. A role can contain any character except `,`, and its
        /// length must not exceed 50 characters.</param>
        /// <param name="customData">[Custom
        /// data](/power-bi/developer/embedded/embedded-row-level-security#using-the-customdata-feature)
        /// that's used to apply row-level security rules. Supported for live
        /// connection to Azure Analysis Services models and cloud models
        /// only.</param>
        /// <param name="identityBlob">A blob that specifies an
        /// [identity](/power-bi/developer/embedded/embedded-row-level-security#token-based-identity-sdk-additions).
        /// Only supported for datasets with a DirectQuery connection to Azure
        /// SQL.</param>
        /// <param name="reports">An array of reports for which this identity
        /// applies. Only supported for paginated reports.</param>
        public EffectiveIdentity(string username, IList<string> datasets = default(IList<string>), IList<string> roles = default(IList<string>), string customData = default(string), IdentityBlob identityBlob = default(IdentityBlob), IList<string> reports = default(IList<string>))
        {
            Username = username;
            Datasets = datasets;
            Roles = roles;
            CustomData = customData;
            IdentityBlob = identityBlob;
            Reports = reports;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the effective username within a token that applies
        /// row-level security rules. For an on-premises model, the username
        /// can contain alphanumeric or any of the following characters `.`,
        /// `-`, `_`, `!`, `#`, `^`, `~`, `\\`, `@`. For cloud models, the
        /// username can contain any ASCII character. For either model, the
        /// username length must not exceed 256 characters, and the username
        /// shouldn't contain spaces.
        /// </summary>
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }

        /// <summary>
        /// Gets or sets an array of datasets for which this identity applies
        /// </summary>
        [JsonProperty(PropertyName = "datasets")]
        public IList<string> Datasets { get; set; }

        /// <summary>
        /// Gets or sets an array of row-level security (RLS) roles within a
        /// token that applies RLS rules. An identity can contain up to 50
        /// roles. A role can contain any character except `,`, and its length
        /// must not exceed 50 characters.
        /// </summary>
        [JsonProperty(PropertyName = "roles")]
        public IList<string> Roles { get; set; }

        /// <summary>
        /// Gets or sets [Custom
        /// data](/power-bi/developer/embedded/embedded-row-level-security#using-the-customdata-feature)
        /// that's used to apply row-level security rules. Supported for live
        /// connection to Azure Analysis Services models and cloud models only.
        /// </summary>
        [JsonProperty(PropertyName = "customData")]
        public string CustomData { get; set; }

        /// <summary>
        /// Gets or sets a blob that specifies an
        /// [identity](/power-bi/developer/embedded/embedded-row-level-security#token-based-identity-sdk-additions).
        /// Only supported for datasets with a DirectQuery connection to Azure
        /// SQL.
        /// </summary>
        [JsonProperty(PropertyName = "identityBlob")]
        public IdentityBlob IdentityBlob { get; set; }

        /// <summary>
        /// Gets or sets an array of reports for which this identity applies.
        /// Only supported for paginated reports.
        /// </summary>
        [JsonProperty(PropertyName = "reports")]
        public IList<string> Reports { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Username == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Username");
            }
            if (IdentityBlob != null)
            {
                IdentityBlob.Validate();
            }
        }
    }
}
