// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A Power BI refresh schedule for [imported
    /// model](/power-bi/connect-data/refresh-data#datasets-in-import-mode)
    /// </summary>
    public partial class RefreshSchedule
    {
        /// <summary>
        /// Initializes a new instance of the RefreshSchedule class.
        /// </summary>
        public RefreshSchedule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RefreshSchedule class.
        /// </summary>
        /// <param name="days">The days on which to execute the refresh</param>
        /// <param name="times">The times of day to execute the refresh</param>
        /// <param name="enabled">Whether the refresh is enabled</param>
        /// <param name="localTimeZoneId">The ID of the time zone to use. For
        /// more information, see [Time zone
        /// info](/dotnet/api/system.timezoneinfo.id).</param>
        /// <param name="notifyOption">The notification option on termination
        /// of a scheduled refresh. Service principals only support the
        /// `NoNotification` value. Possible values include: 'NoNotification',
        /// 'MailOnFailure'</param>
        public RefreshSchedule(IList<Days?> days = default(IList<Days?>), IList<string> times = default(IList<string>), bool? enabled = default(bool?), string localTimeZoneId = default(string), ScheduleNotifyOption? notifyOption = default(ScheduleNotifyOption?))
        {
            Days = days;
            Times = times;
            Enabled = enabled;
            LocalTimeZoneId = localTimeZoneId;
            NotifyOption = notifyOption;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the days on which to execute the refresh
        /// </summary>
        [JsonProperty(PropertyName = "days")]
        public IList<Days?> Days { get; set; }

        /// <summary>
        /// Gets or sets the times of day to execute the refresh
        /// </summary>
        [JsonProperty(PropertyName = "times")]
        public IList<string> Times { get; set; }

        /// <summary>
        /// Gets or sets whether the refresh is enabled
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or sets the ID of the time zone to use. For more information,
        /// see [Time zone info](/dotnet/api/system.timezoneinfo.id).
        /// </summary>
        [JsonProperty(PropertyName = "localTimeZoneId")]
        public string LocalTimeZoneId { get; set; }

        /// <summary>
        /// Gets or sets the notification option on termination of a scheduled
        /// refresh. Service principals only support the `NoNotification`
        /// value. Possible values include: 'NoNotification', 'MailOnFailure'
        /// </summary>
        [JsonProperty(PropertyName = "NotifyOption")]
        public ScheduleNotifyOption? NotifyOption { get; set; }

    }
}
