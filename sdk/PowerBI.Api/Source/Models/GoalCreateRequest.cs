// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A Power BI goal create request
    /// </summary>
    public partial class GoalCreateRequest
    {
        /// <summary>
        /// Initializes a new instance of the GoalCreateRequest class.
        /// </summary>
        public GoalCreateRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GoalCreateRequest class.
        /// </summary>
        /// <param name="name">The goal name</param>
        /// <param name="startDate">Optional. The UTC timestamp for the start
        /// date of the goal. The time portion of the timestamp is
        /// zero.</param>
        /// <param name="completionDate">Optional. The UTC timestamp for the
        /// completion date of the goal. The time portion of the timestamp is
        /// zero.</param>
        /// <param name="parentId">Optional. The ID of the parent goal, if
        /// defined.</param>
        /// <param name="valuesFormatString">Optional. The [custom format
        /// string](/power-bi/create-reports/desktop-custom-format-strings) for
        /// values.</param>
        /// <param name="datesFormatString">Optional. The [custom format
        /// string](/power-bi/create-reports/desktop-custom-format-strings) for
        /// dates.</param>
        public GoalCreateRequest(string name, System.DateTime? startDate = default(System.DateTime?), System.DateTime? completionDate = default(System.DateTime?), string parentId = default(string), string valuesFormatString = default(string), string datesFormatString = default(string))
        {
            Name = name;
            StartDate = startDate;
            CompletionDate = completionDate;
            ParentId = parentId;
            ValuesFormatString = valuesFormatString;
            DatesFormatString = datesFormatString;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the goal name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets optional. The UTC timestamp for the start date of the
        /// goal. The time portion of the timestamp is zero.
        /// </summary>
        [JsonProperty(PropertyName = "startDate")]
        public System.DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or sets optional. The UTC timestamp for the completion date of
        /// the goal. The time portion of the timestamp is zero.
        /// </summary>
        [JsonProperty(PropertyName = "completionDate")]
        public System.DateTime? CompletionDate { get; set; }

        /// <summary>
        /// Gets or sets optional. The ID of the parent goal, if defined.
        /// </summary>
        [JsonProperty(PropertyName = "parentId")]
        public string ParentId { get; set; }

        /// <summary>
        /// Gets or sets optional. The [custom format
        /// string](/power-bi/create-reports/desktop-custom-format-strings) for
        /// values.
        /// </summary>
        [JsonProperty(PropertyName = "valuesFormatString")]
        public string ValuesFormatString { get; set; }

        /// <summary>
        /// Gets or sets optional. The [custom format
        /// string](/power-bi/create-reports/desktop-custom-format-strings) for
        /// dates.
        /// </summary>
        [JsonProperty(PropertyName = "datesFormatString")]
        public string DatesFormatString { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
