// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A dataset column
    /// </summary>
    public partial class Column
    {
        /// <summary>
        /// Initializes a new instance of the Column class.
        /// </summary>
        public Column()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Column class.
        /// </summary>
        /// <param name="name">The column name</param>
        /// <param name="dataType">The column data type</param>
        /// <param name="formatString">(Optional) The format of the column as
        /// specified in
        /// [FORMAT_STRING](https://docs.microsoft.com/analysis-services/multidimensional-models/mdx/mdx-cell-properties-format-string-contents)</param>
        /// <param name="sortByColumn">(Optional) String name of a column in
        /// the same table to be used to order the current column</param>
        /// <param name="dataCategory">(Optional) String value to be used for
        /// the data category which describes the data within this
        /// column</param>
        /// <param name="isHidden">(Optional) Property indicating if the column
        /// is hidden from view. Default is false.</param>
        /// <param name="summarizeBy">(Optional) Aggregate Function to use for
        /// summarizing this column</param>
        public Column(string name, string dataType, string formatString = default(string), string sortByColumn = default(string), string dataCategory = default(string), bool? isHidden = default(bool?), string summarizeBy = default(string))
        {
            Name = name;
            DataType = dataType;
            FormatString = formatString;
            SortByColumn = sortByColumn;
            DataCategory = dataCategory;
            IsHidden = isHidden;
            SummarizeBy = summarizeBy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the column name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the column data type
        /// </summary>
        [JsonProperty(PropertyName = "dataType")]
        public string DataType { get; set; }

        /// <summary>
        /// Gets or sets (Optional) The format of the column as specified in
        /// [FORMAT_STRING](https://docs.microsoft.com/analysis-services/multidimensional-models/mdx/mdx-cell-properties-format-string-contents)
        /// </summary>
        [JsonProperty(PropertyName = "formatString")]
        public string FormatString { get; set; }

        /// <summary>
        /// Gets or sets (Optional) String name of a column in the same table
        /// to be used to order the current column
        /// </summary>
        [JsonProperty(PropertyName = "sortByColumn")]
        public string SortByColumn { get; set; }

        /// <summary>
        /// Gets or sets (Optional) String value to be used for the data
        /// category which describes the data within this column
        /// </summary>
        [JsonProperty(PropertyName = "dataCategory")]
        public string DataCategory { get; set; }

        /// <summary>
        /// Gets or sets (Optional) Property indicating if the column is hidden
        /// from view. Default is false.
        /// </summary>
        [JsonProperty(PropertyName = "isHidden")]
        public bool? IsHidden { get; set; }

        /// <summary>
        /// Gets or sets (Optional) Aggregate Function to use for summarizing
        /// this column
        /// </summary>
        [JsonProperty(PropertyName = "summarizeBy")]
        public string SummarizeBy { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (DataType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DataType");
            }
            if (Name != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Name, "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\u10000-\\u10FFFF]+$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Name", "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\u10000-\\u10FFFF]+$");
                }
            }
        }
    }
}
