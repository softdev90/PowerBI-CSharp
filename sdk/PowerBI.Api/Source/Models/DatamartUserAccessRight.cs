// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for DatamartUserAccessRight.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(DatamartUserAccessRightConverter))]
    public struct DatamartUserAccessRight : System.IEquatable<DatamartUserAccessRight>
    {
        private DatamartUserAccessRight(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// No permission to content in datamart
        /// </summary>
        public static readonly DatamartUserAccessRight None = "None";

        /// <summary>
        /// Grants Read access to content in datamart
        /// </summary>
        public static readonly DatamartUserAccessRight Read = "Read";

        /// <summary>
        /// Grants write access to content in datamart
        /// </summary>
        public static readonly DatamartUserAccessRight Write = "Write";

        /// <summary>
        /// Grants reshare access to content in datamart
        /// </summary>
        public static readonly DatamartUserAccessRight Reshare = "Reshare";

        /// <summary>
        /// Grants explore access to content in datamart
        /// </summary>
        public static readonly DatamartUserAccessRight Explore = "Explore";

        /// <summary>
        /// Grants read and write access to content in datamart
        /// </summary>
        public static readonly DatamartUserAccessRight ReadWrite = "ReadWrite";

        /// <summary>
        /// Grants read and reshare access to content in datamart
        /// </summary>
        public static readonly DatamartUserAccessRight ReadReshare = "ReadReshare";

        /// <summary>
        /// Grants read and write and reshare access to content in datamart
        /// </summary>
        public static readonly DatamartUserAccessRight ReadWriteReshare = "ReadWriteReshare";

        /// <summary>
        /// Grants read and explore access to content in datamart
        /// </summary>
        public static readonly DatamartUserAccessRight ReadExplore = "ReadExplore";

        /// <summary>
        /// Grants read and reshare and explore access to content in datamart
        /// </summary>
        public static readonly DatamartUserAccessRight ReadReshareExplore = "ReadReshareExplore";

        /// <summary>
        /// Grants read and write and explore access to content in datamart
        /// </summary>
        public static readonly DatamartUserAccessRight ReadWriteExplore = "ReadWriteExplore";

        /// <summary>
        /// Grants read and write and reshare and explore access to content in
        /// datamart
        /// </summary>
        public static readonly DatamartUserAccessRight ReadWriteReshareExplore = "ReadWriteReshareExplore";


        /// <summary>
        /// Underlying value of enum DatamartUserAccessRight
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for DatamartUserAccessRight
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type DatamartUserAccessRight
        /// </summary>
        public bool Equals(DatamartUserAccessRight e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to DatamartUserAccessRight
        /// </summary>
        public static implicit operator DatamartUserAccessRight(string value)
        {
            return new DatamartUserAccessRight(value);
        }

        /// <summary>
        /// Implicit operator to convert DatamartUserAccessRight to string
        /// </summary>
        public static implicit operator string(DatamartUserAccessRight e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum DatamartUserAccessRight
        /// </summary>
        public static bool operator == (DatamartUserAccessRight e1, DatamartUserAccessRight e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum DatamartUserAccessRight
        /// </summary>
        public static bool operator != (DatamartUserAccessRight e1, DatamartUserAccessRight e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for DatamartUserAccessRight
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is DatamartUserAccessRight && Equals((DatamartUserAccessRight)obj);
        }

        /// <summary>
        /// Returns for hashCode DatamartUserAccessRight
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
