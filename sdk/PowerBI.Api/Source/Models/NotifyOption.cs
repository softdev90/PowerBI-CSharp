// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for NotifyOption.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(NotifyOptionConverter))]
    public struct NotifyOption : System.IEquatable<NotifyOption>
    {
        private NotifyOption(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// No notification will be sent
        /// </summary>
        public static readonly NotifyOption NoNotification = "NoNotification";

        /// <summary>
        /// Mail notification will be sent on refresh failure
        /// </summary>
        public static readonly NotifyOption MailOnFailure = "MailOnFailure";

        /// <summary>
        /// Mail notification will be sent on refresh completion, including
        /// either failure and success
        /// </summary>
        public static readonly NotifyOption MailOnCompletion = "MailOnCompletion";


        /// <summary>
        /// Underlying value of enum NotifyOption
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for NotifyOption
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type NotifyOption
        /// </summary>
        public bool Equals(NotifyOption e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to NotifyOption
        /// </summary>
        public static implicit operator NotifyOption(string value)
        {
            return new NotifyOption(value);
        }

        /// <summary>
        /// Implicit operator to convert NotifyOption to string
        /// </summary>
        public static implicit operator string(NotifyOption e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum NotifyOption
        /// </summary>
        public static bool operator == (NotifyOption e1, NotifyOption e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum NotifyOption
        /// </summary>
        public static bool operator != (NotifyOption e1, NotifyOption e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for NotifyOption
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is NotifyOption && Equals((NotifyOption)obj);
        }

        /// <summary>
        /// Returns for hashCode NotifyOption
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
