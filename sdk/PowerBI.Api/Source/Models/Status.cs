// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for Status.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(StatusConverter))]
    public struct Status : System.IEquatable<Status>
    {
        private Status(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Label was not changed. Please retry.
        /// </summary>
        public static readonly Status Failed = "Failed";

        /// <summary>
        /// Failed to set new label. Artifact has a sensitivity label with
        /// protection settings. Power BI could not verify if user has
        /// sufficient usage rights to change label.
        /// </summary>
        public static readonly Status FailedToGetUsageRights = "FailedToGetUsageRights";

        /// <summary>
        /// Failed to set new label. Artifact has a sensitivity label with
        /// protection settings that the admin, or both the admin and the
        /// delegated user, do not have sufficient usage rights to update
        /// label.
        /// </summary>
        public static readonly Status InsufficientUsageRights = "InsufficientUsageRights";

        /// <summary>
        /// Artifact ID or label was not found.
        /// </summary>
        public static readonly Status NotFound = "NotFound";

        /// <summary>
        /// Label was changed on the given artifact.
        /// </summary>
        public static readonly Status Succeeded = "Succeeded";


        /// <summary>
        /// Underlying value of enum Status
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for Status
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type Status
        /// </summary>
        public bool Equals(Status e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to Status
        /// </summary>
        public static implicit operator Status(string value)
        {
            return new Status(value);
        }

        /// <summary>
        /// Implicit operator to convert Status to string
        /// </summary>
        public static implicit operator string(Status e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum Status
        /// </summary>
        public static bool operator == (Status e1, Status e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum Status
        /// </summary>
        public static bool operator != (Status e1, Status e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for Status
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is Status && Equals((Status)obj);
        }

        /// <summary>
        /// Returns for hashCode Status
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
