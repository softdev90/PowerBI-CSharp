// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ScorecardsOperations.
    /// </summary>
    public static partial class ScorecardsOperationsExtensions
    {
            /// <summary>
            /// Returns a list of scorecards from a workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataset.Read.All or Dataset.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            public static Scorecards Get(this IScorecardsOperations operations, int? top = default(int?))
            {
                return operations.GetAsync(top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of scorecards from a workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataset.Read.All or Dataset.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Scorecards> GetAsync(this IScorecardsOperations operations, int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new scorecard.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ##
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scorecard'>
            /// The new scorecard properties.
            /// </param>
            public static Scorecard Post(this IScorecardsOperations operations, ScorecardCreateRequest scorecard)
            {
                return operations.PostAsync(scorecard).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new scorecard.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ##
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scorecard'>
            /// The new scorecard properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Scorecard> PostAsync(this IScorecardsOperations operations, ScorecardCreateRequest scorecard, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(scorecard, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a scorecard with ID.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataset.Read.All or Dataset.ReadWrite.All
            ///
            /// ##
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline, receives a comma-separated list of data
            /// types. Supported: goals, goalValues, aggregations and notes.
            /// </param>
            public static Scorecard GetById(this IScorecardsOperations operations, string expand = default(string))
            {
                return operations.GetByIdAsync(expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a scorecard with ID.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataset.Read.All or Dataset.ReadWrite.All
            ///
            /// ##
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline, receives a comma-separated list of data
            /// types. Supported: goals, goalValues, aggregations and notes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Scorecard> GetByIdAsync(this IScorecardsOperations operations, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a scorecard by its ID
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ##
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scorecard'>
            /// The scorecard properties to patch
            /// </param>
            public static Scorecard PatchById(this IScorecardsOperations operations, Scorecard scorecard)
            {
                return operations.PatchByIdAsync(scorecard).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a scorecard by its ID
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ##
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scorecard'>
            /// The scorecard properties to patch
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Scorecard> PatchByIdAsync(this IScorecardsOperations operations, Scorecard scorecard, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchByIdWithHttpMessagesAsync(scorecard, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a scorecard by its ID.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ##
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void DeleteById(this IScorecardsOperations operations)
            {
                operations.DeleteByIdAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a scorecard by its ID.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ##
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteByIdAsync(this IScorecardsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteByIdWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Reads a scorecard associated with an internal report ID.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataset.Read.All or Dataset.ReadWrite.All
            ///
            /// ##
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The id of the internal report associated with the scorecard.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline, receives a comma-separated list of data
            /// types. Supported: goals, goalValues and aggregations.
            /// </param>
            public static Scorecard GetScorecardByReportId(this IScorecardsOperations operations, System.Guid reportId, string expand = default(string))
            {
                return operations.GetScorecardByReportIdAsync(reportId, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reads a scorecard associated with an internal report ID.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataset.Read.All or Dataset.ReadWrite.All
            ///
            /// ##
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The id of the internal report associated with the scorecard.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline, receives a comma-separated list of data
            /// types. Supported: goals, goalValues and aggregations.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Scorecard> GetScorecardByReportIdAsync(this IScorecardsOperations operations, System.Guid reportId, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetScorecardByReportIdWithHttpMessagesAsync(reportId, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Moves goals within the scorecard. Changes their ranks and parents.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ##
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='moveGoalsRequest'>
            /// The request describing the move operation.
            /// </param>
            public static void MoveGoals(this IScorecardsOperations operations, GoalsMoveRequest moveGoalsRequest)
            {
                operations.MoveGoalsAsync(moveGoalsRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Moves goals within the scorecard. Changes their ranks and parents.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ##
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='moveGoalsRequest'>
            /// The request describing the move operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task MoveGoalsAsync(this IScorecardsOperations operations, GoalsMoveRequest moveGoalsRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.MoveGoalsWithHttpMessagesAsync(moveGoalsRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
