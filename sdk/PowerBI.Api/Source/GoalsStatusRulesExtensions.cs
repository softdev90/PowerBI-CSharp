// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for GoalsStatusRules.
    /// </summary>
    public static partial class GoalsStatusRulesExtensions
    {
            /// <summary>
            /// Returns status rules of a goal.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataset.Read.All or Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static GoalsRulesGoalStatusRules Get(this IGoalsStatusRules operations)
            {
                return operations.GetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns status rules of a goal.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataset.Read.All or Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GoalsRulesGoalStatusRules> GetAsync(this IGoalsStatusRules operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates status rules of a goal.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statusRulesUpdateRequest'>
            /// The status rules definition.
            /// </param>
            public static GoalsRulesGoalStatusRules Post(this IGoalsStatusRules operations, GoalsRulesGoalStatusRulesUpdateRequest statusRulesUpdateRequest)
            {
                return operations.PostAsync(statusRulesUpdateRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates status rules of a goal.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statusRulesUpdateRequest'>
            /// The status rules definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GoalsRulesGoalStatusRules> PostAsync(this IGoalsStatusRules operations, GoalsRulesGoalStatusRulesUpdateRequest statusRulesUpdateRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(statusRulesUpdateRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes status rule definitions from a goal.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void Delete(this IGoalsStatusRules operations)
            {
                operations.DeleteAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes status rule definitions from a goal.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IGoalsStatusRules operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
