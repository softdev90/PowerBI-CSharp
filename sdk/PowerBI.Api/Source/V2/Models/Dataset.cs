// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.V2.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A Power BI dataset
    /// </summary>
    public partial class Dataset
    {
        /// <summary>
        /// Initializes a new instance of the Dataset class.
        /// </summary>
        public Dataset()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Dataset class.
        /// </summary>
        /// <param name="name">The dataset name</param>
        /// <param name="tables">The dataset tables, only relevant to post
        /// dataset API</param>
        /// <param name="id">The dataset id</param>
        /// <param name="configuredBy">The dataset owner</param>
        /// <param name="defaultRetentionPolicy">The dataset default data
        /// retention policy, only relevant to post dataset API</param>
        /// <param name="addRowsAPIEnabled">Whether dataset allows adding new
        /// rows</param>
        /// <param name="webUrl">The dataset web url</param>
        /// <param name="relationships">The dataset relationships, only
        /// relevant to post dataset API</param>
        /// <param name="datasources">The datasources associated with this
        /// dataset, only relevant to post dataset API</param>
        /// <param name="defaultMode">The dataset mode or type, only relevant
        /// to post dataset API. Possible values include: 'AsAzure',
        /// 'AsOnPrem', 'Push', 'Streaming', 'PushStreaming'</param>
        /// <param name="isRefreshable">Can this dataset be refreshed</param>
        /// <param name="isEffectiveIdentityRequired">Dataset requires
        /// effective identity</param>
        /// <param name="isEffectiveIdentityRolesRequired">Dataset requires
        /// roles</param>
        /// <param name="isOnPremGatewayRequired">Dataset requires on-premises
        /// data gateway</param>
        public Dataset(string name, IList<Table> tables, string id = default(string), string configuredBy = default(string), string defaultRetentionPolicy = default(string), bool? addRowsAPIEnabled = default(bool?), string webUrl = default(string), IList<Relationship> relationships = default(IList<Relationship>), IList<Datasource> datasources = default(IList<Datasource>), string defaultMode = default(string), bool? isRefreshable = default(bool?), bool? isEffectiveIdentityRequired = default(bool?), bool? isEffectiveIdentityRolesRequired = default(bool?), bool? isOnPremGatewayRequired = default(bool?))
        {
            Id = id;
            Name = name;
            ConfiguredBy = configuredBy;
            DefaultRetentionPolicy = defaultRetentionPolicy;
            AddRowsAPIEnabled = addRowsAPIEnabled;
            Tables = tables;
            WebUrl = webUrl;
            Relationships = relationships;
            Datasources = datasources;
            DefaultMode = defaultMode;
            IsRefreshable = isRefreshable;
            IsEffectiveIdentityRequired = isEffectiveIdentityRequired;
            IsEffectiveIdentityRolesRequired = isEffectiveIdentityRolesRequired;
            IsOnPremGatewayRequired = isOnPremGatewayRequired;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the dataset id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the dataset name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the dataset owner
        /// </summary>
        [JsonProperty(PropertyName = "configuredBy")]
        public string ConfiguredBy { get; set; }

        /// <summary>
        /// Gets or sets the dataset default data retention policy, only
        /// relevant to post dataset API
        /// </summary>
        [JsonProperty(PropertyName = "defaultRetentionPolicy")]
        public string DefaultRetentionPolicy { get; set; }

        /// <summary>
        /// Gets or sets whether dataset allows adding new rows
        /// </summary>
        [JsonProperty(PropertyName = "addRowsAPIEnabled")]
        public bool? AddRowsAPIEnabled { get; set; }

        /// <summary>
        /// Gets or sets the dataset tables, only relevant to post dataset API
        /// </summary>
        [JsonProperty(PropertyName = "tables")]
        public IList<Table> Tables { get; set; }

        /// <summary>
        /// Gets or sets the dataset web url
        /// </summary>
        [JsonProperty(PropertyName = "webUrl")]
        public string WebUrl { get; set; }

        /// <summary>
        /// Gets or sets the dataset relationships, only relevant to post
        /// dataset API
        /// </summary>
        [JsonProperty(PropertyName = "relationships")]
        public IList<Relationship> Relationships { get; set; }

        /// <summary>
        /// Gets or sets the datasources associated with this dataset, only
        /// relevant to post dataset API
        /// </summary>
        [JsonProperty(PropertyName = "datasources")]
        public IList<Datasource> Datasources { get; set; }

        /// <summary>
        /// Gets or sets the dataset mode or type, only relevant to post
        /// dataset API. Possible values include: 'AsAzure', 'AsOnPrem',
        /// 'Push', 'Streaming', 'PushStreaming'
        /// </summary>
        [JsonProperty(PropertyName = "defaultMode")]
        public string DefaultMode { get; set; }

        /// <summary>
        /// Gets or sets can this dataset be refreshed
        /// </summary>
        [JsonProperty(PropertyName = "IsRefreshable")]
        public bool? IsRefreshable { get; set; }

        /// <summary>
        /// Gets or sets dataset requires effective identity
        /// </summary>
        [JsonProperty(PropertyName = "IsEffectiveIdentityRequired")]
        public bool? IsEffectiveIdentityRequired { get; set; }

        /// <summary>
        /// Gets or sets dataset requires roles
        /// </summary>
        [JsonProperty(PropertyName = "IsEffectiveIdentityRolesRequired")]
        public bool? IsEffectiveIdentityRolesRequired { get; set; }

        /// <summary>
        /// Gets or sets dataset requires on-premises data gateway
        /// </summary>
        [JsonProperty(PropertyName = "IsOnPremGatewayRequired")]
        public bool? IsOnPremGatewayRequired { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Tables == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Tables");
            }
            if (Tables != null)
            {
                foreach (var element in Tables)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Relationships != null)
            {
                foreach (var element1 in Relationships)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
