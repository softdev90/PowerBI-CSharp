// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.V2.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The credential details
    /// </summary>
    public partial class CredentialDetails
    {
        /// <summary>
        /// Initializes a new instance of the CredentialDetails class.
        /// </summary>
        public CredentialDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CredentialDetails class.
        /// </summary>
        /// <param name="credentials">The credentials. this depends on the
        /// 'credentialType' value, see [Update Datasource
        /// Examples](/rest/api/power-bi/gateways/updatedatasource#examples).</param>
        /// <param name="credentialType">The credential type. Possible values
        /// include: 'Basic', 'Windows', 'Anonymous', 'OAuth2', 'Key'</param>
        /// <param name="encryptedConnection">Should Power BI allow fallback to
        /// unencrypted if the target server doesn't support encryption.
        /// Possible values include: 'Encrypted', 'NotEncrypted'</param>
        /// <param name="encryptionAlgorithm">The encryption algorithm, for
        /// cloud datasource use 'None', for On-OnPrem datasource encrypt using
        /// gateway public key with 'RSA-OAEP' algorithm. Possible values
        /// include: 'None', 'RSA-OAEP'</param>
        /// <param name="privacyLevel">The privacy level, relevant when
        /// combinig data from multiple sources. Possible values include:
        /// 'None', 'Public', 'Organizational', 'Private'</param>
        /// <param name="useCallerAADIdentity">Should the caller's AAD identity
        /// be used for OAuth2 credentials configuration</param>
        public CredentialDetails(string credentials = default(string), string credentialType = default(string), string encryptedConnection = default(string), string encryptionAlgorithm = default(string), string privacyLevel = default(string), bool? useCallerAADIdentity = default(bool?))
        {
            Credentials = credentials;
            CredentialType = credentialType;
            EncryptedConnection = encryptedConnection;
            EncryptionAlgorithm = encryptionAlgorithm;
            PrivacyLevel = privacyLevel;
            UseCallerAADIdentity = useCallerAADIdentity;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the credentials. this depends on the 'credentialType'
        /// value, see [Update Datasource
        /// Examples](/rest/api/power-bi/gateways/updatedatasource#examples).
        /// </summary>
        [JsonProperty(PropertyName = "credentials")]
        public string Credentials { get; set; }

        /// <summary>
        /// Gets or sets the credential type. Possible values include: 'Basic',
        /// 'Windows', 'Anonymous', 'OAuth2', 'Key'
        /// </summary>
        [JsonProperty(PropertyName = "credentialType")]
        public string CredentialType { get; set; }

        /// <summary>
        /// Gets or sets should Power BI allow fallback to unencrypted if the
        /// target server doesn't support encryption. Possible values include:
        /// 'Encrypted', 'NotEncrypted'
        /// </summary>
        [JsonProperty(PropertyName = "encryptedConnection")]
        public string EncryptedConnection { get; set; }

        /// <summary>
        /// Gets or sets the encryption algorithm, for cloud datasource use
        /// 'None', for On-OnPrem datasource encrypt using gateway public key
        /// with 'RSA-OAEP' algorithm. Possible values include: 'None',
        /// 'RSA-OAEP'
        /// </summary>
        [JsonProperty(PropertyName = "encryptionAlgorithm")]
        public string EncryptionAlgorithm { get; set; }

        /// <summary>
        /// Gets or sets the privacy level, relevant when combinig data from
        /// multiple sources. Possible values include: 'None', 'Public',
        /// 'Organizational', 'Private'
        /// </summary>
        [JsonProperty(PropertyName = "privacyLevel")]
        public string PrivacyLevel { get; set; }

        /// <summary>
        /// Gets or sets should the caller's AAD identity be used for OAuth2
        /// credentials configuration
        /// </summary>
        [JsonProperty(PropertyName = "useCallerAADIdentity")]
        public bool? UseCallerAADIdentity { get; set; }

    }
}
