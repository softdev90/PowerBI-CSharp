// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.V2
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Datasets.
    /// </summary>
    public static partial class DatasetsExtensions
    {
            /// <summary>
            /// Returns a list of datasets from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ODataResponseListDataset GetDatasets(this IDatasets operations)
            {
                return operations.GetDatasetsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasets from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDataset> GetDatasetsAsync(this IDatasets operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new dataset on **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataset'>
            /// Dataset defenition to create
            /// </param>
            public static object PostDataset(this IDatasets operations, Dataset dataset)
            {
                return operations.PostDatasetAsync(dataset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new dataset on **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataset'>
            /// Dataset defenition to create
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostDatasetAsync(this IDatasets operations, Dataset dataset, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostDatasetWithHttpMessagesAsync(dataset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static Dataset GetDatasetById(this IDatasets operations, string datasetKey)
            {
                return operations.GetDatasetByIdAsync(datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dataset> GetDatasetByIdAsync(this IDatasets operations, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetByIdWithHttpMessagesAsync(datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static object DeleteDatasetById(this IDatasets operations, string datasetKey)
            {
                return operations.DeleteDatasetByIdAsync(datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteDatasetByIdAsync(this IDatasets operations, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDatasetByIdWithHttpMessagesAsync(datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of tables tables within the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static ODataResponseListTable GetTables(this IDatasets operations, string datasetKey)
            {
                return operations.GetTablesAsync(datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of tables tables within the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListTable> GetTablesAsync(this IDatasets operations, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTablesWithHttpMessagesAsync(datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the metadata and schema for the specified table within the
            /// specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// Table name and columns to update existing table
            /// </param>
            public static object PutTable(this IDatasets operations, string datasetKey, string tableName, object requestMessage)
            {
                return operations.PutTableAsync(datasetKey, tableName, requestMessage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the metadata and schema for the specified table within the
            /// specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// Table name and columns to update existing table
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutTableAsync(this IDatasets operations, string datasetKey, string tableName, object requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutTableWithHttpMessagesAsync(datasetKey, tableName, requestMessage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds new data rows to the specified table within the specified dataset from
            /// **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**REST API Limitations:** See [Power BI REST API
            /// limitations](https://msdn.microsoft.com/library/dn950053.aspx).
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            public static object PostRows(this IDatasets operations, string datasetKey, string tableName, object requestMessage)
            {
                return operations.PostRowsAsync(datasetKey, tableName, requestMessage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds new data rows to the specified table within the specified dataset from
            /// **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**REST API Limitations:** See [Power BI REST API
            /// limitations](https://msdn.microsoft.com/library/dn950053.aspx).
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostRowsAsync(this IDatasets operations, string datasetKey, string tableName, object requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostRowsWithHttpMessagesAsync(datasetKey, tableName, requestMessage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes all rows from the specified table within the specified dataset from
            /// **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: this API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            public static object DeleteRows(this IDatasets operations, string datasetKey, string tableName)
            {
                return operations.DeleteRowsAsync(datasetKey, tableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes all rows from the specified table within the specified dataset from
            /// **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: this API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteRowsAsync(this IDatasets operations, string datasetKey, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRowsWithHttpMessagesAsync(datasetKey, tableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the refresh history of the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='top'>
            /// The requested number of entries in the refresh history. If not provided,
            /// the default is all available entries.
            /// </param>
            public static ODataResponseListRefresh GetRefreshHistory(this IDatasets operations, string datasetKey, int? top = default(int?))
            {
                return operations.GetRefreshHistoryAsync(datasetKey, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the refresh history of the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='top'>
            /// The requested number of entries in the refresh history. If not provided,
            /// the default is all available entries.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListRefresh> GetRefreshHistoryAsync(this IDatasets operations, string datasetKey, int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRefreshHistoryWithHttpMessagesAsync(datasetKey, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Triggers a refresh for the specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;In Shared capacities this call is limited to eight times per day
            /// (including refreshes executed via Scheduled
            /// Refresh)&lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.ReadWrite.All&lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='refreshRequest'>
            /// </param>
            public static object RefreshDataset(this IDatasets operations, string datasetKey, RefreshRequest refreshRequest = default(RefreshRequest))
            {
                return operations.RefreshDatasetAsync(datasetKey, refreshRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Triggers a refresh for the specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;In Shared capacities this call is limited to eight times per day
            /// (including refreshes executed via Scheduled
            /// Refresh)&lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.ReadWrite.All&lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='refreshRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RefreshDatasetAsync(this IDatasets operations, string datasetKey, RefreshRequest refreshRequest = default(RefreshRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RefreshDatasetWithHttpMessagesAsync(datasetKey, refreshRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the refresh schedule of the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static RefreshSchedule GetRefreshSchedule(this IDatasets operations, string datasetKey)
            {
                return operations.GetRefreshScheduleAsync(datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the refresh schedule of the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RefreshSchedule> GetRefreshScheduleAsync(this IDatasets operations, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRefreshScheduleWithHttpMessagesAsync(datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the refresh schedule for the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;This operation is only supported for the dataset
            /// owner.&lt;br/&gt;A request that disables the refresh schedule should
            /// contain no other changes.&lt;br/&gt;The days array should not be set to
            /// empty array.&lt;br/&gt;The times may be set to empty array (in which case
            /// Power BI will use a default single time per day).&lt;br/&gt;The limit on
            /// number of time slots per day depends on the type of capacity used (Premium
            /// or Shared), see [What is Microsoft Power BI
            /// Premium](https://docs.microsoft.com/en-us/power-bi/service-premium).&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='datasetModelRefreshScheduleRequest'>
            /// Update Refresh Schedule parameters, by specifying all or some of the
            /// parameters
            /// </param>
            public static object UpdateRefreshSchedule(this IDatasets operations, string datasetKey, RefreshScheduleRequest datasetModelRefreshScheduleRequest)
            {
                return operations.UpdateRefreshScheduleAsync(datasetKey, datasetModelRefreshScheduleRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the refresh schedule for the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;This operation is only supported for the dataset
            /// owner.&lt;br/&gt;A request that disables the refresh schedule should
            /// contain no other changes.&lt;br/&gt;The days array should not be set to
            /// empty array.&lt;br/&gt;The times may be set to empty array (in which case
            /// Power BI will use a default single time per day).&lt;br/&gt;The limit on
            /// number of time slots per day depends on the type of capacity used (Premium
            /// or Shared), see [What is Microsoft Power BI
            /// Premium](https://docs.microsoft.com/en-us/power-bi/service-premium).&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='datasetModelRefreshScheduleRequest'>
            /// Update Refresh Schedule parameters, by specifying all or some of the
            /// parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateRefreshScheduleAsync(this IDatasets operations, string datasetKey, RefreshScheduleRequest datasetModelRefreshScheduleRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRefreshScheduleWithHttpMessagesAsync(datasetKey, datasetModelRefreshScheduleRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the refresh schedule of a specified DirectQuery or LiveConnection
            /// dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static DirectQueryRefreshSchedule GetDirectQueryRefreshSchedule(this IDatasets operations, string datasetKey)
            {
                return operations.GetDirectQueryRefreshScheduleAsync(datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the refresh schedule of a specified DirectQuery or LiveConnection
            /// dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DirectQueryRefreshSchedule> GetDirectQueryRefreshScheduleAsync(this IDatasets operations, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDirectQueryRefreshScheduleWithHttpMessagesAsync(datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the refresh schedule for the specified DirectQuery or
            /// LiveConnection dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;This operation is only supported for the dataset
            /// owner.&lt;br/&gt;A request should contain either a combination of days and
            /// times  (setting times is optional, otherwise a default single time per day
            /// is used) or a valid frequency, but not both.&lt;br/&gt;Setting frequency
            /// will automatically truncate the days and times
            /// arrays.&lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='datasetDQRefreshScheduleRequest'>
            /// Patch DirectQuery or LiveConnection Refresh Schedule parameters, by
            /// specifying all or some of the parameters
            /// </param>
            public static object UpdateDirectQueryRefreshSchedule(this IDatasets operations, string datasetKey, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest)
            {
                return operations.UpdateDirectQueryRefreshScheduleAsync(datasetKey, datasetDQRefreshScheduleRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the refresh schedule for the specified DirectQuery or
            /// LiveConnection dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;This operation is only supported for the dataset
            /// owner.&lt;br/&gt;A request should contain either a combination of days and
            /// times  (setting times is optional, otherwise a default single time per day
            /// is used) or a valid frequency, but not both.&lt;br/&gt;Setting frequency
            /// will automatically truncate the days and times
            /// arrays.&lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='datasetDQRefreshScheduleRequest'>
            /// Patch DirectQuery or LiveConnection Refresh Schedule parameters, by
            /// specifying all or some of the parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateDirectQueryRefreshScheduleAsync(this IDatasets operations, string datasetKey, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDirectQueryRefreshScheduleWithHttpMessagesAsync(datasetKey, datasetDQRefreshScheduleRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of parameters for the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;h2&gt;Restrictions&lt;/h2&gt;Datasets
            /// with SQL, Oracle, Teradata &amp; SapHana Direct Query connections are not
            /// supported.&lt;br/&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static ODataResponseListDatasetParameter GetParameters(this IDatasets operations, string datasetKey)
            {
                return operations.GetParametersAsync(datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of parameters for the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;h2&gt;Restrictions&lt;/h2&gt;Datasets
            /// with SQL, Oracle, Teradata &amp; SapHana Direct Query connections are not
            /// supported.&lt;br/&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDatasetParameter> GetParametersAsync(this IDatasets operations, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetParametersWithHttpMessagesAsync(datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the parameters values for the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Important**: The dataset must be refreshed for new parameters
            /// values to be applied. Wait 30 minutes for the update parameters operation
            /// to complete before refreshing.&lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;All parameters must
            /// exist in the dataset. Names are case-sensitive.
            /// &lt;/li&gt;&lt;li&gt;Datasets with SQL, Oracle, Teradata &amp; SapHana
            /// Direct Query connections are not supported. &lt;/li&gt;&lt;li&gt;Datasets
            /// with Analysis Services Live connections are not supported.
            /// &lt;/li&gt;&lt;li&gt; Maximum of a 100 parameters in request is allowed.
            /// &lt;/li&gt;&lt;li&gt; Values should be of expected Type.
            /// &lt;/li&gt;&lt;li&gt; Cannot pass empty value to an IsRequired parameter.
            /// &lt;/li&gt;&lt;li&gt; List cannot be empty or include multiple occurrences
            /// of same parameter. &lt;/li&gt;&lt;li&gt; Parameters of types 'Any' or
            /// 'Binary' cannot be set. &lt;/li&gt;&lt;/ul&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='updateDatasetParametersRequest'>
            /// </param>
            public static object UpdateParameters(this IDatasets operations, string datasetKey, UpdateDatasetParametersRequest updateDatasetParametersRequest)
            {
                return operations.UpdateParametersAsync(datasetKey, updateDatasetParametersRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the parameters values for the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Important**: The dataset must be refreshed for new parameters
            /// values to be applied. Wait 30 minutes for the update parameters operation
            /// to complete before refreshing.&lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;All parameters must
            /// exist in the dataset. Names are case-sensitive.
            /// &lt;/li&gt;&lt;li&gt;Datasets with SQL, Oracle, Teradata &amp; SapHana
            /// Direct Query connections are not supported. &lt;/li&gt;&lt;li&gt;Datasets
            /// with Analysis Services Live connections are not supported.
            /// &lt;/li&gt;&lt;li&gt; Maximum of a 100 parameters in request is allowed.
            /// &lt;/li&gt;&lt;li&gt; Values should be of expected Type.
            /// &lt;/li&gt;&lt;li&gt; Cannot pass empty value to an IsRequired parameter.
            /// &lt;/li&gt;&lt;li&gt; List cannot be empty or include multiple occurrences
            /// of same parameter. &lt;/li&gt;&lt;li&gt; Parameters of types 'Any' or
            /// 'Binary' cannot be set. &lt;/li&gt;&lt;/ul&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='updateDatasetParametersRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateParametersAsync(this IDatasets operations, string datasetKey, UpdateDatasetParametersRequest updateDatasetParametersRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateParametersWithHttpMessagesAsync(datasetKey, updateDatasetParametersRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of datasources for the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static ODataResponseListDatasource GetDatasources(this IDatasets operations, string datasetKey)
            {
                return operations.GetDatasourcesAsync(datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasources for the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDatasource> GetDatasourcesAsync(this IDatasets operations, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasourcesWithHttpMessagesAsync(datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the datasources of the specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Important**:&lt;ul&gt;&lt;li&gt;The original datasource and
            /// the new datasource must have the exact same schema.&lt;/li&gt;&lt;li&gt;For
            /// cached models, the dataset must be refreshed to get the data from the new
            /// data sources. Wait 30 minutes for the update datasources operation to
            /// complete before
            /// refreshing.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Update datasources
            /// supports SQL Server, Azure SQL Server, Analysis Services, Azure Analysis
            /// Services, OData Feed, and SharePoint datasources. For other datasource
            /// types, use [Update
            /// Parameters](/rest/api/power-bi/datasets/updateparameters)
            /// &lt;/li&gt;&lt;li&gt;Changing datasource type is not supported.
            /// &lt;/li&gt;&lt;li&gt;Datasources that contain parameters on the connection
            /// string are not supported. &lt;/li&gt;&lt;li&gt;Datasources which are part
            /// of Merged or Joined tables are not supported. &lt;/li&gt;&lt;/ul&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='updateDatasourcesRequest'>
            /// </param>
            public static object UpdateDatasources(this IDatasets operations, string datasetKey, UpdateDatasourcesRequest updateDatasourcesRequest)
            {
                return operations.UpdateDatasourcesAsync(datasetKey, updateDatasourcesRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the datasources of the specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Important**:&lt;ul&gt;&lt;li&gt;The original datasource and
            /// the new datasource must have the exact same schema.&lt;/li&gt;&lt;li&gt;For
            /// cached models, the dataset must be refreshed to get the data from the new
            /// data sources. Wait 30 minutes for the update datasources operation to
            /// complete before
            /// refreshing.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Update datasources
            /// supports SQL Server, Azure SQL Server, Analysis Services, Azure Analysis
            /// Services, OData Feed, and SharePoint datasources. For other datasource
            /// types, use [Update
            /// Parameters](/rest/api/power-bi/datasets/updateparameters)
            /// &lt;/li&gt;&lt;li&gt;Changing datasource type is not supported.
            /// &lt;/li&gt;&lt;li&gt;Datasources that contain parameters on the connection
            /// string are not supported. &lt;/li&gt;&lt;li&gt;Datasources which are part
            /// of Merged or Joined tables are not supported. &lt;/li&gt;&lt;/ul&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='updateDatasourcesRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateDatasourcesAsync(this IDatasets operations, string datasetKey, UpdateDatasourcesRequest updateDatasourcesRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDatasourcesWithHttpMessagesAsync(datasetKey, updateDatasourcesRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates all connections for the specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**:&lt;ul&gt;&lt;li&gt;To update connection details for
            /// SQL, AS, OData Feed, and SharePoint, use [Update
            /// Datasources](/rest/api/power-bi/datasets/updatedatasources). For other
            /// datasource types, use [Update
            /// Parameters](/rest/api/power-bi/datasets/updateparameters).&lt;/li&gt;&lt;li&gt;This
            /// API only supports SQL DirectQuery
            /// datasets.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='parameters'>
            /// The body
            /// </param>
            public static object SetAllDatasetConnections(this IDatasets operations, string datasetKey, ConnectionDetails parameters)
            {
                return operations.SetAllDatasetConnectionsAsync(datasetKey, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates all connections for the specified dataset from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**:&lt;ul&gt;&lt;li&gt;To update connection details for
            /// SQL, AS, OData Feed, and SharePoint, use [Update
            /// Datasources](/rest/api/power-bi/datasets/updatedatasources). For other
            /// datasource types, use [Update
            /// Parameters](/rest/api/power-bi/datasets/updateparameters).&lt;/li&gt;&lt;li&gt;This
            /// API only supports SQL DirectQuery
            /// datasets.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='parameters'>
            /// The body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetAllDatasetConnectionsAsync(this IDatasets operations, string datasetKey, ConnectionDetails parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetAllDatasetConnectionsWithHttpMessagesAsync(datasetKey, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Binds the specified dataset from **"My Workspace"** to the specified
            /// gateway. This only supports the On-Premises Data Gateway.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='bindToGatewayRequest'>
            /// The bind to gateway request
            /// </param>
            public static object BindToGateway(this IDatasets operations, string datasetKey, BindToGatewayRequest bindToGatewayRequest)
            {
                return operations.BindToGatewayAsync(datasetKey, bindToGatewayRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Binds the specified dataset from **"My Workspace"** to the specified
            /// gateway. This only supports the On-Premises Data Gateway.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='bindToGatewayRequest'>
            /// The bind to gateway request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BindToGatewayAsync(this IDatasets operations, string datasetKey, BindToGatewayRequest bindToGatewayRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BindToGatewayWithHttpMessagesAsync(datasetKey, bindToGatewayRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of gateway datasources for the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: Use the new [Dataset - Get
            /// Datasources](/rest/api/power-bi/datasets/getdatasources) API
            /// instead.&lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static ODataResponseListGatewayDatasource GetGatewayDatasources(this IDatasets operations, string datasetKey)
            {
                return operations.GetGatewayDatasourcesAsync(datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of gateway datasources for the specified dataset from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: Use the new [Dataset - Get
            /// Datasources](/rest/api/power-bi/datasets/getdatasources) API
            /// instead.&lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListGatewayDatasource> GetGatewayDatasourcesAsync(this IDatasets operations, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGatewayDatasourcesWithHttpMessagesAsync(datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of gateways which the specified dataset from **"My
            /// Workspace"** can be bound to.
            /// </summary>
            /// <remarks>
            /// This API is relevant only for datasets that have at least one on-premises
            /// connection. &lt;br/&gt;For datasets with cloud-only connections, it will
            /// return an empty list. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static ODataResponseListGateway DiscoverGateways(this IDatasets operations, string datasetKey)
            {
                return operations.DiscoverGatewaysAsync(datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of gateways which the specified dataset from **"My
            /// Workspace"** can be bound to.
            /// </summary>
            /// <remarks>
            /// This API is relevant only for datasets that have at least one on-premises
            /// connection. &lt;br/&gt;For datasets with cloud-only connections, it will
            /// return an empty list. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListGateway> DiscoverGatewaysAsync(this IDatasets operations, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DiscoverGatewaysWithHttpMessagesAsync(datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of datasets from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            public static ODataResponseListDataset GetDatasetsInGroup(this IDatasets operations, string groupId)
            {
                return operations.GetDatasetsInGroupAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasets from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDataset> GetDatasetsInGroupAsync(this IDatasets operations, string groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetsInGroupWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new dataset in the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='dataset'>
            /// Create dataset parameters
            /// </param>
            public static object PostDatasetInGroup(this IDatasets operations, string groupId, Dataset dataset)
            {
                return operations.PostDatasetInGroupAsync(groupId, dataset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new dataset in the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='dataset'>
            /// Create dataset parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostDatasetInGroupAsync(this IDatasets operations, string groupId, Dataset dataset, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostDatasetInGroupWithHttpMessagesAsync(groupId, dataset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static Dataset GetDatasetByIdInGroup(this IDatasets operations, string groupId, string datasetKey)
            {
                return operations.GetDatasetByIdInGroupAsync(groupId, datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dataset> GetDatasetByIdInGroupAsync(this IDatasets operations, string groupId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetByIdInGroupWithHttpMessagesAsync(groupId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static object DeleteDatasetByIdInGroup(this IDatasets operations, string groupId, string datasetKey)
            {
                return operations.DeleteDatasetByIdInGroupAsync(groupId, datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteDatasetByIdInGroupAsync(this IDatasets operations, string groupId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDatasetByIdInGroupWithHttpMessagesAsync(groupId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of tables within the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static ODataResponseListTable GetTablesInGroup(this IDatasets operations, string groupId, string datasetKey)
            {
                return operations.GetTablesInGroupAsync(groupId, datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of tables within the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListTable> GetTablesInGroupAsync(this IDatasets operations, string groupId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTablesInGroupWithHttpMessagesAsync(groupId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the metadata and schema for the specified table, within the
            /// specified dataset, from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            public static object PutTableInGroup(this IDatasets operations, string groupId, string datasetKey, string tableName, object requestMessage)
            {
                return operations.PutTableInGroupAsync(groupId, datasetKey, tableName, requestMessage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the metadata and schema for the specified table, within the
            /// specified dataset, from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutTableInGroupAsync(this IDatasets operations, string groupId, string datasetKey, string tableName, object requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutTableInGroupWithHttpMessagesAsync(groupId, datasetKey, tableName, requestMessage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds new data rows to the specified table, within the specified dataset,
            /// from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**REST API Limitations:** See [Power BI REST API
            /// limitations](https://msdn.microsoft.com/library/dn950053.aspx).
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            public static object PostRowsInGroup(this IDatasets operations, string groupId, string datasetKey, string tableName, object requestMessage)
            {
                return operations.PostRowsInGroupAsync(groupId, datasetKey, tableName, requestMessage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds new data rows to the specified table, within the specified dataset,
            /// from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**REST API Limitations:** See [Power BI REST API
            /// limitations](https://msdn.microsoft.com/library/dn950053.aspx).
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostRowsInGroupAsync(this IDatasets operations, string groupId, string datasetKey, string tableName, object requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostRowsInGroupWithHttpMessagesAsync(groupId, datasetKey, tableName, requestMessage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes all rows from the specified table, within the specified dataset,
            /// from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            public static object DeleteRowsInGroup(this IDatasets operations, string groupId, string datasetKey, string tableName)
            {
                return operations.DeleteRowsInGroupAsync(groupId, datasetKey, tableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes all rows from the specified table, within the specified dataset,
            /// from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: This API supports only Push datasets.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteRowsInGroupAsync(this IDatasets operations, string groupId, string datasetKey, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRowsInGroupWithHttpMessagesAsync(groupId, datasetKey, tableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the refresh history of the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='top'>
            /// The requested number of entries in the refresh history. If not provided,
            /// the default is all available entries.
            /// </param>
            public static ODataResponseListRefresh GetRefreshHistoryInGroup(this IDatasets operations, string groupId, string datasetKey, int? top = default(int?))
            {
                return operations.GetRefreshHistoryInGroupAsync(groupId, datasetKey, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the refresh history of the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='top'>
            /// The requested number of entries in the refresh history. If not provided,
            /// the default is all available entries.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListRefresh> GetRefreshHistoryInGroupAsync(this IDatasets operations, string groupId, string datasetKey, int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRefreshHistoryInGroupWithHttpMessagesAsync(groupId, datasetKey, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Triggers a refresh for the specified dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;In Shared capacities this call is limited to eight times per day
            /// (including refreshes executed via Scheduled
            /// Refresh)&lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.ReadWrite.All&lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='refreshRequest'>
            /// </param>
            public static object RefreshDatasetInGroup(this IDatasets operations, string groupId, string datasetKey, RefreshRequest refreshRequest = default(RefreshRequest))
            {
                return operations.RefreshDatasetInGroupAsync(groupId, datasetKey, refreshRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Triggers a refresh for the specified dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;In Shared capacities this call is limited to eight times per day
            /// (including refreshes executed via Scheduled
            /// Refresh)&lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.ReadWrite.All&lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='refreshRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RefreshDatasetInGroupAsync(this IDatasets operations, string groupId, string datasetKey, RefreshRequest refreshRequest = default(RefreshRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RefreshDatasetInGroupWithHttpMessagesAsync(groupId, datasetKey, refreshRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the refresh schedule of the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static RefreshSchedule GetRefreshScheduleInGroup(this IDatasets operations, string groupId, string datasetKey)
            {
                return operations.GetRefreshScheduleInGroupAsync(groupId, datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the refresh schedule of the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RefreshSchedule> GetRefreshScheduleInGroupAsync(this IDatasets operations, string groupId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRefreshScheduleInGroupWithHttpMessagesAsync(groupId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the refresh schedule for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;This operation is only supported for the dataset
            /// owner.&lt;br/&gt;A request that disables the refresh schedule should
            /// contain no other changes.&lt;br/&gt;The days array should not be set to
            /// empty array.&lt;br/&gt;The times may be set to empty array (in which case
            /// Power BI will use a default single time per day).&lt;br/&gt;The limit on
            /// number of time slots per day depends on the type of capacity used (Premium
            /// or Shared), see [What is Microsoft Power BI
            /// Premium](https://docs.microsoft.com/en-us/power-bi/service-premium).&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='datasetModelRefreshScheduleRequest'>
            /// Update Refresh Schedule parameters, by specifying all or some of the
            /// parameters
            /// </param>
            public static object UpdateRefreshScheduleInGroup(this IDatasets operations, string groupId, string datasetKey, RefreshScheduleRequest datasetModelRefreshScheduleRequest)
            {
                return operations.UpdateRefreshScheduleInGroupAsync(groupId, datasetKey, datasetModelRefreshScheduleRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the refresh schedule for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;This operation is only supported for the dataset
            /// owner.&lt;br/&gt;A request that disables the refresh schedule should
            /// contain no other changes.&lt;br/&gt;The days array should not be set to
            /// empty array.&lt;br/&gt;The times may be set to empty array (in which case
            /// Power BI will use a default single time per day).&lt;br/&gt;The limit on
            /// number of time slots per day depends on the type of capacity used (Premium
            /// or Shared), see [What is Microsoft Power BI
            /// Premium](https://docs.microsoft.com/en-us/power-bi/service-premium).&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='datasetModelRefreshScheduleRequest'>
            /// Update Refresh Schedule parameters, by specifying all or some of the
            /// parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateRefreshScheduleInGroupAsync(this IDatasets operations, string groupId, string datasetKey, RefreshScheduleRequest datasetModelRefreshScheduleRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRefreshScheduleInGroupWithHttpMessagesAsync(groupId, datasetKey, datasetModelRefreshScheduleRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the refresh schedule of a specified DirectQuery or LiveConnection
            /// dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static DirectQueryRefreshSchedule GetDirectQueryRefreshScheduleInGroup(this IDatasets operations, string groupId, string datasetKey)
            {
                return operations.GetDirectQueryRefreshScheduleInGroupAsync(groupId, datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the refresh schedule of a specified DirectQuery or LiveConnection
            /// dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DirectQueryRefreshSchedule> GetDirectQueryRefreshScheduleInGroupAsync(this IDatasets operations, string groupId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDirectQueryRefreshScheduleInGroupWithHttpMessagesAsync(groupId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the refresh schedule for the specified DirectQuery or
            /// LiveConnection dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;This operation is only supported for the dataset
            /// owner.&lt;br/&gt;A request should contain either a combination of days and
            /// times  (setting times is optional, otherwise a default single time per day
            /// is used) or a valid frequency, but not both.&lt;br/&gt;Setting frequency
            /// will automatically truncate the days and times
            /// arrays.&lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='datasetDQRefreshScheduleRequest'>
            /// Patch DirectQuery or LiveConnection Refresh Schedule parameters, by
            /// specifying all or some of the parameters
            /// </param>
            public static object UpdateDirectQueryRefreshScheduleInGroup(this IDatasets operations, string groupId, string datasetKey, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest)
            {
                return operations.UpdateDirectQueryRefreshScheduleInGroupAsync(groupId, datasetKey, datasetDQRefreshScheduleRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the refresh schedule for the specified DirectQuery or
            /// LiveConnection dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;This operation is only supported for the dataset
            /// owner.&lt;br/&gt;A request should contain either a combination of days and
            /// times  (setting times is optional, otherwise a default single time per day
            /// is used) or a valid frequency, but not both.&lt;br/&gt;Setting frequency
            /// will automatically truncate the days and times
            /// arrays.&lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='datasetDQRefreshScheduleRequest'>
            /// Patch DirectQuery or LiveConnection Refresh Schedule parameters, by
            /// specifying all or some of the parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateDirectQueryRefreshScheduleInGroupAsync(this IDatasets operations, string groupId, string datasetKey, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDirectQueryRefreshScheduleInGroupWithHttpMessagesAsync(groupId, datasetKey, datasetDQRefreshScheduleRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of parameters for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;h2&gt;Restrictions&lt;/h2&gt;Datasets
            /// with SQL, Oracle, Teradata &amp; SapHana Direct Query connections are not
            /// supported.&lt;br/&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            public static ODataResponseListDatasetParameter GetParametersInGroup(this IDatasets operations, string groupId, string datasetKey)
            {
                return operations.GetParametersInGroupAsync(groupId, datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of parameters for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).&lt;h2&gt;Restrictions&lt;/h2&gt;Datasets
            /// with SQL, Oracle, Teradata &amp; SapHana Direct Query connections are not
            /// supported.&lt;br/&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDatasetParameter> GetParametersInGroupAsync(this IDatasets operations, string groupId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetParametersInGroupWithHttpMessagesAsync(groupId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the parameters values for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Important**: The dataset must be refreshed for the new
            /// parameter values to be applied. Wait 30 minutes for the update parameters
            /// operation to complete before refreshing.&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;All parameters must
            /// exist in the dataset. Names are case-sensitive.
            /// &lt;/li&gt;&lt;li&gt;Datasets with SQL, Oracle, Teradata &amp; SapHana
            /// Direct Query connections are not supported. &lt;/li&gt;&lt;li&gt;Datasets
            /// with Analysis Services Live connections are not supported.
            /// &lt;/li&gt;&lt;li&gt; Maximum of 100 parameters in request is allowed.
            /// &lt;/li&gt;&lt;li&gt; Values should be of expected type.
            /// &lt;/li&gt;&lt;li&gt; An empty value is not permitted for the IsRequired
            /// parameter. &lt;/li&gt;&lt;li&gt; List cannot be empty or include multiple
            /// occurrences of same parameter. &lt;/li&gt;&lt;li&gt; Parameters of types
            /// 'Any' or 'Binary' cannot be set. &lt;/li&gt;&lt;/ul&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='updateDatasetParametersRequest'>
            /// </param>
            public static object UpdateParametersInGroup(this IDatasets operations, string groupId, string datasetKey, UpdateDatasetParametersRequest updateDatasetParametersRequest)
            {
                return operations.UpdateParametersInGroupAsync(groupId, datasetKey, updateDatasetParametersRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the parameters values for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Important**: The dataset must be refreshed for the new
            /// parameter values to be applied. Wait 30 minutes for the update parameters
            /// operation to complete before refreshing.&lt;br/&gt;&lt;br/&gt;**Required
            /// scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;All parameters must
            /// exist in the dataset. Names are case-sensitive.
            /// &lt;/li&gt;&lt;li&gt;Datasets with SQL, Oracle, Teradata &amp; SapHana
            /// Direct Query connections are not supported. &lt;/li&gt;&lt;li&gt;Datasets
            /// with Analysis Services Live connections are not supported.
            /// &lt;/li&gt;&lt;li&gt; Maximum of 100 parameters in request is allowed.
            /// &lt;/li&gt;&lt;li&gt; Values should be of expected type.
            /// &lt;/li&gt;&lt;li&gt; An empty value is not permitted for the IsRequired
            /// parameter. &lt;/li&gt;&lt;li&gt; List cannot be empty or include multiple
            /// occurrences of same parameter. &lt;/li&gt;&lt;li&gt; Parameters of types
            /// 'Any' or 'Binary' cannot be set. &lt;/li&gt;&lt;/ul&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='updateDatasetParametersRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateParametersInGroupAsync(this IDatasets operations, string groupId, string datasetKey, UpdateDatasetParametersRequest updateDatasetParametersRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateParametersInGroupWithHttpMessagesAsync(groupId, datasetKey, updateDatasetParametersRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of datasources for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            public static ODataResponseListDatasource GetDatasourcesInGroup(this IDatasets operations, string groupId, string datasetKey)
            {
                return operations.GetDatasourcesInGroupAsync(groupId, datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasources for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDatasource> GetDatasourcesInGroupAsync(this IDatasets operations, string groupId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasourcesInGroupWithHttpMessagesAsync(groupId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the datasources of the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Important**:&lt;ul&gt;&lt;li&gt;The original datasource and
            /// the new datasource must have the exact same schema.&lt;/li&gt;&lt;li&gt;For
            /// cached models, the dataset must be refreshed to get the data from the new
            /// datasources. Wait 30 minutes for the update datasources operation to
            /// complete before
            /// refreshing.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Update datasources
            /// supports SQL Server, Azure SQL Server, Analysis Services, Azure Analysis
            /// Services, OData Feed, and SharePoint datasources. For other datasource
            /// types, use [Update Parameters In
            /// Group](/rest/api/power-bi/datasets/updateparametersingroup).
            /// &lt;/li&gt;&lt;li&gt;Changing datasource type is not supported.
            /// &lt;/li&gt;&lt;li&gt;Datasources that contain parameters on the connection
            /// string are not supported. &lt;/li&gt;&lt;li&gt;Datasources which are part
            /// of Merged or Joined tables are not supported. &lt;/li&gt;&lt;/ul&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='updateDatasourcesRequest'>
            /// </param>
            public static object UpdateDatasourcesInGroup(this IDatasets operations, string groupId, string datasetKey, UpdateDatasourcesRequest updateDatasourcesRequest)
            {
                return operations.UpdateDatasourcesInGroupAsync(groupId, datasetKey, updateDatasourcesRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the datasources of the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Important**:&lt;ul&gt;&lt;li&gt;The original datasource and
            /// the new datasource must have the exact same schema.&lt;/li&gt;&lt;li&gt;For
            /// cached models, the dataset must be refreshed to get the data from the new
            /// datasources. Wait 30 minutes for the update datasources operation to
            /// complete before
            /// refreshing.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.ReadWrite.All &lt;br/&gt;To set the permissions scope, see
            /// [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// &lt;h2&gt;Restrictions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Update datasources
            /// supports SQL Server, Azure SQL Server, Analysis Services, Azure Analysis
            /// Services, OData Feed, and SharePoint datasources. For other datasource
            /// types, use [Update Parameters In
            /// Group](/rest/api/power-bi/datasets/updateparametersingroup).
            /// &lt;/li&gt;&lt;li&gt;Changing datasource type is not supported.
            /// &lt;/li&gt;&lt;li&gt;Datasources that contain parameters on the connection
            /// string are not supported. &lt;/li&gt;&lt;li&gt;Datasources which are part
            /// of Merged or Joined tables are not supported. &lt;/li&gt;&lt;/ul&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='updateDatasourcesRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateDatasourcesInGroupAsync(this IDatasets operations, string groupId, string datasetKey, UpdateDatasourcesRequest updateDatasourcesRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDatasourcesInGroupWithHttpMessagesAsync(groupId, datasetKey, updateDatasourcesRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates all connections for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**:&lt;ul&gt;&lt;li&gt;To update connection details for
            /// SQL, AS, OData Feed, and SharePoint, use [Update Datasources In
            /// Group](/rest/api/power-bi/datasets/updatedatasourcesingroup). For other
            /// datasource types, use [Update Parameters In
            /// Group](/rest/api/power-bi/datasets/updateparametersingroup).&lt;/li&gt;&lt;li&gt;This
            /// API only supports SQL DirectQuery datasets.&lt;/li&gt;&lt;/ul&gt;
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='parameters'>
            /// The body
            /// </param>
            public static object SetAllDatasetConnectionsInGroup(this IDatasets operations, string groupId, string datasetKey, ConnectionDetails parameters)
            {
                return operations.SetAllDatasetConnectionsInGroupAsync(groupId, datasetKey, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates all connections for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**:&lt;ul&gt;&lt;li&gt;To update connection details for
            /// SQL, AS, OData Feed, and SharePoint, use [Update Datasources In
            /// Group](/rest/api/power-bi/datasets/updatedatasourcesingroup). For other
            /// datasource types, use [Update Parameters In
            /// Group](/rest/api/power-bi/datasets/updateparametersingroup).&lt;/li&gt;&lt;li&gt;This
            /// API only supports SQL DirectQuery datasets.&lt;/li&gt;&lt;/ul&gt;
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='parameters'>
            /// The body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetAllDatasetConnectionsInGroupAsync(this IDatasets operations, string groupId, string datasetKey, ConnectionDetails parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetAllDatasetConnectionsInGroupWithHttpMessagesAsync(groupId, datasetKey, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Binds the specified dataset from the specified workspace to the specified
            /// gateway. Only supported for the On-Premises Data Gateway.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='bindToGatewayRequest'>
            /// The bind to gateway request
            /// </param>
            public static object BindToGatewayInGroup(this IDatasets operations, string groupId, string datasetKey, BindToGatewayRequest bindToGatewayRequest)
            {
                return operations.BindToGatewayInGroupAsync(groupId, datasetKey, bindToGatewayRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Binds the specified dataset from the specified workspace to the specified
            /// gateway. Only supported for the On-Premises Data Gateway.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='bindToGatewayRequest'>
            /// The bind to gateway request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BindToGatewayInGroupAsync(this IDatasets operations, string groupId, string datasetKey, BindToGatewayRequest bindToGatewayRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BindToGatewayInGroupWithHttpMessagesAsync(groupId, datasetKey, bindToGatewayRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of gateway datasources for the specified dataset from the
            /// specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: Use the [Dataset - Get Datasources In
            /// Group](/rest/api/power-bi/datasets/getdatasourcesingroup) API
            /// instead.&lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static ODataResponseListGatewayDatasource GetGatewayDatasourcesInGroup(this IDatasets operations, string groupId, string datasetKey)
            {
                return operations.GetGatewayDatasourcesInGroupAsync(groupId, datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of gateway datasources for the specified dataset from the
            /// specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Note**: Use the [Dataset - Get Datasources In
            /// Group](/rest/api/power-bi/datasets/getdatasourcesingroup) API
            /// instead.&lt;br/&gt;&lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListGatewayDatasource> GetGatewayDatasourcesInGroupAsync(this IDatasets operations, string groupId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGatewayDatasourcesInGroupWithHttpMessagesAsync(groupId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of gateways that the specified dataset from the specified
            /// workspace can be bound to.
            /// </summary>
            /// <remarks>
            /// This API is relevant only for datasets that have at least one on-premises
            /// connection. &lt;br/&gt;For datasets with cloud-only connections, it will
            /// return an empty list. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static ODataResponseListGateway DiscoverGatewaysInGroup(this IDatasets operations, string groupId, string datasetKey)
            {
                return operations.DiscoverGatewaysInGroupAsync(groupId, datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of gateways that the specified dataset from the specified
            /// workspace can be bound to.
            /// </summary>
            /// <remarks>
            /// This API is relevant only for datasets that have at least one on-premises
            /// connection. &lt;br/&gt;For datasets with cloud-only connections, it will
            /// return an empty list. &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Dataset.Read.All &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListGateway> DiscoverGatewaysInGroupAsync(this IDatasets operations, string groupId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DiscoverGatewaysInGroupWithHttpMessagesAsync(groupId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Transfers ownership over the specified dataset to the current authorized
            /// user.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static object TakeOverInGroup(this IDatasets operations, string groupId, string datasetKey)
            {
                return operations.TakeOverInGroupAsync(groupId, datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Transfers ownership over the specified dataset to the current authorized
            /// user.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> TakeOverInGroupAsync(this IDatasets operations, string groupId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TakeOverInGroupWithHttpMessagesAsync(groupId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Generates an embed token to [Embed
            /// Q&amp;A](https://docs.microsoft.com/power-bi/developer/qanda) based on the
            /// specified dataset from the specified workspace.&lt;br/&gt;This API is
            /// relevant only to ['App owns data' embed
            /// scenario](https://docs.microsoft.com/power-bi/developer/embed-sample-for-customers).
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            public static EmbedToken GenerateTokenInGroup(this IDatasets operations, string groupId, string datasetKey, GenerateTokenRequest requestParameters)
            {
                return operations.GenerateTokenInGroupAsync(groupId, datasetKey, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generates an embed token to [Embed
            /// Q&amp;A](https://docs.microsoft.com/power-bi/developer/qanda) based on the
            /// specified dataset from the specified workspace.&lt;br/&gt;This API is
            /// relevant only to ['App owns data' embed
            /// scenario](https://docs.microsoft.com/power-bi/developer/embed-sample-for-customers).
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbedToken> GenerateTokenInGroupAsync(this IDatasets operations, string groupId, string datasetKey, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateTokenInGroupWithHttpMessagesAsync(groupId, datasetKey, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of datasets for the organization.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Tenant.Read.All or
            /// Tenant.ReadWrite.All&lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            public static ODataResponseListDataset GetDatasetsAsAdmin(this IDatasets operations, string filter = default(string), int? top = default(int?), int? skip = default(int?))
            {
                return operations.GetDatasetsAsAdminAsync(filter, top, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasets for the organization.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Tenant.Read.All or
            /// Tenant.ReadWrite.All&lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDataset> GetDatasetsAsAdminAsync(this IDatasets operations, string filter = default(string), int? top = default(int?), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetsAsAdminWithHttpMessagesAsync(filter, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of datasources for the specified dataset.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Tenant.Read.All&lt;br/&gt;Application only and delegated permissions are
            /// supported.&lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            public static ODataResponseListDatasource GetDatasourcesAsAdmin(this IDatasets operations, string datasetKey)
            {
                return operations.GetDatasourcesAsAdminAsync(datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasources for the specified dataset.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**:
            /// Tenant.Read.All&lt;br/&gt;Application only and delegated permissions are
            /// supported.&lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDatasource> GetDatasourcesAsAdminAsync(this IDatasets operations, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasourcesAsAdminWithHttpMessagesAsync(datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of datasets from the specified workspace.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Tenant.Read.All or
            /// Tenant.ReadWrite.All&lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            public static ODataResponseListDataset GetDatasetsInGroupAsAdmin(this IDatasets operations, string groupId, string filter = default(string), int? top = default(int?), int? skip = default(int?))
            {
                return operations.GetDatasetsInGroupAsAdminAsync(groupId, filter, top, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasets from the specified workspace.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Tenant.Read.All or
            /// Tenant.ReadWrite.All&lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDataset> GetDatasetsInGroupAsAdminAsync(this IDatasets operations, string groupId, string filter = default(string), int? top = default(int?), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetsInGroupAsAdminWithHttpMessagesAsync(groupId, filter, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
