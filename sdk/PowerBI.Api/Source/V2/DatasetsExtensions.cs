// Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.PowerBI.Api.V2
{
    using Microsoft.PowerBI;
    using Microsoft.PowerBI.Api;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Datasets.
    /// </summary>
    public static partial class DatasetsExtensions
    {
            /// <summary>
            /// Returns the datasets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ODataResponseListDataset GetDatasets(this IDatasets operations)
            {
                return operations.GetDatasetsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the datasets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDataset> GetDatasetsAsync(this IDatasets operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Post a new entity to datasets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataset'>
            /// Create dataset parameters
            /// </param>
            public static object PostDataset(this IDatasets operations, Dataset dataset)
            {
                return operations.PostDatasetAsync(dataset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post a new entity to datasets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataset'>
            /// Create dataset parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostDatasetAsync(this IDatasets operations, Dataset dataset, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostDatasetWithHttpMessagesAsync(dataset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Posts new data rows into the specified table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            public static object PostRows(this IDatasets operations, string datasetKey, string tableName, object requestMessage)
            {
                return operations.PostRowsAsync(datasetKey, tableName, requestMessage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Posts new data rows into the specified table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostRowsAsync(this IDatasets operations, string datasetKey, string tableName, object requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostRowsWithHttpMessagesAsync(datasetKey, tableName, requestMessage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes all rows from the specified table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            public static object DeleteRows(this IDatasets operations, string datasetKey, string tableName)
            {
                return operations.DeleteRowsAsync(datasetKey, tableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes all rows from the specified table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteRowsAsync(this IDatasets operations, string datasetKey, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRowsWithHttpMessagesAsync(datasetKey, tableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all tables within the specified dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static ODataResponseListTable GetTables(this IDatasets operations, string datasetKey)
            {
                return operations.GetTablesAsync(datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all tables within the specified dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListTable> GetTablesAsync(this IDatasets operations, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTablesWithHttpMessagesAsync(datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a schema and metadata for the specified table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            public static object PutTable(this IDatasets operations, string datasetKey, string tableName, object requestMessage)
            {
                return operations.PutTableAsync(datasetKey, tableName, requestMessage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a schema and metadata for the specified table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutTableAsync(this IDatasets operations, string datasetKey, string tableName, object requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutTableWithHttpMessagesAsync(datasetKey, tableName, requestMessage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the dataset metadata for the specifeid dataset id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static Dataset GetDatasetById(this IDatasets operations, string datasetKey)
            {
                return operations.GetDatasetByIdAsync(datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the dataset metadata for the specifeid dataset id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dataset> GetDatasetByIdAsync(this IDatasets operations, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetByIdWithHttpMessagesAsync(datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the dataset with the specified id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static object DeleteDatasetById(this IDatasets operations, string datasetKey)
            {
                return operations.DeleteDatasetByIdAsync(datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the dataset with the specified id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteDatasetByIdAsync(this IDatasets operations, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDatasetByIdWithHttpMessagesAsync(datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the dataset refresh history
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='top'>
            /// The requested number of entries in the refresh history, if not supported
            /// the default is all available entries
            /// </param>
            public static ODataResponseListRefresh GetRefreshHistory(this IDatasets operations, string datasetKey, int? top = default(int?))
            {
                return operations.GetRefreshHistoryAsync(datasetKey, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the dataset refresh history
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='top'>
            /// The requested number of entries in the refresh history, if not supported
            /// the default is all available entries
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListRefresh> GetRefreshHistoryAsync(this IDatasets operations, string datasetKey, int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRefreshHistoryWithHttpMessagesAsync(datasetKey, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start a dataset refresh
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static object RefreshDataset(this IDatasets operations, string datasetKey)
            {
                return operations.RefreshDatasetAsync(datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start a dataset refresh
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RefreshDatasetAsync(this IDatasets operations, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RefreshDatasetWithHttpMessagesAsync(datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of bound gateway datasources for the specified dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static ODataResponseListGatewayDatasource GetGatewayDatasources(this IDatasets operations, string datasetKey)
            {
                return operations.GetGatewayDatasourcesAsync(datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of bound gateway datasources for the specified dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListGatewayDatasource> GetGatewayDatasourcesAsync(this IDatasets operations, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGatewayDatasourcesWithHttpMessagesAsync(datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of bound datasources for the specified dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static ODataResponseListGatewayDatasource GetBoundedDatasources(this IDatasets operations, string datasetKey)
            {
                return operations.GetBoundedDatasourcesAsync(datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of bound datasources for the specified dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListGatewayDatasource> GetBoundedDatasourcesAsync(this IDatasets operations, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBoundedDatasourcesWithHttpMessagesAsync(datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of datasource for the specified dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            public static ODataResponseListDatasource GetDatasources(this IDatasets operations, string datasetKey)
            {
                return operations.GetDatasourcesAsync(datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of datasource for the specified dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDatasource> GetDatasourcesAsync(this IDatasets operations, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasourcesWithHttpMessagesAsync(datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets all connections for the specified dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='parameters'>
            /// The body
            /// </param>
            public static object SetAllDatasetConnections(this IDatasets operations, string datasetKey, ConnectionDetails parameters)
            {
                return operations.SetAllDatasetConnectionsAsync(datasetKey, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets all connections for the specified dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='parameters'>
            /// The body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetAllDatasetConnectionsAsync(this IDatasets operations, string datasetKey, ConnectionDetails parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetAllDatasetConnectionsWithHttpMessagesAsync(datasetKey, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Bind dataset to gateway
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='bindToGatewayRequest'>
            /// The bind to gateway request
            /// </param>
            public static object BindToGateway(this IDatasets operations, string datasetKey, BindToGatewayRequest bindToGatewayRequest)
            {
                return operations.BindToGatewayAsync(datasetKey, bindToGatewayRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Bind dataset to gateway
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='bindToGatewayRequest'>
            /// The bind to gateway request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BindToGatewayAsync(this IDatasets operations, string datasetKey, BindToGatewayRequest bindToGatewayRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BindToGatewayWithHttpMessagesAsync(datasetKey, bindToGatewayRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the datasets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            public static ODataResponseListDataset GetDatasetsInGroup(this IDatasets operations, string groupId)
            {
                return operations.GetDatasetsInGroupAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the datasets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDataset> GetDatasetsInGroupAsync(this IDatasets operations, string groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetsInGroupWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Post a new entity to datasets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='dataset'>
            /// Create dataset parameters
            /// </param>
            public static object PostDatasetInGroup(this IDatasets operations, string groupId, Dataset dataset)
            {
                return operations.PostDatasetInGroupAsync(groupId, dataset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post a new entity to datasets
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='dataset'>
            /// Create dataset parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostDatasetInGroupAsync(this IDatasets operations, string groupId, Dataset dataset, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostDatasetInGroupWithHttpMessagesAsync(groupId, dataset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Posts new data rows into the specified table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            public static object PostRowsInGroup(this IDatasets operations, string groupId, string datasetKey, string tableName, object requestMessage)
            {
                return operations.PostRowsInGroupAsync(groupId, datasetKey, tableName, requestMessage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Posts new data rows into the specified table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostRowsInGroupAsync(this IDatasets operations, string groupId, string datasetKey, string tableName, object requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostRowsInGroupWithHttpMessagesAsync(groupId, datasetKey, tableName, requestMessage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes all rows from the specified table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            public static object DeleteRowsInGroup(this IDatasets operations, string groupId, string datasetKey, string tableName)
            {
                return operations.DeleteRowsInGroupAsync(groupId, datasetKey, tableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes all rows from the specified table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteRowsInGroupAsync(this IDatasets operations, string groupId, string datasetKey, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRowsInGroupWithHttpMessagesAsync(groupId, datasetKey, tableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all tables within the specified dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static ODataResponseListTable GetTablesInGroup(this IDatasets operations, string groupId, string datasetKey)
            {
                return operations.GetTablesInGroupAsync(groupId, datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all tables within the specified dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListTable> GetTablesInGroupAsync(this IDatasets operations, string groupId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTablesInGroupWithHttpMessagesAsync(groupId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a schema and metadata for the specified table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            public static object PutTableInGroup(this IDatasets operations, string groupId, string datasetKey, string tableName, object requestMessage)
            {
                return operations.PutTableInGroupAsync(groupId, datasetKey, tableName, requestMessage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a schema and metadata for the specified table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutTableInGroupAsync(this IDatasets operations, string groupId, string datasetKey, string tableName, object requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutTableInGroupWithHttpMessagesAsync(groupId, datasetKey, tableName, requestMessage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the dataset metadata for the specifeid dataset id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static Dataset GetDatasetByIdInGroup(this IDatasets operations, string groupId, string datasetKey)
            {
                return operations.GetDatasetByIdInGroupAsync(groupId, datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the dataset metadata for the specifeid dataset id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dataset> GetDatasetByIdInGroupAsync(this IDatasets operations, string groupId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetByIdInGroupWithHttpMessagesAsync(groupId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the dataset with the specified id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static object DeleteDatasetByIdInGroup(this IDatasets operations, string groupId, string datasetKey)
            {
                return operations.DeleteDatasetByIdInGroupAsync(groupId, datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the dataset with the specified id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteDatasetByIdInGroupAsync(this IDatasets operations, string groupId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDatasetByIdInGroupWithHttpMessagesAsync(groupId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the dataset refresh history
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='top'>
            /// The requested number of entries in the refresh history, if not supported
            /// the default is all available entries
            /// </param>
            public static ODataResponseListRefresh GetRefreshHistoryInGroup(this IDatasets operations, string groupId, string datasetKey, int? top = default(int?))
            {
                return operations.GetRefreshHistoryInGroupAsync(groupId, datasetKey, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the dataset refresh history
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='top'>
            /// The requested number of entries in the refresh history, if not supported
            /// the default is all available entries
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListRefresh> GetRefreshHistoryInGroupAsync(this IDatasets operations, string groupId, string datasetKey, int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRefreshHistoryInGroupWithHttpMessagesAsync(groupId, datasetKey, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start a dataset refresh
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static object RefreshDatasetInGroup(this IDatasets operations, string groupId, string datasetKey)
            {
                return operations.RefreshDatasetInGroupAsync(groupId, datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start a dataset refresh
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RefreshDatasetInGroupAsync(this IDatasets operations, string groupId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RefreshDatasetInGroupWithHttpMessagesAsync(groupId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of bound gateway datasources for the specified dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static ODataResponseListGatewayDatasource GetGatewayDatasourcesInGroup(this IDatasets operations, string groupId, string datasetKey)
            {
                return operations.GetGatewayDatasourcesInGroupAsync(groupId, datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of bound gateway datasources for the specified dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListGatewayDatasource> GetGatewayDatasourcesInGroupAsync(this IDatasets operations, string groupId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGatewayDatasourcesInGroupWithHttpMessagesAsync(groupId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of bounded datasources for the specified dataset in this group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static ODataResponseListGatewayDatasource GetBoundedDatasourcesInGroup(this IDatasets operations, string groupId, string datasetKey)
            {
                return operations.GetBoundedDatasourcesInGroupAsync(groupId, datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of bounded datasources for the specified dataset in this group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListGatewayDatasource> GetBoundedDatasourcesInGroupAsync(this IDatasets operations, string groupId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBoundedDatasourcesInGroupWithHttpMessagesAsync(groupId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of datasource for the specified dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            public static ODataResponseListDatasource GetDatasourcesInGroup(this IDatasets operations, string groupId, string datasetKey)
            {
                return operations.GetDatasourcesInGroupAsync(groupId, datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of datasource for the specified dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDatasource> GetDatasourcesInGroupAsync(this IDatasets operations, string groupId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasourcesInGroupWithHttpMessagesAsync(groupId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets all connections for the specified dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='parameters'>
            /// The body
            /// </param>
            public static object SetAllDatasetConnectionsInGroup(this IDatasets operations, string groupId, string datasetKey, ConnectionDetails parameters)
            {
                return operations.SetAllDatasetConnectionsInGroupAsync(groupId, datasetKey, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets all connections for the specified dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='parameters'>
            /// The body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetAllDatasetConnectionsInGroupAsync(this IDatasets operations, string groupId, string datasetKey, ConnectionDetails parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetAllDatasetConnectionsInGroupWithHttpMessagesAsync(groupId, datasetKey, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Bind dataset to gateway
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='bindToGatewayRequest'>
            /// The bind to gateway request
            /// </param>
            public static object BindToGatewayInGroup(this IDatasets operations, string groupId, string datasetKey, BindToGatewayRequest bindToGatewayRequest)
            {
                return operations.BindToGatewayInGroupAsync(groupId, datasetKey, bindToGatewayRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Bind dataset to gateway
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='bindToGatewayRequest'>
            /// The bind to gateway request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BindToGatewayInGroupAsync(this IDatasets operations, string groupId, string datasetKey, BindToGatewayRequest bindToGatewayRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BindToGatewayInGroupWithHttpMessagesAsync(groupId, datasetKey, bindToGatewayRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Take Over a dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            public static object TakeOverInGroup(this IDatasets operations, string groupId, string datasetKey)
            {
                return operations.TakeOverInGroupAsync(groupId, datasetKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Take Over a dataset
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='datasetKey'>
            /// The dataset id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> TakeOverInGroupAsync(this IDatasets operations, string groupId, string datasetKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TakeOverInGroupWithHttpMessagesAsync(groupId, datasetKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
