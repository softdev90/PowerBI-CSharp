// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.V2
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Tiles.
    /// </summary>
    public static partial class TilesExtensions
    {
            /// <summary>
            /// This functionality only available in a workspace context. please use [Tiles
            /// GenerateTokenInGroup](/rest/api/power-bi/embedtoken/tiles_generatetokeningroup)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='tileKey'>
            /// The tile id
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            public static EmbedToken GenerateToken(this ITiles operations, string dashboardKey, string tileKey, GenerateTokenRequest requestParameters)
            {
                return operations.GenerateTokenAsync(dashboardKey, tileKey, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This functionality only available in a workspace context. please use [Tiles
            /// GenerateTokenInGroup](/rest/api/power-bi/embedtoken/tiles_generatetokeningroup)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='tileKey'>
            /// The tile id
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbedToken> GenerateTokenAsync(this ITiles operations, string dashboardKey, string tileKey, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateTokenWithHttpMessagesAsync(dashboardKey, tileKey, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Generates an embed token to view the specified tile from the specified
            /// workspace&lt;br/&gt;This API is relevant only to ['App owns data' embed
            /// scenario](https://docs.microsoft.com/power-bi/developer/embed-sample-for-customers)
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: (all of the below)
            /// &lt;ul&gt;&lt;li&gt;Dashboard.ReadWrite.All or
            /// Dashboard.Read.All&lt;/li&gt;&lt;li&gt;Report.ReadWrite.All or
            /// Report.Read.All &lt;/li&gt;&lt;li&gt;Dataset.ReadWrite.All or
            /// Dataset.Read.All&lt;/li&gt;&lt;/ul&gt; &lt;br/&gt;To set the permissions
            /// scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='tileKey'>
            /// The tile id
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            public static EmbedToken GenerateTokenInGroup(this ITiles operations, string groupId, string dashboardKey, string tileKey, GenerateTokenRequest requestParameters)
            {
                return operations.GenerateTokenInGroupAsync(groupId, dashboardKey, tileKey, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generates an embed token to view the specified tile from the specified
            /// workspace&lt;br/&gt;This API is relevant only to ['App owns data' embed
            /// scenario](https://docs.microsoft.com/power-bi/developer/embed-sample-for-customers)
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: (all of the below)
            /// &lt;ul&gt;&lt;li&gt;Dashboard.ReadWrite.All or
            /// Dashboard.Read.All&lt;/li&gt;&lt;li&gt;Report.ReadWrite.All or
            /// Report.Read.All &lt;/li&gt;&lt;li&gt;Dataset.ReadWrite.All or
            /// Dataset.Read.All&lt;/li&gt;&lt;/ul&gt; &lt;br/&gt;To set the permissions
            /// scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='tileKey'>
            /// The tile id
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbedToken> GenerateTokenInGroupAsync(this ITiles operations, string groupId, string dashboardKey, string tileKey, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateTokenInGroupWithHttpMessagesAsync(groupId, dashboardKey, tileKey, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
