// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.PowerBI.Api.V2
{
    using Microsoft.PowerBI;
    using Microsoft.PowerBI.Api;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Groups.
    /// </summary>
    public static partial class GroupsExtensions
    {
            /// <summary>
            /// Returns a list of groups
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ODataResponseListGroup GetGroups(this IGroups operations)
            {
                return operations.GetGroupsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of groups
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListGroup> GetGroupsAsync(this IGroups operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestParameters'>
            /// Create group request parameters
            /// </param>
            public static object CreateGroup(this IGroups operations, GroupCreationRequest requestParameters)
            {
                return operations.CreateGroupAsync(requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestParameters'>
            /// Create group request parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateGroupAsync(this IGroups operations, GroupCreationRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGroupWithHttpMessagesAsync(requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a group users list
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            public static ODataResponseListGroupUser GetGroupUsers(this IGroups operations, string groupId)
            {
                return operations.GetGroupUsersAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a group users list
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListGroupUser> GetGroupUsersAsync(this IGroups operations, string groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupUsersWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a group user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='addUserToDatasourceRequest'>
            /// The add user to datasource request
            /// </param>
            public static object AddGroupUser(this IGroups operations, string groupId, UserAccessRight1 addUserToDatasourceRequest)
            {
                return operations.AddGroupUserAsync(groupId, addUserToDatasourceRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a group user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The group id
            /// </param>
            /// <param name='addUserToDatasourceRequest'>
            /// The add user to datasource request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddGroupUserAsync(this IGroups operations, string groupId, UserAccessRight1 addUserToDatasourceRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddGroupUserWithHttpMessagesAsync(groupId, addUserToDatasourceRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
