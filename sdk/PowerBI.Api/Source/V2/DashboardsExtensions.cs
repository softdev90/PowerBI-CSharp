// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api.V2
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Dashboards.
    /// </summary>
    public static partial class DashboardsExtensions
    {
            /// <summary>
            /// Returns a list of dashboards from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dashboard.ReadWrite.All or
            /// Dashboard.Read.All &lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ODataResponseListDashboard GetDashboards(this IDashboards operations)
            {
                return operations.GetDashboardsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of dashboards from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dashboard.ReadWrite.All or
            /// Dashboard.Read.All &lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDashboard> GetDashboardsAsync(this IDashboards operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDashboardsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new empty dashboard on **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Content.Create &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestParameters'>
            /// Add dashboard parameters
            /// </param>
            public static Dashboard AddDashboard(this IDashboards operations, AddDashboardRequest requestParameters)
            {
                return operations.AddDashboardAsync(requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new empty dashboard on **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Content.Create &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestParameters'>
            /// Add dashboard parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dashboard> AddDashboardAsync(this IDashboards operations, AddDashboardRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddDashboardWithHttpMessagesAsync(requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified dashboard from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dashboard.ReadWrite.All or
            /// Dashboard.Read.All &lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            public static Dashboard GetDashboard(this IDashboards operations, string dashboardKey)
            {
                return operations.GetDashboardAsync(dashboardKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified dashboard from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dashboard.ReadWrite.All or
            /// Dashboard.Read.All &lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dashboard> GetDashboardAsync(this IDashboards operations, string dashboardKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDashboardWithHttpMessagesAsync(dashboardKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of tiles within the specified dashboard from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// **Note**: All tile types are supported except for "model tiles", which
            /// include datasets and live tiles that contain an entire report page.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dashboard.ReadWrite.All or
            /// Dashboard.Read.All &lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            public static ODataResponseListTile GetTiles(this IDashboards operations, string dashboardKey)
            {
                return operations.GetTilesAsync(dashboardKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of tiles within the specified dashboard from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// **Note**: All tile types are supported except for "model tiles", which
            /// include datasets and live tiles that contain an entire report page.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dashboard.ReadWrite.All or
            /// Dashboard.Read.All &lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListTile> GetTilesAsync(this IDashboards operations, string dashboardKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTilesWithHttpMessagesAsync(dashboardKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified tile within the specified dashboard from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// **Note**: All tile types are supported except for "model tiles", which
            /// include datasets and live tiles that contain an entire report page.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dashboard.ReadWrite.All or
            /// Dashboard.Read.All &lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='tileKey'>
            /// The tile id
            /// </param>
            public static Tile GetTile(this IDashboards operations, string dashboardKey, string tileKey)
            {
                return operations.GetTileAsync(dashboardKey, tileKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified tile within the specified dashboard from **"My
            /// Workspace"**.
            /// </summary>
            /// <remarks>
            /// **Note**: All tile types are supported except for "model tiles", which
            /// include datasets and live tiles that contain an entire report page.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dashboard.ReadWrite.All or
            /// Dashboard.Read.All &lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='tileKey'>
            /// The tile id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tile> GetTileAsync(this IDashboards operations, string dashboardKey, string tileKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTileWithHttpMessagesAsync(dashboardKey, tileKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Clones the specified tile from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;If target report id and target dataset are not specified, the
            /// following can occur:&lt;li&gt;When a tile clone is performed within the
            /// same workspace, the report and dataset links will be cloned from the source
            /// tile.&lt;/li&gt;&lt;li&gt;When cloning a tile within a different workspace,
            /// report and dataset links will be rested, and the tile will be
            /// broken.&lt;/li&gt;&lt;br/&gt;**Required scope**: Dashboard.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='tileKey'>
            /// The tile id
            /// </param>
            /// <param name='requestParameters'>
            /// Clone tile parameters
            /// </param>
            public static Tile CloneTile(this IDashboards operations, string dashboardKey, string tileKey, CloneTileRequest requestParameters)
            {
                return operations.CloneTileAsync(dashboardKey, tileKey, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Clones the specified tile from **"My Workspace"**.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;If target report id and target dataset are not specified, the
            /// following can occur:&lt;li&gt;When a tile clone is performed within the
            /// same workspace, the report and dataset links will be cloned from the source
            /// tile.&lt;/li&gt;&lt;li&gt;When cloning a tile within a different workspace,
            /// report and dataset links will be rested, and the tile will be
            /// broken.&lt;/li&gt;&lt;br/&gt;**Required scope**: Dashboard.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='tileKey'>
            /// The tile id
            /// </param>
            /// <param name='requestParameters'>
            /// Clone tile parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tile> CloneTileAsync(this IDashboards operations, string dashboardKey, string tileKey, CloneTileRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CloneTileWithHttpMessagesAsync(dashboardKey, tileKey, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This functionality is only available in a workspace context. Use
            /// [Dashboards
            /// GenerateTokenInGroup](/rest/api/power-bi/embedtoken/dashboards_generatetokeningroup).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            public static EmbedToken GenerateToken(this IDashboards operations, string dashboardKey, GenerateTokenRequest requestParameters)
            {
                return operations.GenerateTokenAsync(dashboardKey, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This functionality is only available in a workspace context. Use
            /// [Dashboards
            /// GenerateTokenInGroup](/rest/api/power-bi/embedtoken/dashboards_generatetokeningroup).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbedToken> GenerateTokenAsync(this IDashboards operations, string dashboardKey, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateTokenWithHttpMessagesAsync(dashboardKey, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of dashboards from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dashboard.ReadWrite.All or
            /// Dashboard.Read.All &lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            public static ODataResponseListDashboard GetDashboardsInGroup(this IDashboards operations, string groupId)
            {
                return operations.GetDashboardsInGroupAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of dashboards from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dashboard.ReadWrite.All or
            /// Dashboard.Read.All &lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDashboard> GetDashboardsInGroupAsync(this IDashboards operations, string groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDashboardsInGroupWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new empty dashboard on the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Content.Create &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='requestParameters'>
            /// Add dashboard parameters
            /// </param>
            public static Dashboard AddDashboardInGroup(this IDashboards operations, string groupId, AddDashboardRequest requestParameters)
            {
                return operations.AddDashboardInGroupAsync(groupId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new empty dashboard on the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Content.Create &lt;br/&gt;To set the
            /// permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='requestParameters'>
            /// Add dashboard parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dashboard> AddDashboardInGroupAsync(this IDashboards operations, string groupId, AddDashboardRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddDashboardInGroupWithHttpMessagesAsync(groupId, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified dashboard from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dashboard.ReadWrite.All or
            /// Dashboard.Read.All &lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            public static Dashboard GetDashboardInGroup(this IDashboards operations, string groupId, string dashboardKey)
            {
                return operations.GetDashboardInGroupAsync(groupId, dashboardKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified dashboard from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: Dashboard.ReadWrite.All or
            /// Dashboard.Read.All &lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dashboard> GetDashboardInGroupAsync(this IDashboards operations, string groupId, string dashboardKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDashboardInGroupWithHttpMessagesAsync(groupId, dashboardKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of tiles within the specified dashboard from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// **Note**: All tile types are supported except for "model tiles", which
            /// include datasets and live tiles that contain an entire report page.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dashboard.ReadWrite.All or
            /// Dashboard.Read.All &lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            public static ODataResponseListTile GetTilesInGroup(this IDashboards operations, string groupId, string dashboardKey)
            {
                return operations.GetTilesInGroupAsync(groupId, dashboardKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of tiles within the specified dashboard from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            /// **Note**: All tile types are supported except for "model tiles", which
            /// include datasets and live tiles that contain an entire report page.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dashboard.ReadWrite.All or
            /// Dashboard.Read.All &lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListTile> GetTilesInGroupAsync(this IDashboards operations, string groupId, string dashboardKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTilesInGroupWithHttpMessagesAsync(groupId, dashboardKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified tile within the specified dashboard from the
            /// specified workspace.
            /// </summary>
            /// <remarks>
            /// **Note**: All tile types are supported except for "model tiles", which
            /// include datasets and live tiles that contain an entire report page.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dashboard.ReadWrite.All or
            /// Dashboard.Read.All &lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='tileKey'>
            /// The tile id
            /// </param>
            public static Tile GetTileInGroup(this IDashboards operations, string groupId, string dashboardKey, string tileKey)
            {
                return operations.GetTileInGroupAsync(groupId, dashboardKey, tileKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified tile within the specified dashboard from the
            /// specified workspace.
            /// </summary>
            /// <remarks>
            /// **Note**: All tile types are supported except for "model tiles", which
            /// include datasets and live tiles that contain an entire report page.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Dashboard.ReadWrite.All or
            /// Dashboard.Read.All &lt;br/&gt;To set the permissions scope, see [Register
            /// an app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='tileKey'>
            /// The tile id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tile> GetTileInGroupAsync(this IDashboards operations, string groupId, string dashboardKey, string tileKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTileInGroupWithHttpMessagesAsync(groupId, dashboardKey, tileKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Clones the specified tile from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;If target report id and target dataset are missing, the
            /// following can occur:&lt;li&gt;When a tile clone is performed within the
            /// same workspace, the report and dataset links will be cloned from the source
            /// tile.&lt;/li&gt;&lt;li&gt;If you are cloning a tile within a different
            /// workspace, report and dataset links will be rested. The tile will be
            /// broken.&lt;/li&gt;&lt;br/&gt;**Required scope**: Dashboard.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='tileKey'>
            /// The tile id
            /// </param>
            /// <param name='requestParameters'>
            /// Clone tile parameters
            /// </param>
            public static Tile CloneTileInGroup(this IDashboards operations, string groupId, string dashboardKey, string tileKey, CloneTileRequest requestParameters)
            {
                return operations.CloneTileInGroupAsync(groupId, dashboardKey, tileKey, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Clones the specified tile from the specified workspace.
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;If target report id and target dataset are missing, the
            /// following can occur:&lt;li&gt;When a tile clone is performed within the
            /// same workspace, the report and dataset links will be cloned from the source
            /// tile.&lt;/li&gt;&lt;li&gt;If you are cloning a tile within a different
            /// workspace, report and dataset links will be rested. The tile will be
            /// broken.&lt;/li&gt;&lt;br/&gt;**Required scope**: Dashboard.ReadWrite.All
            /// &lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='tileKey'>
            /// The tile id
            /// </param>
            /// <param name='requestParameters'>
            /// Clone tile parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tile> CloneTileInGroupAsync(this IDashboards operations, string groupId, string dashboardKey, string tileKey, CloneTileRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CloneTileInGroupWithHttpMessagesAsync(groupId, dashboardKey, tileKey, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Generates an embed token to view the specified dashboard from the specified
            /// workspace.&lt;br/&gt;This API is relevant only to ['App owns data' embed
            /// scenario](https://docs.microsoft.com/power-bi/developer/embed-sample-for-customers).
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: (all of the below)
            /// &lt;ul&gt;&lt;li&gt;Dashboard.ReadWrite.All or
            /// Dashboard.Read.All&lt;/li&gt;&lt;li&gt;Report.ReadWrite.All or
            /// Report.Read.All &lt;/li&gt;&lt;li&gt;Dataset.ReadWrite.All or
            /// Dataset.Read.All&lt;/li&gt;&lt;/ul&gt; &lt;br/&gt;To set the permissions
            /// scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            public static EmbedToken GenerateTokenInGroup(this IDashboards operations, string groupId, string dashboardKey, GenerateTokenRequest requestParameters)
            {
                return operations.GenerateTokenInGroupAsync(groupId, dashboardKey, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generates an embed token to view the specified dashboard from the specified
            /// workspace.&lt;br/&gt;This API is relevant only to ['App owns data' embed
            /// scenario](https://docs.microsoft.com/power-bi/developer/embed-sample-for-customers).
            /// </summary>
            /// <remarks>
            /// &lt;br/&gt;**Required scope**: (all of the below)
            /// &lt;ul&gt;&lt;li&gt;Dashboard.ReadWrite.All or
            /// Dashboard.Read.All&lt;/li&gt;&lt;li&gt;Report.ReadWrite.All or
            /// Report.Read.All &lt;/li&gt;&lt;li&gt;Dataset.ReadWrite.All or
            /// Dataset.Read.All&lt;/li&gt;&lt;/ul&gt; &lt;br/&gt;To set the permissions
            /// scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbedToken> GenerateTokenInGroupAsync(this IDashboards operations, string groupId, string dashboardKey, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateTokenInGroupWithHttpMessagesAsync(groupId, dashboardKey, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of dashboards from the specified workspace.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Tenant.Read.All or
            /// Tenant.ReadWrite.All&lt;br/&gt;Application only and delegated permissions
            /// are supported.&lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            public static ODataResponseListDashboard GetDashboardsInGroupAsAdmin(this IDashboards operations, string groupId, string filter = default(string), int? top = default(int?), int? skip = default(int?))
            {
                return operations.GetDashboardsInGroupAsAdminAsync(groupId, filter, top, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of dashboards from the specified workspace.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Tenant.Read.All or
            /// Tenant.ReadWrite.All&lt;br/&gt;Application only and delegated permissions
            /// are supported.&lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace id
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDashboard> GetDashboardsInGroupAsAdminAsync(this IDashboards operations, string groupId, string filter = default(string), int? top = default(int?), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDashboardsInGroupAsAdminWithHttpMessagesAsync(groupId, filter, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of dashboards for the organization.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Tenant.Read.All or
            /// Tenant.ReadWrite.All&lt;br/&gt;Application only and delegated permissions
            /// are supported.&lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            public static ODataResponseListDashboard GetDashboardsAsAdmin(this IDashboards operations, string filter = default(string), int? top = default(int?), int? skip = default(int?))
            {
                return operations.GetDashboardsAsAdminAsync(filter, top, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of dashboards for the organization.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Tenant.Read.All or
            /// Tenant.ReadWrite.All&lt;br/&gt;Application only and delegated permissions
            /// are supported.&lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListDashboard> GetDashboardsAsAdminAsync(this IDashboards operations, string filter = default(string), int? top = default(int?), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDashboardsAsAdminWithHttpMessagesAsync(filter, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of tiles within the specified dashboard.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Tenant.Read.All or
            /// Tenant.ReadWrite.All&lt;br/&gt;Application only and delegated permissions
            /// are supported.&lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            public static ODataResponseListTile GetTilesAsAdmin(this IDashboards operations, string dashboardKey)
            {
                return operations.GetTilesAsAdminAsync(dashboardKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of tiles within the specified dashboard.
            /// </summary>
            /// <remarks>
            /// **Note:** The user must have administrator rights (such as Office 365
            /// Global Administrator or Power BI Service Administrator) to call this API.
            /// &lt;br/&gt;&lt;br/&gt;**Required scope**: Tenant.Read.All or
            /// Tenant.ReadWrite.All&lt;br/&gt;Application only and delegated permissions
            /// are supported.&lt;br/&gt;To set the permissions scope, see [Register an
            /// app](https://docs.microsoft.com/power-bi/developer/register-app).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dashboardKey'>
            /// The dashboard id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ODataResponseListTile> GetTilesAsAdminAsync(this IDashboards operations, string dashboardKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTilesAsAdminWithHttpMessagesAsync(dashboardKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
