// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PipelinesOperations.
    /// </summary>
    public static partial class PipelinesOperationsExtensions
    {
            /// <summary>
            /// Returns a list of deployment pipelines the user has access to.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All or Pipeline.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Pipelines GetPipelines(this IPipelinesOperations operations)
            {
                return operations.GetPipelinesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of deployment pipelines the user has access to.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All or Pipeline.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Pipelines> GetPipelinesAsync(this IPipelinesOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPipelinesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createPipelineRequest'>
            /// The create pipeline request
            /// </param>
            public static Pipeline CreatePipeline(this IPipelinesOperations operations, CreatePipelineRequest createPipelineRequest)
            {
                return operations.CreatePipelineAsync(createPipelineRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createPipelineRequest'>
            /// The create pipeline request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Pipeline> CreatePipelineAsync(this IPipelinesOperations operations, CreatePipelineRequest createPipelineRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePipelineWithHttpMessagesAsync(createPipelineRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All or Pipeline.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline, receives a comma-separated list of data
            /// types. Supported: stages
            /// </param>
            public static Pipeline GetPipeline(this IPipelinesOperations operations, System.Guid pipelineId, string expand = "stages")
            {
                return operations.GetPipelineAsync(pipelineId, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All or Pipeline.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline, receives a comma-separated list of data
            /// types. Supported: stages
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Pipeline> GetPipelineAsync(this IPipelinesOperations operations, System.Guid pipelineId, string expand = "stages", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPipelineWithHttpMessagesAsync(pipelineId, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the specified deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='updatePipelineRequest'>
            /// The update pipeline request
            /// </param>
            public static Pipeline UpdatePipeline(this IPipelinesOperations operations, System.Guid pipelineId, UpdatePipelineRequest updatePipelineRequest)
            {
                return operations.UpdatePipelineAsync(pipelineId, updatePipelineRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the specified deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='updatePipelineRequest'>
            /// The update pipeline request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Pipeline> UpdatePipelineAsync(this IPipelinesOperations operations, System.Guid pipelineId, UpdatePipelineRequest updatePipelineRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePipelineWithHttpMessagesAsync(pipelineId, updatePipelineRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// This operation will fail if there's an active deployment operation.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            public static void DeletePipeline(this IPipelinesOperations operations, System.Guid pipelineId)
            {
                operations.DeletePipelineAsync(pipelineId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// This operation will fail if there's an active deployment operation.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletePipelineAsync(this IPipelinesOperations operations, System.Guid pipelineId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeletePipelineWithHttpMessagesAsync(pipelineId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of users that have access to the specified deployment
            /// pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All or Pipeline.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            public static PipelineUsers GetPipelineUsers(this IPipelinesOperations operations, System.Guid pipelineId)
            {
                return operations.GetPipelineUsersAsync(pipelineId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of users that have access to the specified deployment
            /// pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All or Pipeline.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PipelineUsers> GetPipelineUsersAsync(this IPipelinesOperations operations, System.Guid pipelineId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPipelineUsersWithHttpMessagesAsync(pipelineId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Grants user permissions to the specified deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            public static void UpdatePipelineUser(this IPipelinesOperations operations, System.Guid pipelineId, PipelineUser userDetails)
            {
                operations.UpdatePipelineUserAsync(pipelineId, userDetails).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Grants user permissions to the specified deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdatePipelineUserAsync(this IPipelinesOperations operations, System.Guid pipelineId, PipelineUser userDetails, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdatePipelineUserWithHttpMessagesAsync(pipelineId, userDetails, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes user permissions from the specified deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='identifier'>
            /// To delete user pipeline permissions, provide the user's User Principal Name
            /// (UPN). To delete a service principal or a security group's pipeline
            /// permissions, provide the Object ID of the service principal or security
            /// group.
            /// </param>
            public static void DeletePipelineUser(this IPipelinesOperations operations, System.Guid pipelineId, string identifier)
            {
                operations.DeletePipelineUserAsync(pipelineId, identifier).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes user permissions from the specified deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='identifier'>
            /// To delete user pipeline permissions, provide the user's User Principal Name
            /// (UPN). To delete a service principal or a security group's pipeline
            /// permissions, provide the Object ID of the service principal or security
            /// group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletePipelineUserAsync(this IPipelinesOperations operations, System.Guid pipelineId, string identifier, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeletePipelineUserWithHttpMessagesAsync(pipelineId, identifier, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the stages of the specified deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All or Pipeline.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            public static PipelineStages GetPipelineStages(this IPipelinesOperations operations, System.Guid pipelineId)
            {
                return operations.GetPipelineStagesAsync(pipelineId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the stages of the specified deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All or Pipeline.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PipelineStages> GetPipelineStagesAsync(this IPipelinesOperations operations, System.Guid pipelineId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPipelineStagesWithHttpMessagesAsync(pipelineId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Assigns the specified workspace to the specified deployment pipeline stage.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All and Workspace.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - The specified deployment pipeline stage is not already assigned.
            /// - You must be an admin of the specified workspace.
            /// - The specified workspace is not assigned to any other deployment pipeline.
            /// - This operation will fail if there's an active deployment operation.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='stageOrder'>
            /// The deployment pipeline stage order. Development (0), Test (1), Production
            /// (2).
            /// </param>
            /// <param name='assignWorkspaceRequest'>
            /// The assign workspace request
            /// </param>
            public static void AssignWorkspace(this IPipelinesOperations operations, System.Guid pipelineId, int stageOrder, AssignWorkspaceRequest assignWorkspaceRequest)
            {
                operations.AssignWorkspaceAsync(pipelineId, stageOrder, assignWorkspaceRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Assigns the specified workspace to the specified deployment pipeline stage.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All and Workspace.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - The specified deployment pipeline stage is not already assigned.
            /// - You must be an admin of the specified workspace.
            /// - The specified workspace is not assigned to any other deployment pipeline.
            /// - This operation will fail if there's an active deployment operation.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='stageOrder'>
            /// The deployment pipeline stage order. Development (0), Test (1), Production
            /// (2).
            /// </param>
            /// <param name='assignWorkspaceRequest'>
            /// The assign workspace request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AssignWorkspaceAsync(this IPipelinesOperations operations, System.Guid pipelineId, int stageOrder, AssignWorkspaceRequest assignWorkspaceRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AssignWorkspaceWithHttpMessagesAsync(pipelineId, stageOrder, assignWorkspaceRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Unassigns the workspace from the specified stage in the specified
            /// deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// This operation will fail if there's an active deployment operation.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='stageOrder'>
            /// The deployment pipeline stage order. Development (0), Test (1), Production
            /// (2).
            /// </param>
            public static void UnassignWorkspace(this IPipelinesOperations operations, System.Guid pipelineId, int stageOrder)
            {
                operations.UnassignWorkspaceAsync(pipelineId, stageOrder).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unassigns the workspace from the specified stage in the specified
            /// deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// This operation will fail if there's an active deployment operation.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='stageOrder'>
            /// The deployment pipeline stage order. Development (0), Test (1), Production
            /// (2).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UnassignWorkspaceAsync(this IPipelinesOperations operations, System.Guid pipelineId, int stageOrder, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UnassignWorkspaceWithHttpMessagesAsync(pipelineId, stageOrder, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the supported items from the workspace assigned to the specified
            /// deployment pipeline stage. To learn more about items that are not supported
            /// in deployment pipelines, see [unsupported
            /// items](https://docs.microsoft.com/power-bi/create-reports/deployment-pipelines-process#unsupported-items)
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// To perform this operation, the user must be at least a contributor on the
            /// workspace assigned to the specified stage. For more information, see
            /// [permissions]([https://docs.microsoft.com/power-bi/create-reports/deployment-pipelines-process#permissions)
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All or Pipeline.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='stageOrder'>
            /// The deployment pipeline stage order. Development (0), Test (1), Production
            /// (2).
            /// </param>
            public static PipelineStageArtifacts GetPipelineStageArtifacts(this IPipelinesOperations operations, System.Guid pipelineId, int stageOrder)
            {
                return operations.GetPipelineStageArtifactsAsync(pipelineId, stageOrder).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the supported items from the workspace assigned to the specified
            /// deployment pipeline stage. To learn more about items that are not supported
            /// in deployment pipelines, see [unsupported
            /// items](https://docs.microsoft.com/power-bi/create-reports/deployment-pipelines-process#unsupported-items)
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// To perform this operation, the user must be at least a contributor on the
            /// workspace assigned to the specified stage. For more information, see
            /// [permissions]([https://docs.microsoft.com/power-bi/create-reports/deployment-pipelines-process#permissions)
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All or Pipeline.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='stageOrder'>
            /// The deployment pipeline stage order. Development (0), Test (1), Production
            /// (2).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PipelineStageArtifacts> GetPipelineStageArtifactsAsync(this IPipelinesOperations operations, System.Guid pipelineId, int stageOrder, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPipelineStageArtifactsWithHttpMessagesAsync(pipelineId, stageOrder, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of up to 20 last deploy operations performed on the
            /// specified deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All or Pipeline.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            public static PipelineOperations GetPipelineOperations(this IPipelinesOperations operations, System.Guid pipelineId)
            {
                return operations.GetPipelineOperationsAsync(pipelineId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of up to 20 last deploy operations performed on the
            /// specified deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All or Pipeline.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PipelineOperations> GetPipelineOperationsAsync(this IPipelinesOperations operations, System.Guid pipelineId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPipelineOperationsWithHttpMessagesAsync(pipelineId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the details of the specified deploy operation performed on the
            /// specified deployment pipeline including the `executionPlan`. Use to track
            /// the status of the deploy operation.
            /// </summary>
            /// <remarks>
            ///
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All or Pipeline.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='operationId'>
            /// The operation ID
            /// </param>
            public static PipelineOperation GetPipelineOperation(this IPipelinesOperations operations, System.Guid pipelineId, System.Guid operationId)
            {
                return operations.GetPipelineOperationAsync(pipelineId, operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the details of the specified deploy operation performed on the
            /// specified deployment pipeline including the `executionPlan`. Use to track
            /// the status of the deploy operation.
            /// </summary>
            /// <remarks>
            ///
            ///
            /// ## Required scope
            ///
            /// Pipeline.ReadWrite.All or Pipeline.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='operationId'>
            /// The operation ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PipelineOperation> GetPipelineOperationAsync(this IPipelinesOperations operations, System.Guid pipelineId, System.Guid operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPipelineOperationWithHttpMessagesAsync(pipelineId, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deploy all supported items from the specified deployment pipeline source
            /// stage. To learn more about items that are not supported in deployment
            /// pipelines, see [unsupported
            /// items](https://docs.microsoft.com/power-bi/create-reports/deployment-pipelines-process#unsupported-items)
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// To perform this operation, the user must be at least a member on both
            /// workpsaces. For more information, see
            /// [permissions]([https://docs.microsoft.com/power-bi/create-reports/deployment-pipelines-process#permissions)
            ///
            /// ## Required scope
            ///
            /// Pipeline.Deploy
            ///
            /// ## Limitations
            ///
            /// You can deploy up to 300 items per request
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='deployRequest'>
            /// The deploy request
            /// </param>
            public static PipelineOperation DeployAll(this IPipelinesOperations operations, System.Guid pipelineId, DeployAllRequest deployRequest)
            {
                return operations.DeployAllAsync(pipelineId, deployRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deploy all supported items from the specified deployment pipeline source
            /// stage. To learn more about items that are not supported in deployment
            /// pipelines, see [unsupported
            /// items](https://docs.microsoft.com/power-bi/create-reports/deployment-pipelines-process#unsupported-items)
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// To perform this operation, the user must be at least a member on both
            /// workpsaces. For more information, see
            /// [permissions]([https://docs.microsoft.com/power-bi/create-reports/deployment-pipelines-process#permissions)
            ///
            /// ## Required scope
            ///
            /// Pipeline.Deploy
            ///
            /// ## Limitations
            ///
            /// You can deploy up to 300 items per request
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='deployRequest'>
            /// The deploy request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PipelineOperation> DeployAllAsync(this IPipelinesOperations operations, System.Guid pipelineId, DeployAllRequest deployRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeployAllWithHttpMessagesAsync(pipelineId, deployRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deploy the specified items from the specified deployment pipeline source
            /// stage.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// To perform this operation, the user must be at least a member on both
            /// workpsaces. For more information, see
            /// [permissions]([https://docs.microsoft.com/power-bi/create-reports/deployment-pipelines-process#permissions)
            ///
            /// ## Required scope
            ///
            /// Pipeline.Deploy
            ///
            /// ## Limitations
            ///
            /// You can deploy up to 300 items per request
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='deployRequest'>
            /// The selective deploy request
            /// </param>
            public static PipelineOperation SelectiveDeploy(this IPipelinesOperations operations, System.Guid pipelineId, SelectiveDeployRequest deployRequest)
            {
                return operations.SelectiveDeployAsync(pipelineId, deployRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deploy the specified items from the specified deployment pipeline source
            /// stage.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// To perform this operation, the user must be at least a member on both
            /// workpsaces. For more information, see
            /// [permissions]([https://docs.microsoft.com/power-bi/create-reports/deployment-pipelines-process#permissions)
            ///
            /// ## Required scope
            ///
            /// Pipeline.Deploy
            ///
            /// ## Limitations
            ///
            /// You can deploy up to 300 items per request
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='deployRequest'>
            /// The selective deploy request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PipelineOperation> SelectiveDeployAsync(this IPipelinesOperations operations, System.Guid pipelineId, SelectiveDeployRequest deployRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SelectiveDeployWithHttpMessagesAsync(pipelineId, deployRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of deployment pipelines for the organization.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// The user must have administrator rights or authenticate using a service
            /// principal.
            ///
            /// ## Required scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline, receives a comma-separated list of data
            /// types. Supported: users, stages.
            /// </param>
            /// <param name='filter'>
            /// Filters the results based on a boolean condition.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results. This parameter must be in the range of
            /// 1-5000.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results. Use with top to fetch results beyond the first
            /// 5000.
            /// </param>
            public static Pipelines GetPipelinesAsAdmin(this IPipelinesOperations operations, string expand = default(string), string filter = default(string), int? top = default(int?), int? skip = default(int?))
            {
                return operations.GetPipelinesAsAdminAsync(expand, filter, top, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of deployment pipelines for the organization.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// The user must have administrator rights or authenticate using a service
            /// principal.
            ///
            /// ## Required scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline, receives a comma-separated list of data
            /// types. Supported: users, stages.
            /// </param>
            /// <param name='filter'>
            /// Filters the results based on a boolean condition.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results. This parameter must be in the range of
            /// 1-5000.
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results. Use with top to fetch results beyond the first
            /// 5000.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Pipelines> GetPipelinesAsAdminAsync(this IPipelinesOperations operations, string expand = default(string), string filter = default(string), int? top = default(int?), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPipelinesAsAdminWithHttpMessagesAsync(expand, filter, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of users that have access to a specified deployment
            /// pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// The user must have administrator rights or authenticate using a service
            /// principal.
            ///
            /// ## Required scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            public static PipelineUsers GetPipelineUsersAsAdmin(this IPipelinesOperations operations, System.Guid pipelineId)
            {
                return operations.GetPipelineUsersAsAdminAsync(pipelineId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of users that have access to a specified deployment
            /// pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// The user must have administrator rights or authenticate using a service
            /// principal.
            ///
            /// ## Required scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PipelineUsers> GetPipelineUsersAsAdminAsync(this IPipelinesOperations operations, System.Guid pipelineId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPipelineUsersAsAdminWithHttpMessagesAsync(pipelineId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Grants user permissions to a specified deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// The user must have administrator rights.
            ///
            /// ## Required scope
            ///
            /// Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            public static void UpdateUserAsAdmin(this IPipelinesOperations operations, System.Guid pipelineId, PipelineUser userDetails)
            {
                operations.UpdateUserAsAdminAsync(pipelineId, userDetails).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Grants user permissions to a specified deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// The user must have administrator rights.
            ///
            /// ## Required scope
            ///
            /// Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateUserAsAdminAsync(this IPipelinesOperations operations, System.Guid pipelineId, PipelineUser userDetails, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateUserAsAdminWithHttpMessagesAsync(pipelineId, userDetails, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes user permissions from a specified deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// The user must have administrator rights.
            ///
            /// ## Required scope
            ///
            /// Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='identifier'>
            /// For Principal type 'User' provide UPN , otherwise provide [Object
            /// ID](/power-bi/developer/embedded/embedded-troubleshoot#what-is-the-difference-between-application-object-id-and-principal-object-id)
            /// of the principal
            /// </param>
            public static void DeleteUserAsAdmin(this IPipelinesOperations operations, System.Guid pipelineId, string identifier)
            {
                operations.DeleteUserAsAdminAsync(pipelineId, identifier).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes user permissions from a specified deployment pipeline.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// The user must have administrator rights.
            ///
            /// ## Required scope
            ///
            /// Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pipelineId'>
            /// The deployment pipeline ID
            /// </param>
            /// <param name='identifier'>
            /// For Principal type 'User' provide UPN , otherwise provide [Object
            /// ID](/power-bi/developer/embedded/embedded-troubleshoot#what-is-the-difference-between-application-object-id-and-principal-object-id)
            /// of the principal
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUserAsAdminAsync(this IPipelinesOperations operations, System.Guid pipelineId, string identifier, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUserAsAdminWithHttpMessagesAsync(pipelineId, identifier, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
