// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api
{
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ReportsOperations.
    /// </summary>
    public static partial class ReportsOperationsExtensions
    {
            /// <summary>
            /// Returns a list of reports from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// This API also returns shared reports and reports from shared apps. Reports
            /// that reside in shared workspaces can be accessed using the [Get Reports In
            /// Group API](/rest/api/power-bi/reports/get-reports-in-group).
            ///
            /// Since paginated reports (RDL) don't have a dataset, the dataset ID value in
            /// the API response for paginated reports isn't displayed.
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Reports GetReports(this IReportsOperations operations)
            {
                return operations.GetReportsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of reports from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// This API also returns shared reports and reports from shared apps. Reports
            /// that reside in shared workspaces can be accessed using the [Get Reports In
            /// Group API](/rest/api/power-bi/reports/get-reports-in-group).
            ///
            /// Since paginated reports (RDL) don't have a dataset, the dataset ID value in
            /// the API response for paginated reports isn't displayed.
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Reports> GetReportsAsync(this IReportsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReportsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified report from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static Report GetReport(this IReportsOperations operations, System.Guid reportId)
            {
                return operations.GetReportAsync(reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified report from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Report> GetReportAsync(this IReportsOperations operations, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReportWithHttpMessagesAsync(reportId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified report from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static void DeleteReport(this IReportsOperations operations, System.Guid reportId)
            {
                operations.DeleteReportAsync(reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified report from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteReportAsync(this IReportsOperations operations, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteReportWithHttpMessagesAsync(reportId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Clones the specified report from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// - If the dataset for a cloned report resides in two different [new
            /// workspace experience](/power-bi/collaborate-share/service-new-workspaces)
            /// workspaces or in **My workspace**, then a shared dataset will be created in
            /// the report's workspace.
            /// - When cloned, reports with a [live
            /// connection](/power-bi/desktop-report-lifecycle-datasets) will lose that
            /// connection and instead have a direct binding to the target dataset.
            ///
            /// ## Permissions
            ///
            /// The user must have all of the following, unless a requirement doesn't
            /// apply:
            ///
            /// - **Write** permission on the specified report.
            /// - **Build** permission on the target dataset, required if the
            /// `targetModelId` parameter is used.
            ///
            /// ## Required Scope
            ///
            /// Content.Create
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Clone report parameters
            /// </param>
            public static Report CloneReport(this IReportsOperations operations, System.Guid reportId, CloneReportRequest requestParameters)
            {
                return operations.CloneReportAsync(reportId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Clones the specified report from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// - If the dataset for a cloned report resides in two different [new
            /// workspace experience](/power-bi/collaborate-share/service-new-workspaces)
            /// workspaces or in **My workspace**, then a shared dataset will be created in
            /// the report's workspace.
            /// - When cloned, reports with a [live
            /// connection](/power-bi/desktop-report-lifecycle-datasets) will lose that
            /// connection and instead have a direct binding to the target dataset.
            ///
            /// ## Permissions
            ///
            /// The user must have all of the following, unless a requirement doesn't
            /// apply:
            ///
            /// - **Write** permission on the specified report.
            /// - **Build** permission on the target dataset, required if the
            /// `targetModelId` parameter is used.
            ///
            /// ## Required Scope
            ///
            /// Content.Create
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Clone report parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Report> CloneReportAsync(this IReportsOperations operations, System.Guid reportId, CloneReportRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CloneReportWithHttpMessagesAsync(reportId, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Exports the specified report from **My workspace** to a Power BI .pbix
            /// file.
            /// </summary>
            /// <remarks>
            ///
            /// - As a
            /// [workaround](/power-bi/developer/embedded/embedded-troubleshoot#how-to-fix-timeout-exceptions-when-using-import-and-export-apis)
            /// for timeout issues, set the `preferClientRouting` parameter to `true`.
            /// - Large files are downloaded to a temporary blob. Their URL is returned in
            /// the response, and stored in the locally downloaded Power BI .pbix file.
            /// - For more information on requirements and limitations, see [Download a
            /// report from the Power BI service to Power BI
            /// Desktop](/power-bi/create-reports/service-export-to-pbix).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or both Report.Read.All and Dataset.Read.All
            ///
            /// ## Limitations
            ///
            /// After calling [Rebind Report](/rest/api/power-bi/reports/rebind-report),
            /// export of a report with a [Power BI service live
            /// connection](/power-bi/desktop-report-lifecycle-datasets) isn't supported.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static Stream ExportReport(this IReportsOperations operations, System.Guid reportId)
            {
                return operations.ExportReportAsync(reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exports the specified report from **My workspace** to a Power BI .pbix
            /// file.
            /// </summary>
            /// <remarks>
            ///
            /// - As a
            /// [workaround](/power-bi/developer/embedded/embedded-troubleshoot#how-to-fix-timeout-exceptions-when-using-import-and-export-apis)
            /// for timeout issues, set the `preferClientRouting` parameter to `true`.
            /// - Large files are downloaded to a temporary blob. Their URL is returned in
            /// the response, and stored in the locally downloaded Power BI .pbix file.
            /// - For more information on requirements and limitations, see [Download a
            /// report from the Power BI service to Power BI
            /// Desktop](/power-bi/create-reports/service-export-to-pbix).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or both Report.Read.All and Dataset.Read.All
            ///
            /// ## Limitations
            ///
            /// After calling [Rebind Report](/rest/api/power-bi/reports/rebind-report),
            /// export of a report with a [Power BI service live
            /// connection](/power-bi/desktop-report-lifecycle-datasets) isn't supported.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> ExportReportAsync(this IReportsOperations operations, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ExportReportWithHttpMessagesAsync(reportId, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Updates the content of the specified report from **My workspace** with the
            /// content of a specified source report.
            /// </summary>
            /// <remarks>
            ///
            /// Specify the source report in the request body.
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// UpdateReportContent parameters
            /// </param>
            public static Report UpdateReportContent(this IReportsOperations operations, System.Guid reportId, UpdateReportContentRequest requestParameters)
            {
                return operations.UpdateReportContentAsync(reportId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the content of the specified report from **My workspace** with the
            /// content of a specified source report.
            /// </summary>
            /// <remarks>
            ///
            /// Specify the source report in the request body.
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// UpdateReportContent parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Report> UpdateReportContentAsync(this IReportsOperations operations, System.Guid reportId, UpdateReportContentRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateReportContentWithHttpMessagesAsync(reportId, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Rebinds the specified report from **My workspace** to the specified
            /// dataset.
            /// </summary>
            /// <remarks>
            ///
            /// - If the specified dataset resides in a different [new workspace
            /// experience](/power-bi/collaborate-share/service-new-workspaces) workspace
            /// from the report, then a shared dataset will be created in **My workspace**.
            /// - On rebind, reports with a [live
            /// connection](/power-bi/desktop-report-lifecycle-datasets) will lose that
            /// connection and instead have a direct binding to the target dataset.
            ///
            /// ## Permissions
            ///
            /// The user must have all of the following:
            ///
            /// - **Write** permission on the specified report.
            /// - **Build** permission on the target dataset.
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Rebind report parameters
            /// </param>
            public static void RebindReport(this IReportsOperations operations, System.Guid reportId, RebindReportRequest requestParameters)
            {
                operations.RebindReportAsync(reportId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Rebinds the specified report from **My workspace** to the specified
            /// dataset.
            /// </summary>
            /// <remarks>
            ///
            /// - If the specified dataset resides in a different [new workspace
            /// experience](/power-bi/collaborate-share/service-new-workspaces) workspace
            /// from the report, then a shared dataset will be created in **My workspace**.
            /// - On rebind, reports with a [live
            /// connection](/power-bi/desktop-report-lifecycle-datasets) will lose that
            /// connection and instead have a direct binding to the target dataset.
            ///
            /// ## Permissions
            ///
            /// The user must have all of the following:
            ///
            /// - **Write** permission on the specified report.
            /// - **Build** permission on the target dataset.
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Rebind report parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RebindReportAsync(this IReportsOperations operations, System.Guid reportId, RebindReportRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RebindReportWithHttpMessagesAsync(reportId, requestParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of pages within the specified report from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static Pages GetPages(this IReportsOperations operations, System.Guid reportId)
            {
                return operations.GetPagesAsync(reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of pages within the specified report from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Pages> GetPagesAsync(this IReportsOperations operations, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPagesWithHttpMessagesAsync(reportId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified page within the specified report from **My
            /// workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='pageName'>
            /// The page name
            /// </param>
            public static Page GetPage(this IReportsOperations operations, System.Guid reportId, string pageName)
            {
                return operations.GetPageAsync(reportId, pageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified page within the specified report from **My
            /// workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='pageName'>
            /// The page name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Page> GetPageAsync(this IReportsOperations operations, System.Guid reportId, string pageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPageWithHttpMessagesAsync(reportId, pageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of data sources for the specified paginated report (RDL)
            /// from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static Datasources GetDatasources(this IReportsOperations operations, System.Guid reportId)
            {
                return operations.GetDatasourcesAsync(reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of data sources for the specified paginated report (RDL)
            /// from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datasources> GetDatasourcesAsync(this IReportsOperations operations, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasourcesWithHttpMessagesAsync(reportId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the data sources of the specified paginated report (RDL) from **My
            /// workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; Both the original data source and the new data source must have the
            /// exact same schema.
            ///
            /// ## Permissions
            ///
            /// The user must be the data source owner.
            ///
            /// ## Required Scope
            ///
            /// Reports.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - Only supports paginated reports.
            /// - Changing the data source type isn't supported.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='updateRdlDatasourcesRequest'>
            /// </param>
            public static void UpdateDatasources(this IReportsOperations operations, System.Guid reportId, UpdateRdlDatasourcesRequest updateRdlDatasourcesRequest)
            {
                operations.UpdateDatasourcesAsync(reportId, updateRdlDatasourcesRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the data sources of the specified paginated report (RDL) from **My
            /// workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; Both the original data source and the new data source must have the
            /// exact same schema.
            ///
            /// ## Permissions
            ///
            /// The user must be the data source owner.
            ///
            /// ## Required Scope
            ///
            /// Reports.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - Only supports paginated reports.
            /// - Changing the data source type isn't supported.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='updateRdlDatasourcesRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateDatasourcesAsync(this IReportsOperations operations, System.Guid reportId, UpdateRdlDatasourcesRequest updateRdlDatasourcesRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateDatasourcesWithHttpMessagesAsync(reportId, updateRdlDatasourcesRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Exports the specified report from **My workspace** to the requested [file
            /// format](/rest/api/power-bi/reports/export-to-file#fileformat).
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// All of the following:
            ///
            /// - Report.ReadWrite.All or Report.Read.All
            /// - Dataset.ReadWrite.All or Dataset.Read.All
            ///
            /// ## Limitations
            ///
            /// Check the limitations in [Export Power BI report to
            /// file](/power-bi/developer/embedded/export-to#considerations-and-limitations)
            /// and [Export paginated report to
            /// file](/power-bi/developer/embedded/export-paginated-report#considerations-and-limitations).
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Export to file request parameters
            /// </param>
            public static Export ExportToFile(this IReportsOperations operations, System.Guid reportId, ExportReportRequest requestParameters)
            {
                return operations.ExportToFileAsync(reportId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exports the specified report from **My workspace** to the requested [file
            /// format](/rest/api/power-bi/reports/export-to-file#fileformat).
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// All of the following:
            ///
            /// - Report.ReadWrite.All or Report.Read.All
            /// - Dataset.ReadWrite.All or Dataset.Read.All
            ///
            /// ## Limitations
            ///
            /// Check the limitations in [Export Power BI report to
            /// file](/power-bi/developer/embedded/export-to#considerations-and-limitations)
            /// and [Export paginated report to
            /// file](/power-bi/developer/embedded/export-paginated-report#considerations-and-limitations).
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Export to file request parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Export> ExportToFileAsync(this IReportsOperations operations, System.Guid reportId, ExportReportRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportToFileWithHttpMessagesAsync(reportId, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the current status of the [Export to
            /// File](/rest/api/power-bi/reports/export-to-file) job for the specified
            /// report from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='exportId'>
            /// The export ID
            /// </param>
            public static Export GetExportToFileStatus(this IReportsOperations operations, System.Guid reportId, string exportId)
            {
                return operations.GetExportToFileStatusAsync(reportId, exportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the current status of the [Export to
            /// File](/rest/api/power-bi/reports/export-to-file) job for the specified
            /// report from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='exportId'>
            /// The export ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Export> GetExportToFileStatusAsync(this IReportsOperations operations, System.Guid reportId, string exportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExportToFileStatusWithHttpMessagesAsync(reportId, exportId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the file from the [Export to
            /// File](/rest/api/power-bi/reports/export-to-file) job for the specified
            /// report from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='exportId'>
            /// The export ID
            /// </param>
            public static Stream GetFileOfExportToFile(this IReportsOperations operations, System.Guid reportId, string exportId)
            {
                return operations.GetFileOfExportToFileAsync(reportId, exportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the file from the [Export to
            /// File](/rest/api/power-bi/reports/export-to-file) job for the specified
            /// report from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='exportId'>
            /// The export ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetFileOfExportToFileAsync(this IReportsOperations operations, System.Guid reportId, string exportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetFileOfExportToFileWithHttpMessagesAsync(reportId, exportId, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Returns a list of reports from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// Since paginated reports (RDL) don't have a dataset, the dataset ID value in
            /// the API response for paginated reports isn't displayed.
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            public static Reports GetReportsInGroup(this IReportsOperations operations, System.Guid groupId)
            {
                return operations.GetReportsInGroupAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of reports from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// Since paginated reports (RDL) don't have a dataset, the dataset ID value in
            /// the API response for paginated reports isn't displayed.
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Reports> GetReportsInGroupAsync(this IReportsOperations operations, System.Guid groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReportsInGroupWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified report from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static Report GetReportInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId)
            {
                return operations.GetReportInGroupAsync(groupId, reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified report from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Report> GetReportInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReportInGroupWithHttpMessagesAsync(groupId, reportId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified report from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static void DeleteReportInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId)
            {
                operations.DeleteReportInGroupAsync(groupId, reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified report from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteReportInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteReportInGroupWithHttpMessagesAsync(groupId, reportId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Clones the specified report from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// - If the dataset for a cloned report resides in two different [new
            /// workspace experience](/power-bi/collaborate-share/service-new-workspaces)
            /// workspaces or in **My workspace**, then a shared dataset will be created in
            /// the report's workspace.
            /// - When cloned, reports with a [live
            /// connection](/power-bi/desktop-report-lifecycle-datasets) will lose that
            /// connection and instead have a direct binding to the target dataset.
            ///
            /// ## Permissions
            ///
            /// - The user must have all of the following, unless a requirement doesn't
            /// apply:
            ///
            /// - **Write** permission on the specified report.
            /// - **Build** permission on the target dataset, required if the
            /// `targetModelId` parameter is used.
            ///
            /// - This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Content.Create
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Clone report parameters
            /// </param>
            public static Report CloneReportInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, CloneReportRequest requestParameters)
            {
                return operations.CloneReportInGroupAsync(groupId, reportId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Clones the specified report from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// - If the dataset for a cloned report resides in two different [new
            /// workspace experience](/power-bi/collaborate-share/service-new-workspaces)
            /// workspaces or in **My workspace**, then a shared dataset will be created in
            /// the report's workspace.
            /// - When cloned, reports with a [live
            /// connection](/power-bi/desktop-report-lifecycle-datasets) will lose that
            /// connection and instead have a direct binding to the target dataset.
            ///
            /// ## Permissions
            ///
            /// - The user must have all of the following, unless a requirement doesn't
            /// apply:
            ///
            /// - **Write** permission on the specified report.
            /// - **Build** permission on the target dataset, required if the
            /// `targetModelId` parameter is used.
            ///
            /// - This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Content.Create
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Clone report parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Report> CloneReportInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, CloneReportRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CloneReportInGroupWithHttpMessagesAsync(groupId, reportId, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Exports the specified report from the specified workspace to a Power BI
            /// .pbix file.
            /// </summary>
            /// <remarks>
            ///
            /// - You can set the `preferClientRouting` parameter to `true` as a
            /// [workaround](/power-bi/developer/embedded/embedded-troubleshoot#how-to-fix-timeout-exceptions-when-using-import-and-export-apis)
            /// for timeout issues.
            /// - Large files are downloaded to a temporary blob. Their URL is returned in
            /// the response and stored in the locally downloaded Power BI .pbix file.
            /// - For more information on requirements and limitations, see [Download a
            /// report from the Power BI service to Power BI
            /// Desktop](/power-bi/create-reports/service-export-to-pbix).
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or both Report.Read.All and Dataset.Read.All
            ///
            /// ## Limitations
            ///
            /// Exporting a report with a [Power BI service live
            /// connection](/power-bi/desktop-report-lifecycle-datasets) isn't supported
            /// after calling [Rebind Report](/rest/api/power-bi/reports/rebind-report).
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static Stream ExportReportInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId)
            {
                return operations.ExportReportInGroupAsync(groupId, reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exports the specified report from the specified workspace to a Power BI
            /// .pbix file.
            /// </summary>
            /// <remarks>
            ///
            /// - You can set the `preferClientRouting` parameter to `true` as a
            /// [workaround](/power-bi/developer/embedded/embedded-troubleshoot#how-to-fix-timeout-exceptions-when-using-import-and-export-apis)
            /// for timeout issues.
            /// - Large files are downloaded to a temporary blob. Their URL is returned in
            /// the response and stored in the locally downloaded Power BI .pbix file.
            /// - For more information on requirements and limitations, see [Download a
            /// report from the Power BI service to Power BI
            /// Desktop](/power-bi/create-reports/service-export-to-pbix).
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or both Report.Read.All and Dataset.Read.All
            ///
            /// ## Limitations
            ///
            /// Exporting a report with a [Power BI service live
            /// connection](/power-bi/desktop-report-lifecycle-datasets) isn't supported
            /// after calling [Rebind Report](/rest/api/power-bi/reports/rebind-report).
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> ExportReportInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ExportReportInGroupWithHttpMessagesAsync(groupId, reportId, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Updates the content of the specified report from the specified workspace
            /// with the content of a specified source report.
            /// </summary>
            /// <remarks>
            ///
            /// Specify the source report in the request body.
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// UpdateReportContent parameters
            /// </param>
            public static Report UpdateReportContentInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, UpdateReportContentRequest requestParameters)
            {
                return operations.UpdateReportContentInGroupAsync(groupId, reportId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the content of the specified report from the specified workspace
            /// with the content of a specified source report.
            /// </summary>
            /// <remarks>
            ///
            /// Specify the source report in the request body.
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// UpdateReportContent parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Report> UpdateReportContentInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, UpdateReportContentRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateReportContentInGroupWithHttpMessagesAsync(groupId, reportId, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Rebinds the specified report from the specified workspace to the specified
            /// dataset.
            /// </summary>
            /// <remarks>
            ///
            /// - If the specified dataset resides in a different [new workspace
            /// experience](/power-bi/collaborate-share/service-new-workspaces) workspace
            /// from the report or in **My workspace**, then a shared dataset will be
            /// created in the report's workspace.
            /// - On rebind, reports with a [live
            /// connection](/power-bi/desktop-report-lifecycle-datasets) will lose that
            /// connection and instead have a direct binding to the target dataset.
            ///
            /// ## Permissions
            ///
            /// - The user must have all of the following:
            ///
            /// - **Write** permission on the specified report.
            /// - **Build** permission on the target dataset.
            ///
            /// - This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Rebind report parameters
            /// </param>
            public static void RebindReportInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, RebindReportRequest requestParameters)
            {
                operations.RebindReportInGroupAsync(groupId, reportId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Rebinds the specified report from the specified workspace to the specified
            /// dataset.
            /// </summary>
            /// <remarks>
            ///
            /// - If the specified dataset resides in a different [new workspace
            /// experience](/power-bi/collaborate-share/service-new-workspaces) workspace
            /// from the report or in **My workspace**, then a shared dataset will be
            /// created in the report's workspace.
            /// - On rebind, reports with a [live
            /// connection](/power-bi/desktop-report-lifecycle-datasets) will lose that
            /// connection and instead have a direct binding to the target dataset.
            ///
            /// ## Permissions
            ///
            /// - The user must have all of the following:
            ///
            /// - **Write** permission on the specified report.
            /// - **Build** permission on the target dataset.
            ///
            /// - This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Rebind report parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RebindReportInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, RebindReportRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RebindReportInGroupWithHttpMessagesAsync(groupId, reportId, requestParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of pages within the specified report from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static Pages GetPagesInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId)
            {
                return operations.GetPagesInGroupAsync(groupId, reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of pages within the specified report from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Pages> GetPagesInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPagesInGroupWithHttpMessagesAsync(groupId, reportId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified page within the specified report from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='pageName'>
            /// The page name
            /// </param>
            public static Page GetPageInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, string pageName)
            {
                return operations.GetPageInGroupAsync(groupId, reportId, pageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified page within the specified report from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='pageName'>
            /// The page name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Page> GetPageInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, string pageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPageInGroupWithHttpMessagesAsync(groupId, reportId, pageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of data sources for the specified paginated report (RDL)
            /// from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// </param>
            public static Datasources GetDatasourcesInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId)
            {
                return operations.GetDatasourcesInGroupAsync(groupId, reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of data sources for the specified paginated report (RDL)
            /// from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datasources> GetDatasourcesInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasourcesInGroupWithHttpMessagesAsync(groupId, reportId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the data sources of the specified paginated report (RDL) from the
            /// specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; Both the original data source and the new data source must have the
            /// exact same schema.
            ///
            /// ## Permissions
            ///
            /// - The user must be the data source owner.
            /// - This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Reports.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - Only supports paginated reports.
            /// - Changing the data source type isn't supported.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='updateRdlDatasourcesRequest'>
            /// </param>
            public static void UpdateDatasourcesInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, UpdateRdlDatasourcesRequest updateRdlDatasourcesRequest)
            {
                operations.UpdateDatasourcesInGroupAsync(groupId, reportId, updateRdlDatasourcesRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the data sources of the specified paginated report (RDL) from the
            /// specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; Both the original data source and the new data source must have the
            /// exact same schema.
            ///
            /// ## Permissions
            ///
            /// - The user must be the data source owner.
            /// - This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Reports.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - Only supports paginated reports.
            /// - Changing the data source type isn't supported.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='updateRdlDatasourcesRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateDatasourcesInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, UpdateRdlDatasourcesRequest updateRdlDatasourcesRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateDatasourcesInGroupWithHttpMessagesAsync(groupId, reportId, updateRdlDatasourcesRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Exports the specified report from the specified workspace to the requested
            /// [file
            /// format](/rest/api/power-bi/reports/export-to-file-in-group#fileformat).
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// All of the following:
            ///
            /// - Report.ReadWrite.All or Report.Read.All
            /// - Dataset.ReadWrite.All or Dataset.Read.All
            ///
            /// ## Limitations
            ///
            /// Check the limitations in [Export Power BI report to
            /// file](/power-bi/developer/embedded/export-to#considerations-and-limitations)
            /// and [Export paginated report to
            /// file](/power-bi/developer/embedded/export-paginated-report#considerations-and-limitations).
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Export to file request parameters
            /// </param>
            public static Export ExportToFileInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, ExportReportRequest requestParameters)
            {
                return operations.ExportToFileInGroupAsync(groupId, reportId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exports the specified report from the specified workspace to the requested
            /// [file
            /// format](/rest/api/power-bi/reports/export-to-file-in-group#fileformat).
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// All of the following:
            ///
            /// - Report.ReadWrite.All or Report.Read.All
            /// - Dataset.ReadWrite.All or Dataset.Read.All
            ///
            /// ## Limitations
            ///
            /// Check the limitations in [Export Power BI report to
            /// file](/power-bi/developer/embedded/export-to#considerations-and-limitations)
            /// and [Export paginated report to
            /// file](/power-bi/developer/embedded/export-paginated-report#considerations-and-limitations).
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Export to file request parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Export> ExportToFileInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, ExportReportRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportToFileInGroupWithHttpMessagesAsync(groupId, reportId, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the current status of the [Export to File In
            /// Group](/rest/api/power-bi/reports/export-to-file-in-group) job for the
            /// specified report from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='exportId'>
            /// The export ID
            /// </param>
            public static Export GetExportToFileStatusInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, string exportId)
            {
                return operations.GetExportToFileStatusInGroupAsync(groupId, reportId, exportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the current status of the [Export to File In
            /// Group](/rest/api/power-bi/reports/export-to-file-in-group) job for the
            /// specified report from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='exportId'>
            /// The export ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Export> GetExportToFileStatusInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, string exportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExportToFileStatusInGroupWithHttpMessagesAsync(groupId, reportId, exportId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the file from the [Export to File In
            /// Group](/rest/api/power-bi/reports/export-to-file-in-group) job for the
            /// specified report from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='exportId'>
            /// The export ID
            /// </param>
            public static Stream GetFileOfExportToFileInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, string exportId)
            {
                return operations.GetFileOfExportToFileInGroupAsync(groupId, reportId, exportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the file from the [Export to File In
            /// Group](/rest/api/power-bi/reports/export-to-file-in-group) job for the
            /// specified report from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All or Report.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='exportId'>
            /// The export ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetFileOfExportToFileInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, string exportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetFileOfExportToFileInGroupWithHttpMessagesAsync(groupId, reportId, exportId, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Generates an embed token to allow report creation in the specified
            /// workspace based on the specified dataset.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; This API call is only relevant to the [embed for your
            /// customers](/power-bi/developer/embed-sample-for-customers) scenario. To
            /// learn more about using this API, see [Considerations when generating an
            /// embed token](/power-bi/developer/embedded/generate-embed-token).
            ///
            /// ## Permissions
            ///
            /// - When using a service principal for authentication, refer to [Embed Power
            /// BI content with service
            /// principal](/power-bi/developer/embed-service-principal) and [Considerations
            /// and
            /// limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
            /// - This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// All of the following:
            ///
            /// - Content.Create
            /// - Report.ReadWrite.All or Report.Read.All
            /// - Dataset.ReadWrite.All or Dataset.Read.All
            ///
            /// ## Limitations
            ///
            /// For Azure Analysis Services or Analysis Services on-premises live
            /// connection reports, generating an embed token with row-level security may
            /// not work for several minutes after a [Rebind
            /// Report](/rest/api/power-bi/reports/rebind-report) api call.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            public static EmbedToken GenerateTokenForCreateInGroup(this IReportsOperations operations, System.Guid groupId, GenerateTokenRequest requestParameters)
            {
                return operations.GenerateTokenForCreateInGroupAsync(groupId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generates an embed token to allow report creation in the specified
            /// workspace based on the specified dataset.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; This API call is only relevant to the [embed for your
            /// customers](/power-bi/developer/embed-sample-for-customers) scenario. To
            /// learn more about using this API, see [Considerations when generating an
            /// embed token](/power-bi/developer/embedded/generate-embed-token).
            ///
            /// ## Permissions
            ///
            /// - When using a service principal for authentication, refer to [Embed Power
            /// BI content with service
            /// principal](/power-bi/developer/embed-service-principal) and [Considerations
            /// and
            /// limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
            /// - This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// All of the following:
            ///
            /// - Content.Create
            /// - Report.ReadWrite.All or Report.Read.All
            /// - Dataset.ReadWrite.All or Dataset.Read.All
            ///
            /// ## Limitations
            ///
            /// For Azure Analysis Services or Analysis Services on-premises live
            /// connection reports, generating an embed token with row-level security may
            /// not work for several minutes after a [Rebind
            /// Report](/rest/api/power-bi/reports/rebind-report) api call.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbedToken> GenerateTokenForCreateInGroupAsync(this IReportsOperations operations, System.Guid groupId, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateTokenForCreateInGroupWithHttpMessagesAsync(groupId, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Generates an embed token to view or edit the specified report from the
            /// specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; This API call is only relevant to the [embed for your
            /// customers](/power-bi/developer/embed-sample-for-customers) scenario. To
            /// learn more about using this API, see [Considerations when generating an
            /// embed token](/power-bi/developer/embedded/generate-embed-token).
            ///
            /// ## Permissions
            ///
            /// - When using a service principal for authentication, refer to [Embed Power
            /// BI content with service
            /// principal](/power-bi/developer/embed-service-principal) and [Considerations
            /// and
            /// limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
            /// - This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// All of the following, unless a requirement doesn't apply:
            ///
            /// - Report.ReadWrite.All or Report.Read.All
            /// - Dataset.ReadWrite.All or Dataset.Read.All
            /// - Content.Create, required if the `allowSaveAs` flag is specified in
            /// [GenerateTokenRequest](/rest/api/power-bi/embed-token/reports-generate-token-for-create-in-group#generatetokenrequest)
            ///
            /// ## Limitations
            ///
            /// For Azure Analysis Services or Analysis Services on-premises live
            /// connection reports, generating an embed token with row-level security may
            /// not work for several minutes after a [Rebind
            /// Report](/rest/api/power-bi/reports/rebind-report).
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            public static EmbedToken GenerateTokenInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, GenerateTokenRequest requestParameters)
            {
                return operations.GenerateTokenInGroupAsync(groupId, reportId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generates an embed token to view or edit the specified report from the
            /// specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; This API call is only relevant to the [embed for your
            /// customers](/power-bi/developer/embed-sample-for-customers) scenario. To
            /// learn more about using this API, see [Considerations when generating an
            /// embed token](/power-bi/developer/embedded/generate-embed-token).
            ///
            /// ## Permissions
            ///
            /// - When using a service principal for authentication, refer to [Embed Power
            /// BI content with service
            /// principal](/power-bi/developer/embed-service-principal) and [Considerations
            /// and
            /// limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
            /// - This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// All of the following, unless a requirement doesn't apply:
            ///
            /// - Report.ReadWrite.All or Report.Read.All
            /// - Dataset.ReadWrite.All or Dataset.Read.All
            /// - Content.Create, required if the `allowSaveAs` flag is specified in
            /// [GenerateTokenRequest](/rest/api/power-bi/embed-token/reports-generate-token-for-create-in-group#generatetokenrequest)
            ///
            /// ## Limitations
            ///
            /// For Azure Analysis Services or Analysis Services on-premises live
            /// connection reports, generating an embed token with row-level security may
            /// not work for several minutes after a [Rebind
            /// Report](/rest/api/power-bi/reports/rebind-report).
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbedToken> GenerateTokenInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateTokenInGroupWithHttpMessagesAsync(groupId, reportId, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of reports from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            public static AdminReports GetReportsInGroupAsAdmin(this IReportsOperations operations, System.Guid groupId, string filter = default(string), int? top = default(int?), int? skip = default(int?))
            {
                return operations.GetReportsInGroupAsAdminAsync(groupId, filter, top, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of reports from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AdminReports> GetReportsInGroupAsAdminAsync(this IReportsOperations operations, System.Guid groupId, string filter = default(string), int? top = default(int?), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReportsInGroupAsAdminWithHttpMessagesAsync(groupId, filter, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of reports for the organization.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            public static AdminReports GetReportsAsAdmin(this IReportsOperations operations, string filter = default(string), int? top = default(int?), int? skip = default(int?))
            {
                return operations.GetReportsAsAdminAsync(filter, top, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of reports for the organization.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AdminReports> GetReportsAsAdminAsync(this IReportsOperations operations, string filter = default(string), int? top = default(int?), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReportsAsAdminWithHttpMessagesAsync(filter, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of users that have access to the specified report.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static ReportUsers GetReportUsersAsAdmin(this IReportsOperations operations, System.Guid reportId)
            {
                return operations.GetReportUsersAsAdminAsync(reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of users that have access to the specified report.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReportUsers> GetReportUsersAsAdminAsync(this IReportsOperations operations, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReportUsersAsAdminWithHttpMessagesAsync(reportId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of report subscriptions along with subscriber details. This
            /// is a preview API call.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static Subscriptions GetReportSubscriptionsAsAdmin(this IReportsOperations operations, System.Guid reportId)
            {
                return operations.GetReportSubscriptionsAsAdminAsync(reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of report subscriptions along with subscriber details. This
            /// is a preview API call.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Subscriptions> GetReportSubscriptionsAsAdminAsync(this IReportsOperations operations, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReportSubscriptionsAsAdminWithHttpMessagesAsync(reportId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Transfers ownership of the data sources for the specified paginated report
            /// (RDL) to the current authorized user.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Only supports paginated reports.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            public static void TakeOverInGroup(this IReportsOperations operations, System.Guid groupId, System.Guid reportId)
            {
                operations.TakeOverInGroupAsync(groupId, reportId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Transfers ownership of the data sources for the specified paginated report
            /// (RDL) to the current authorized user.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Report.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Only supports paginated reports.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='reportId'>
            /// The report ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task TakeOverInGroupAsync(this IReportsOperations operations, System.Guid groupId, System.Guid reportId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.TakeOverInGroupWithHttpMessagesAsync(groupId, reportId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
