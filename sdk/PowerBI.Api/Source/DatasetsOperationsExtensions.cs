// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DatasetsOperations.
    /// </summary>
    public static partial class DatasetsOperationsExtensions
    {
            /// <summary>
            /// Returns a list of datasets from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Datasets GetDatasets(this IDatasetsOperations operations)
            {
                return operations.GetDatasetsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasets from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datasets> GetDatasetsAsync(this IDatasetsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new dataset on **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// This API call only supports **push datasets**.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataset'>
            /// Dataset definition to create
            /// </param>
            /// <param name='defaultRetentionPolicy'>
            /// The default retention policy. Possible values include: 'None', 'basicFIFO'
            /// </param>
            public static Dataset PostDataset(this IDatasetsOperations operations, CreateDatasetRequest dataset, DefaultRetentionPolicy? defaultRetentionPolicy = default(DefaultRetentionPolicy?))
            {
                return operations.PostDatasetAsync(dataset, defaultRetentionPolicy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new dataset on **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// This API call only supports **push datasets**.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataset'>
            /// Dataset definition to create
            /// </param>
            /// <param name='defaultRetentionPolicy'>
            /// The default retention policy. Possible values include: 'None', 'basicFIFO'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dataset> PostDatasetAsync(this IDatasetsOperations operations, CreateDatasetRequest dataset, DefaultRetentionPolicy? defaultRetentionPolicy = default(DefaultRetentionPolicy?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostDatasetWithHttpMessagesAsync(dataset, defaultRetentionPolicy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified dataset from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            public static Dataset GetDataset(this IDatasetsOperations operations, string datasetId)
            {
                return operations.GetDatasetAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified dataset from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dataset> GetDatasetAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the properties for the specified dataset from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// The user must be the dataset owner.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='updateDatasetRequest'>
            /// Update dataset request parameters
            /// </param>
            public static void UpdateDataset(this IDatasetsOperations operations, string datasetId, UpdateDatasetRequest updateDatasetRequest)
            {
                operations.UpdateDatasetAsync(datasetId, updateDatasetRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the properties for the specified dataset from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// The user must be the dataset owner.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='updateDatasetRequest'>
            /// Update dataset request parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateDatasetAsync(this IDatasetsOperations operations, string datasetId, UpdateDatasetRequest updateDatasetRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateDatasetWithHttpMessagesAsync(datasetId, updateDatasetRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes the specified dataset from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            public static void DeleteDataset(this IDatasetsOperations operations, string datasetId)
            {
                operations.DeleteDatasetAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified dataset from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDatasetAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDatasetWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Executes Data Analysis Expressions (DAX) queries against the provided
            /// dataset. The dataset must reside in **My workspace** or another [new
            /// workspace experience](/power-bi/collaborate-share/service-new-workspaces)
            /// workspace. This is a preview API call.
            /// </summary>
            /// <remarks>
            ///
            /// DAX query errors will result in:
            ///
            /// - A response error, such as `DAX query failure`.
            /// - A failure HTTP status code (400).
            ///
            /// A query that requests more than one table, or more than 100,000 table rows,
            /// will result in:
            ///
            /// - Limited data being returned.
            /// - A response error, such as `More than one result table in a query` or
            /// `More than 100k rows in a query result`.
            /// - A successful HTTP status code (200).
            ///
            /// Columns that are fully qualified in the query will be returned with a fully
            /// qualified name, for example, `MyTable[MyColumn]`. Columns that are renamed
            /// or created in the query will be returned within square bracket, for
            /// example, `[MyNewColumn]`.
            ///
            /// ## Permissions
            ///
            /// The user must have [Manage dataset access
            /// permissions](/power-bi/connect-data/service-datasets-manage-access-permissions).
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            ///
            /// ## Limitations
            ///
            /// - Only datasets in a [new workspace
            /// experience](/power-bi/collaborate-share/service-new-workspaces) workspace,
            /// that is to say a **V2** workspace, are supported.
            /// - Datasets that are hosted in Azure Analysis Services or that have a live
            /// connection to an on-premises Azure Analysis Services model aren't
            /// supported.
            /// - The tenant setting **[Allow XMLA endpoints and Analyze in Excel with
            /// on-premises datasets](/power-bi/admin/service-premium-connect-tools)** must
            /// be enabled.
            /// - One query per API call.
            /// - One table request per query.
            /// - Maximum of 100,000 rows or 1,000,000 values per query (whichever is hit
            /// first). For example if you query for 5 columns, you can get back max
            /// 100,000 rows. If you query for 20 columns, you can get back max 50,000 rows
            /// (1 million divided by 20).
            /// - Service Principals aren't supported for datasets with RLS per [RLS
            /// limitations](/power-bi/admin/service-admin-rls#considerations-and-limitations)
            /// and user impersonation isn't supported.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            public static DatasetExecuteQueriesResponse ExecuteQueries(this IDatasetsOperations operations, string datasetId, DatasetExecuteQueriesRequest requestMessage)
            {
                return operations.ExecuteQueriesAsync(datasetId, requestMessage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Executes Data Analysis Expressions (DAX) queries against the provided
            /// dataset. The dataset must reside in **My workspace** or another [new
            /// workspace experience](/power-bi/collaborate-share/service-new-workspaces)
            /// workspace. This is a preview API call.
            /// </summary>
            /// <remarks>
            ///
            /// DAX query errors will result in:
            ///
            /// - A response error, such as `DAX query failure`.
            /// - A failure HTTP status code (400).
            ///
            /// A query that requests more than one table, or more than 100,000 table rows,
            /// will result in:
            ///
            /// - Limited data being returned.
            /// - A response error, such as `More than one result table in a query` or
            /// `More than 100k rows in a query result`.
            /// - A successful HTTP status code (200).
            ///
            /// Columns that are fully qualified in the query will be returned with a fully
            /// qualified name, for example, `MyTable[MyColumn]`. Columns that are renamed
            /// or created in the query will be returned within square bracket, for
            /// example, `[MyNewColumn]`.
            ///
            /// ## Permissions
            ///
            /// The user must have [Manage dataset access
            /// permissions](/power-bi/connect-data/service-datasets-manage-access-permissions).
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            ///
            /// ## Limitations
            ///
            /// - Only datasets in a [new workspace
            /// experience](/power-bi/collaborate-share/service-new-workspaces) workspace,
            /// that is to say a **V2** workspace, are supported.
            /// - Datasets that are hosted in Azure Analysis Services or that have a live
            /// connection to an on-premises Azure Analysis Services model aren't
            /// supported.
            /// - The tenant setting **[Allow XMLA endpoints and Analyze in Excel with
            /// on-premises datasets](/power-bi/admin/service-premium-connect-tools)** must
            /// be enabled.
            /// - One query per API call.
            /// - One table request per query.
            /// - Maximum of 100,000 rows or 1,000,000 values per query (whichever is hit
            /// first). For example if you query for 5 columns, you can get back max
            /// 100,000 rows. If you query for 20 columns, you can get back max 50,000 rows
            /// (1 million divided by 20).
            /// - Service Principals aren't supported for datasets with RLS per [RLS
            /// limitations](/power-bi/admin/service-admin-rls#considerations-and-limitations)
            /// and user impersonation isn't supported.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetExecuteQueriesResponse> ExecuteQueriesAsync(this IDatasetsOperations operations, string datasetId, DatasetExecuteQueriesRequest requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteQueriesWithHttpMessagesAsync(datasetId, requestMessage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of tables within the specified dataset from **My
            /// workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            ///
            /// ## Limitations
            ///
            /// This API call only supports **push datasets**.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            public static Tables GetTables(this IDatasetsOperations operations, string datasetId)
            {
                return operations.GetTablesAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of tables within the specified dataset from **My
            /// workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            ///
            /// ## Limitations
            ///
            /// This API call only supports **push datasets**.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tables> GetTablesAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTablesWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the metadata and schema for the specified table within the
            /// specified dataset from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// This API call only supports **push datasets**.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// Table name and columns to update existing table
            /// </param>
            public static Table PutTable(this IDatasetsOperations operations, string datasetId, string tableName, Table requestMessage)
            {
                return operations.PutTableAsync(datasetId, tableName, requestMessage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the metadata and schema for the specified table within the
            /// specified dataset from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// This API call only supports **push datasets**.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// Table name and columns to update existing table
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Table> PutTableAsync(this IDatasetsOperations operations, string datasetId, string tableName, Table requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutTableWithHttpMessagesAsync(datasetId, tableName, requestMessage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds new data rows to the specified table within the specified dataset from
            /// **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - This API call only supports **push datasets**.
            /// - See [Power BI REST API
            /// limitations](/power-bi/developer/automation/api-rest-api-limitations).
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            public static void PostRows(this IDatasetsOperations operations, string datasetId, string tableName, PostRowsRequest requestMessage)
            {
                operations.PostRowsAsync(datasetId, tableName, requestMessage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds new data rows to the specified table within the specified dataset from
            /// **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - This API call only supports **push datasets**.
            /// - See [Power BI REST API
            /// limitations](/power-bi/developer/automation/api-rest-api-limitations).
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostRowsAsync(this IDatasetsOperations operations, string datasetId, string tableName, PostRowsRequest requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostRowsWithHttpMessagesAsync(datasetId, tableName, requestMessage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes all rows from the specified table within the specified dataset from
            /// **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// This API call only supports **push datasets**.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            public static void DeleteRows(this IDatasetsOperations operations, string datasetId, string tableName)
            {
                operations.DeleteRowsAsync(datasetId, tableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes all rows from the specified table within the specified dataset from
            /// **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// This API call only supports **push datasets**.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteRowsAsync(this IDatasetsOperations operations, string datasetId, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteRowsWithHttpMessagesAsync(datasetId, tableName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the refresh history for the specified dataset from **My
            /// workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            ///
            /// ## Limitations
            ///
            /// OneDrive refresh history isn't returned.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='top'>
            /// The requested number of entries in the refresh history. If not provided,
            /// the default is all available entries.
            /// </param>
            public static Refreshes GetRefreshHistory(this IDatasetsOperations operations, string datasetId, int? top = default(int?))
            {
                return operations.GetRefreshHistoryAsync(datasetId, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the refresh history for the specified dataset from **My
            /// workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            ///
            /// ## Limitations
            ///
            /// OneDrive refresh history isn't returned.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='top'>
            /// The requested number of entries in the refresh history. If not provided,
            /// the default is all available entries.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Refreshes> GetRefreshHistoryAsync(this IDatasetsOperations operations, string datasetId, int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRefreshHistoryWithHttpMessagesAsync(datasetId, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Triggers a refresh for the specified dataset from **My workspace**. An
            /// [asynchronous refresh](/power-bi/connect-data/asynchronous-refresh) would
            /// be triggered only if any request payload except `notifyOption` is set.
            /// Asynchronous refresh has response headers which could be used to [get
            /// refresh execution
            /// details](/rest/api/power-bi/datasets/get-refresh-execution-details) or
            /// [cancel refresh](/rest/api/power-bi/datasets/cancel-refresh).
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - For Shared capacities, a maximum of eight requests per day, which
            /// includes refreshes executed using a scheduled refresh.
            /// - For Premium capacities, the maximum requests per day is only limited by
            /// the available resources in the capacity. If available resources are
            /// overloaded, refreshes are throttled until the load is reduced. The refresh
            /// will fail if throttling exceeds 1 hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='datasetRefreshRequest'>
            /// </param>
            public static DatasetsRefreshDatasetHeaders RefreshDataset(this IDatasetsOperations operations, string datasetId, DatasetRefreshRequest datasetRefreshRequest = default(DatasetRefreshRequest))
            {
                return operations.RefreshDatasetAsync(datasetId, datasetRefreshRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Triggers a refresh for the specified dataset from **My workspace**. An
            /// [asynchronous refresh](/power-bi/connect-data/asynchronous-refresh) would
            /// be triggered only if any request payload except `notifyOption` is set.
            /// Asynchronous refresh has response headers which could be used to [get
            /// refresh execution
            /// details](/rest/api/power-bi/datasets/get-refresh-execution-details) or
            /// [cancel refresh](/rest/api/power-bi/datasets/cancel-refresh).
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - For Shared capacities, a maximum of eight requests per day, which
            /// includes refreshes executed using a scheduled refresh.
            /// - For Premium capacities, the maximum requests per day is only limited by
            /// the available resources in the capacity. If available resources are
            /// overloaded, refreshes are throttled until the load is reduced. The refresh
            /// will fail if throttling exceeds 1 hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='datasetRefreshRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetsRefreshDatasetHeaders> RefreshDatasetAsync(this IDatasetsOperations operations, string datasetId, DatasetRefreshRequest datasetRefreshRequest = default(DatasetRefreshRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RefreshDatasetWithHttpMessagesAsync(datasetId, datasetRefreshRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Returns execution details of an [asynchronous refresh
            /// operation](/power-bi/connect-data/asynchronous-refresh) for the specified
            /// dataset from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='refreshId'>
            /// The refresh ID
            /// </param>
            public static DatasetRefreshDetail GetRefreshExecutionDetails(this IDatasetsOperations operations, System.Guid datasetId, System.Guid refreshId)
            {
                return operations.GetRefreshExecutionDetailsAsync(datasetId, refreshId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns execution details of an [asynchronous refresh
            /// operation](/power-bi/connect-data/asynchronous-refresh) for the specified
            /// dataset from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='refreshId'>
            /// The refresh ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetRefreshDetail> GetRefreshExecutionDetailsAsync(this IDatasetsOperations operations, System.Guid datasetId, System.Guid refreshId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRefreshExecutionDetailsWithHttpMessagesAsync(datasetId, refreshId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels the specified [asynchronous refresh
            /// operation](/power-bi/connect-data/asynchronous-refresh) for the specified
            /// dataset from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='refreshId'>
            /// The refresh ID
            /// </param>
            public static void CancelRefresh(this IDatasetsOperations operations, System.Guid datasetId, System.Guid refreshId)
            {
                operations.CancelRefreshAsync(datasetId, refreshId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels the specified [asynchronous refresh
            /// operation](/power-bi/connect-data/asynchronous-refresh) for the specified
            /// dataset from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='refreshId'>
            /// The refresh ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelRefreshAsync(this IDatasetsOperations operations, System.Guid datasetId, System.Guid refreshId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelRefreshWithHttpMessagesAsync(datasetId, refreshId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the refresh schedule for the specified dataset from **My
            /// workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            public static RefreshSchedule GetRefreshSchedule(this IDatasetsOperations operations, string datasetId)
            {
                return operations.GetRefreshScheduleAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the refresh schedule for the specified dataset from **My
            /// workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RefreshSchedule> GetRefreshScheduleAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRefreshScheduleWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the refresh schedule for the specified dataset from **My
            /// workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// A request that disables the refresh schedule should contain no other
            /// changes.
            ///
            /// At least one day must be specified. If no times are specified, then Power
            /// BI will use a default single time per day.
            ///
            /// ## Permissions
            ///
            /// The user must be the dataset owner.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// The limit on the number of time slots per day depends on whether a
            /// [Premium](/power-bi/admin/service-premium-what-is) or Shared capacity is
            /// used.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='datasetModelRefreshScheduleRequest'>
            /// Update Refresh Schedule parameters, by specifying all or some of the
            /// parameters
            /// </param>
            public static void UpdateRefreshSchedule(this IDatasetsOperations operations, string datasetId, RefreshScheduleRequest datasetModelRefreshScheduleRequest)
            {
                operations.UpdateRefreshScheduleAsync(datasetId, datasetModelRefreshScheduleRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the refresh schedule for the specified dataset from **My
            /// workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// A request that disables the refresh schedule should contain no other
            /// changes.
            ///
            /// At least one day must be specified. If no times are specified, then Power
            /// BI will use a default single time per day.
            ///
            /// ## Permissions
            ///
            /// The user must be the dataset owner.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// The limit on the number of time slots per day depends on whether a
            /// [Premium](/power-bi/admin/service-premium-what-is) or Shared capacity is
            /// used.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='datasetModelRefreshScheduleRequest'>
            /// Update Refresh Schedule parameters, by specifying all or some of the
            /// parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateRefreshScheduleAsync(this IDatasetsOperations operations, string datasetId, RefreshScheduleRequest datasetModelRefreshScheduleRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateRefreshScheduleWithHttpMessagesAsync(datasetId, datasetModelRefreshScheduleRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the refresh schedule for a specified
            /// [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or
            /// [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections)
            /// dataset from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            public static DirectQueryRefreshSchedule GetDirectQueryRefreshSchedule(this IDatasetsOperations operations, string datasetId)
            {
                return operations.GetDirectQueryRefreshScheduleAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the refresh schedule for a specified
            /// [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or
            /// [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections)
            /// dataset from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DirectQueryRefreshSchedule> GetDirectQueryRefreshScheduleAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDirectQueryRefreshScheduleWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the refresh schedule for a specified
            /// [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or
            /// [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections)
            /// dataset from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// A request should contain either a set of days and times *or* a valid
            /// frequency, but not both. If you choose a set of days without specifying any
            /// times, then Power BI will use a default single time per day. Setting the
            /// frequency will automatically overwrite the days and times setting.
            ///
            /// ## Permissions
            ///
            /// The user must be the dataset owner.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='datasetDQRefreshScheduleRequest'>
            /// Patch DirectQuery or LiveConnection Refresh Schedule parameters, by
            /// specifying all or some of the parameters
            /// </param>
            public static void UpdateDirectQueryRefreshSchedule(this IDatasetsOperations operations, string datasetId, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest)
            {
                operations.UpdateDirectQueryRefreshScheduleAsync(datasetId, datasetDQRefreshScheduleRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the refresh schedule for a specified
            /// [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or
            /// [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections)
            /// dataset from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// A request should contain either a set of days and times *or* a valid
            /// frequency, but not both. If you choose a set of days without specifying any
            /// times, then Power BI will use a default single time per day. Setting the
            /// frequency will automatically overwrite the days and times setting.
            ///
            /// ## Permissions
            ///
            /// The user must be the dataset owner.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='datasetDQRefreshScheduleRequest'>
            /// Patch DirectQuery or LiveConnection Refresh Schedule parameters, by
            /// specifying all or some of the parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateDirectQueryRefreshScheduleAsync(this IDatasetsOperations operations, string datasetId, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateDirectQueryRefreshScheduleWithHttpMessagesAsync(datasetId, datasetDQRefreshScheduleRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of parameters for the specified dataset from **My
            /// workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Datasets with SQL, Oracle, Teradata, and SAP HANA
            /// [DirectQuery](/power-bi/connect-data/desktop-directquery-about) connections
            /// aren't supported.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            public static MashupParameters GetParameters(this IDatasetsOperations operations, string datasetId)
            {
                return operations.GetParametersAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of parameters for the specified dataset from **My
            /// workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Datasets with SQL, Oracle, Teradata, and SAP HANA
            /// [DirectQuery](/power-bi/connect-data/desktop-directquery-about) connections
            /// aren't supported.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MashupParameters> GetParametersAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetParametersWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the parameters values for the specified dataset from **My
            /// workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!NOTE]
            /// &gt; We recommend using [enhanced dataset
            /// metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with
            /// this API call.
            ///
            /// &gt; [!IMPORTANT]
            /// &gt;
            /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset
            /// to apply the new parameter values.
            /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes
            /// for the update data sources operation to complete, and then refresh the
            /// dataset.
            ///
            /// ## Permissions
            ///
            /// The user must be the dataset owner.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - Datasets created using the public [XMLA
            /// endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported.
            /// To make changes to those data sources, the admin must use the Azure
            /// Analysis Services client library for Tabular Object Model.
            /// - [DirectQuery](/power-bi/connect-data/desktop-directquery-about)
            /// connections are only supported with [enhanced dataset
            /// metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
            /// - Datasets with Azure Analysis Services live connections aren't supported.
            /// - Maximum of 100 parameters per request.
            /// - All specified parameters must exist in the dataset.
            /// - Parameters values should be of the expected type.
            /// - The parameter list can't be empty or include duplicate parameters.
            /// - Parameters names are case-sensitive.
            /// - Parameter `IsRequired` must have a non-empty value.
            /// - The parameter types `Any` and `Binary` can't be updated.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='updateMashupParametersRequest'>
            /// </param>
            public static void UpdateParameters(this IDatasetsOperations operations, string datasetId, UpdateMashupParametersRequest updateMashupParametersRequest)
            {
                operations.UpdateParametersAsync(datasetId, updateMashupParametersRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the parameters values for the specified dataset from **My
            /// workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!NOTE]
            /// &gt; We recommend using [enhanced dataset
            /// metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with
            /// this API call.
            ///
            /// &gt; [!IMPORTANT]
            /// &gt;
            /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset
            /// to apply the new parameter values.
            /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes
            /// for the update data sources operation to complete, and then refresh the
            /// dataset.
            ///
            /// ## Permissions
            ///
            /// The user must be the dataset owner.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - Datasets created using the public [XMLA
            /// endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported.
            /// To make changes to those data sources, the admin must use the Azure
            /// Analysis Services client library for Tabular Object Model.
            /// - [DirectQuery](/power-bi/connect-data/desktop-directquery-about)
            /// connections are only supported with [enhanced dataset
            /// metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
            /// - Datasets with Azure Analysis Services live connections aren't supported.
            /// - Maximum of 100 parameters per request.
            /// - All specified parameters must exist in the dataset.
            /// - Parameters values should be of the expected type.
            /// - The parameter list can't be empty or include duplicate parameters.
            /// - Parameters names are case-sensitive.
            /// - Parameter `IsRequired` must have a non-empty value.
            /// - The parameter types `Any` and `Binary` can't be updated.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='updateMashupParametersRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateParametersAsync(this IDatasetsOperations operations, string datasetId, UpdateMashupParametersRequest updateMashupParametersRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateParametersWithHttpMessagesAsync(datasetId, updateMashupParametersRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of data sources for the specified dataset from **My
            /// workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            public static Datasources GetDatasources(this IDatasetsOperations operations, string datasetId)
            {
                return operations.GetDatasourcesAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of data sources for the specified dataset from **My
            /// workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datasources> GetDatasourcesAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasourcesWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the data sources of the specified dataset from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!NOTE]
            /// &gt; We recommend using [enhanced dataset
            /// metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with
            /// this API call.
            ///
            /// &gt; [!IMPORTANT]
            /// &gt;
            /// &gt; - The original data source and the new data source must have the exact
            /// same schema.
            /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset
            /// to get data from the new data sources.
            /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes
            /// for the update data sources operation to complete, and then refresh the
            /// dataset.
            ///
            /// ## Permissions
            ///
            /// The user must be the dataset owner.
            ///
            /// ## Limitations
            ///
            /// - Datasets created using the public [XMLA
            /// endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported.
            /// To make changes to those data sources, the admin must use the Azure
            /// Analysis Services client library for Tabular Object Model.
            /// - Only these data sources are supported: SQL Server, Azure SQL Server,
            /// Azure Analysis Services, Azure Synapse, OData, SharePoint, Teradata, and
            /// SAP HANA. For other data sources, use the [Update
            /// Parameters](/rest/api/power-bi/datasets/update-parameters) API call.
            /// - Changing the data source type isn't supported.
            /// - Data sources that contain parameters in the connection string aren't
            /// supported.
            /// - Updating data sources that are part of merged or joined tables is only
            /// supported if you're using [enhanced dataset
            /// metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
            /// - For an Advanced Query that references multiple data sources, only the
            /// first data source will be updated. To overcome this limitation, define the
            /// data source as a parameter and use the [Update
            /// Parameters](/rest/api/power-bi/datasets/update-parameters) API call.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='updateDatasourcesRequest'>
            /// </param>
            public static void UpdateDatasources(this IDatasetsOperations operations, string datasetId, UpdateDatasourcesRequest updateDatasourcesRequest)
            {
                operations.UpdateDatasourcesAsync(datasetId, updateDatasourcesRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the data sources of the specified dataset from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!NOTE]
            /// &gt; We recommend using [enhanced dataset
            /// metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with
            /// this API call.
            ///
            /// &gt; [!IMPORTANT]
            /// &gt;
            /// &gt; - The original data source and the new data source must have the exact
            /// same schema.
            /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset
            /// to get data from the new data sources.
            /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes
            /// for the update data sources operation to complete, and then refresh the
            /// dataset.
            ///
            /// ## Permissions
            ///
            /// The user must be the dataset owner.
            ///
            /// ## Limitations
            ///
            /// - Datasets created using the public [XMLA
            /// endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported.
            /// To make changes to those data sources, the admin must use the Azure
            /// Analysis Services client library for Tabular Object Model.
            /// - Only these data sources are supported: SQL Server, Azure SQL Server,
            /// Azure Analysis Services, Azure Synapse, OData, SharePoint, Teradata, and
            /// SAP HANA. For other data sources, use the [Update
            /// Parameters](/rest/api/power-bi/datasets/update-parameters) API call.
            /// - Changing the data source type isn't supported.
            /// - Data sources that contain parameters in the connection string aren't
            /// supported.
            /// - Updating data sources that are part of merged or joined tables is only
            /// supported if you're using [enhanced dataset
            /// metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
            /// - For an Advanced Query that references multiple data sources, only the
            /// first data source will be updated. To overcome this limitation, define the
            /// data source as a parameter and use the [Update
            /// Parameters](/rest/api/power-bi/datasets/update-parameters) API call.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='updateDatasourcesRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateDatasourcesAsync(this IDatasetsOperations operations, string datasetId, UpdateDatasourcesRequest updateDatasourcesRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateDatasourcesWithHttpMessagesAsync(datasetId, updateDatasourcesRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates all connections for the specified dataset from **My workspace**.
            /// This API call only supports SQL DirectQuery datasets.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; This API call is deprecated and no longer supported. This API call
            /// isn't compatible with [enhanced dataset
            /// metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
            /// &gt;
            /// &gt; Instead use:
            /// &gt;
            /// &gt; - [Update Parameters](/rest/api/power-bi/datasets/update-parameters)
            /// to update connections for SQL, Azure Synapse, OData, and SharePoint data
            /// sources.
            /// &gt; - [Update Datasources](/rest/api/power-bi/datasets/update-datasources)
            /// to connections for other data sources.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='parameters'>
            /// The body
            /// </param>
            [System.Obsolete()]
            public static void SetAllDatasetConnections(this IDatasetsOperations operations, string datasetId, ConnectionDetails parameters)
            {
                operations.SetAllDatasetConnectionsAsync(datasetId, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates all connections for the specified dataset from **My workspace**.
            /// This API call only supports SQL DirectQuery datasets.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; This API call is deprecated and no longer supported. This API call
            /// isn't compatible with [enhanced dataset
            /// metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
            /// &gt;
            /// &gt; Instead use:
            /// &gt;
            /// &gt; - [Update Parameters](/rest/api/power-bi/datasets/update-parameters)
            /// to update connections for SQL, Azure Synapse, OData, and SharePoint data
            /// sources.
            /// &gt; - [Update Datasources](/rest/api/power-bi/datasets/update-datasources)
            /// to connections for other data sources.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='parameters'>
            /// The body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete()]
            public static async Task SetAllDatasetConnectionsAsync(this IDatasetsOperations operations, string datasetId, ConnectionDetails parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetAllDatasetConnectionsWithHttpMessagesAsync(datasetId, parameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Binds the specified dataset from **My workspace** to the specified gateway,
            /// optionally with a given set of data source IDs. If you don't supply a
            /// specific data source ID, the dataset will be bound to the first matching
            /// data source in the gateway.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; Add the API caller principal as a data source user on the gateway.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Only supports the on-premises data gateway
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='bindToGatewayRequest'>
            /// The bind to gateway request
            /// </param>
            public static void BindToGateway(this IDatasetsOperations operations, string datasetId, BindToGatewayRequest bindToGatewayRequest)
            {
                operations.BindToGatewayAsync(datasetId, bindToGatewayRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Binds the specified dataset from **My workspace** to the specified gateway,
            /// optionally with a given set of data source IDs. If you don't supply a
            /// specific data source ID, the dataset will be bound to the first matching
            /// data source in the gateway.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; Add the API caller principal as a data source user on the gateway.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Only supports the on-premises data gateway
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='bindToGatewayRequest'>
            /// The bind to gateway request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BindToGatewayAsync(this IDatasetsOperations operations, string datasetId, BindToGatewayRequest bindToGatewayRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BindToGatewayWithHttpMessagesAsync(datasetId, bindToGatewayRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of gateway data sources for the specified dataset from **My
            /// workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; This API call is deprecated, use [Get
            /// Datasources](/rest/api/power-bi/datasets/get-datasources) instead.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            public static GatewayDatasources GetGatewayDatasources(this IDatasetsOperations operations, string datasetId)
            {
                return operations.GetGatewayDatasourcesAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of gateway data sources for the specified dataset from **My
            /// workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; This API call is deprecated, use [Get
            /// Datasources](/rest/api/power-bi/datasets/get-datasources) instead.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GatewayDatasources> GetGatewayDatasourcesAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGatewayDatasourcesWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of gateways that the specified dataset from **My workspace**
            /// can be bound to.
            /// </summary>
            /// <remarks>
            ///
            /// This API call is only relevant to datasets that have at least one
            /// on-premises connection. For datasets with cloud-only connections, this API
            /// call returns an empty list.
            ///
            /// ## Required Scope
            ///
            /// Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            public static Gateways DiscoverGateways(this IDatasetsOperations operations, string datasetId)
            {
                return operations.DiscoverGatewaysAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of gateways that the specified dataset from **My workspace**
            /// can be bound to.
            /// </summary>
            /// <remarks>
            ///
            /// This API call is only relevant to datasets that have at least one
            /// on-premises connection. For datasets with cloud-only connections, this API
            /// call returns an empty list.
            ///
            /// ## Required Scope
            ///
            /// Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Gateways> DiscoverGatewaysAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DiscoverGatewaysWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Grants the specified user's permissions to the specified dataset.
            /// </summary>
            /// <remarks>
            ///
            /// When user permissions to a dataset have been recently updated, the new
            /// permissions might not be immediately available through API calls. To
            /// refresh user permissions, use the [Refresh User
            /// Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
            ///
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// ## Limitations
            ///
            /// - Only datasets in a [new workspace
            /// experience](/power-bi/collaborate-share/service-new-workspaces) workspace,
            /// that is to say a V2 workspace, are supported.
            /// - Adding permissions to service principals (app principalType) isn't
            /// supported
            /// - Caller must have ReadReshare permissions on the dataset.
            /// - This API call can't be used to grant dataset Write permission on the
            /// dataset
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            public static void PostDatasetUserInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, PostDatasetUserAccess userDetails)
            {
                operations.PostDatasetUserInGroupAsync(groupId, datasetId, userDetails).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Grants the specified user's permissions to the specified dataset.
            /// </summary>
            /// <remarks>
            ///
            /// When user permissions to a dataset have been recently updated, the new
            /// permissions might not be immediately available through API calls. To
            /// refresh user permissions, use the [Refresh User
            /// Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
            ///
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// ## Limitations
            ///
            /// - Only datasets in a [new workspace
            /// experience](/power-bi/collaborate-share/service-new-workspaces) workspace,
            /// that is to say a V2 workspace, are supported.
            /// - Adding permissions to service principals (app principalType) isn't
            /// supported
            /// - Caller must have ReadReshare permissions on the dataset.
            /// - This API call can't be used to grant dataset Write permission on the
            /// dataset
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostDatasetUserInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, PostDatasetUserAccess userDetails, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostDatasetUserInGroupWithHttpMessagesAsync(groupId, datasetId, userDetails, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the existing dataset permissions of the specified user to the
            /// specified permissions.
            /// </summary>
            /// <remarks>
            ///
            /// When user permissions to a dataset have been recently updated, the new
            /// permissions might not be immediately available through API calls. To
            /// refresh user permissions, use the [Refresh User
            /// Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
            /// This API call can be used to remove all the dataset permissions of the
            /// specified user by using `datasetUserAccessRight: None`
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// ## Permissions
            ///
            /// The permissions for this API call are listed in [Datasets
            /// permissions](/power-bi/developer/embedded/datasets-permissions).
            /// ## Limitations
            ///
            /// - Only datasets in a [new workspace
            /// experience](/power-bi/collaborate-share/service-new-workspaces) workspace,
            /// that is to say a V2 workspace, are supported.
            /// - Updating permissions to service principals (app principalType) isn't
            /// supported
            /// - Caller must have ReadWriteReshare permissions on the dataset. That is,
            /// folder admins, members and contributors with Reshare permissions, or
            /// dataset owners.
            /// - This API can't be used to add or remove *write* permission.
            /// - This API can't be used to remove folder-level inherited permissions. For
            /// folder admins and members, the ReadWriteReshareExplore permission on the
            /// folder's datasets is inherited. For folder contributors, the
            /// ReadWriteExplore permission on the folder's datasets is inherited. For
            /// folder viewers, the Read permission on the folder's datasets is inherited.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            public static void PutDatasetUserInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, DatasetUserAccess userDetails)
            {
                operations.PutDatasetUserInGroupAsync(groupId, datasetId, userDetails).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the existing dataset permissions of the specified user to the
            /// specified permissions.
            /// </summary>
            /// <remarks>
            ///
            /// When user permissions to a dataset have been recently updated, the new
            /// permissions might not be immediately available through API calls. To
            /// refresh user permissions, use the [Refresh User
            /// Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
            /// This API call can be used to remove all the dataset permissions of the
            /// specified user by using `datasetUserAccessRight: None`
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// ## Permissions
            ///
            /// The permissions for this API call are listed in [Datasets
            /// permissions](/power-bi/developer/embedded/datasets-permissions).
            /// ## Limitations
            ///
            /// - Only datasets in a [new workspace
            /// experience](/power-bi/collaborate-share/service-new-workspaces) workspace,
            /// that is to say a V2 workspace, are supported.
            /// - Updating permissions to service principals (app principalType) isn't
            /// supported
            /// - Caller must have ReadWriteReshare permissions on the dataset. That is,
            /// folder admins, members and contributors with Reshare permissions, or
            /// dataset owners.
            /// - This API can't be used to add or remove *write* permission.
            /// - This API can't be used to remove folder-level inherited permissions. For
            /// folder admins and members, the ReadWriteReshareExplore permission on the
            /// folder's datasets is inherited. For folder contributors, the
            /// ReadWriteExplore permission on the folder's datasets is inherited. For
            /// folder viewers, the Read permission on the folder's datasets is inherited.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutDatasetUserInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, DatasetUserAccess userDetails, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutDatasetUserInGroupWithHttpMessagesAsync(groupId, datasetId, userDetails, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of principals that have access to the specified dataset.
            /// </summary>
            /// <remarks>
            ///
            /// When user permissions to a dataset have been recently updated, the new
            /// permissions might not be immediately available through API calls. To
            /// refresh user permissions, use the [Refresh User
            /// Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
            ///
            /// ## Permissions
            ///
            /// The permissions for this API call are listed in [Datasets
            /// permissions](/power-bi/developer/embedded/datasets-permissions).
            ///
            /// ## Required Scope
            ///
            /// Dataset.Read.All
            /// ## Limitations
            ///
            /// - Only datasets in a [new workspace
            /// experience](/power-bi/collaborate-share/service-new-workspaces) workspace,
            /// that is to say a V2 workspace are supported.
            /// - Caller must have ReadWriteReshare permissions on the dataset. That is,
            /// folder admins, members and contributors with Reshare permissions, or
            /// dataset owners.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            public static DatasetUsersAccess GetDatasetUsersInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                return operations.GetDatasetUsersInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of principals that have access to the specified dataset.
            /// </summary>
            /// <remarks>
            ///
            /// When user permissions to a dataset have been recently updated, the new
            /// permissions might not be immediately available through API calls. To
            /// refresh user permissions, use the [Refresh User
            /// Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
            ///
            /// ## Permissions
            ///
            /// The permissions for this API call are listed in [Datasets
            /// permissions](/power-bi/developer/embedded/datasets-permissions).
            ///
            /// ## Required Scope
            ///
            /// Dataset.Read.All
            /// ## Limitations
            ///
            /// - Only datasets in a [new workspace
            /// experience](/power-bi/collaborate-share/service-new-workspaces) workspace,
            /// that is to say a V2 workspace are supported.
            /// - Caller must have ReadWriteReshare permissions on the dataset. That is,
            /// folder admins, members and contributors with Reshare permissions, or
            /// dataset owners.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetUsersAccess> GetDatasetUsersInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetUsersInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Grants the specified user's permissions to the specified dataset.
            /// </summary>
            /// <remarks>
            ///
            /// When user permissions to a dataset have been recently updated, the new
            /// permissions might not be immediately available through API calls. To
            /// refresh user permissions, use the [Refresh User
            /// Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
            ///
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// ## Limitations
            ///
            /// - Only datasets in a [new workspace
            /// experience](/power-bi/collaborate-share/service-new-workspaces) workspace,
            /// that is to say a V2 workspace, or **My workspace** are supported.
            /// - Adding permissions to service principals (app principalType) isn't
            /// supported
            /// - Caller must have ReadReshare permissions on the dataset.
            /// - This API call can't be used to grant dataset Write permission on the
            /// dataset
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            public static void PostDatasetUser(this IDatasetsOperations operations, string datasetId, PostDatasetUserAccess userDetails)
            {
                operations.PostDatasetUserAsync(datasetId, userDetails).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Grants the specified user's permissions to the specified dataset.
            /// </summary>
            /// <remarks>
            ///
            /// When user permissions to a dataset have been recently updated, the new
            /// permissions might not be immediately available through API calls. To
            /// refresh user permissions, use the [Refresh User
            /// Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
            ///
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// ## Limitations
            ///
            /// - Only datasets in a [new workspace
            /// experience](/power-bi/collaborate-share/service-new-workspaces) workspace,
            /// that is to say a V2 workspace, or **My workspace** are supported.
            /// - Adding permissions to service principals (app principalType) isn't
            /// supported
            /// - Caller must have ReadReshare permissions on the dataset.
            /// - This API call can't be used to grant dataset Write permission on the
            /// dataset
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostDatasetUserAsync(this IDatasetsOperations operations, string datasetId, PostDatasetUserAccess userDetails, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostDatasetUserWithHttpMessagesAsync(datasetId, userDetails, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the existing dataset permissions of the specified user to the
            /// specified permissions.
            /// </summary>
            /// <remarks>
            ///
            /// When user permissions to a dataset have been recently updated, the new
            /// permissions might not be immediately available through API calls. To
            /// refresh user permissions, use the [Refresh User
            /// Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
            /// This API call can be used to remove all the dataset permissions of the
            /// specified user by using `datasetUserAccessRight: None`
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// ## Permissions
            ///
            /// The permissions for this API call are listed in [Datasets
            /// permissions](/power-bi/developer/embedded/datasets-permissions).
            ///
            /// ## Limitations
            ///
            /// - Only datasets in a [new workspace
            /// experience](/power-bi/collaborate-share/service-new-workspaces) workspace,
            /// that is to say a V2 workspace, or **My workspace** are supported.
            /// - Updating permissions to service principals (app principalType) isn't
            /// supported
            /// - Caller must have ReadWriteReshare permissions on the dataset. That is,
            /// folder admins, members and contributors with Reshare permissions, or
            /// dataset owners.
            /// - This API can't be used to add or remove *write* permission.
            /// - This API can't be used to remove folder-level inherited permissions. For
            /// folder admins and members, the ReadWriteReshareExplore permission on the
            /// folder's datasets is inherited. For folder contributors, the
            /// ReadWriteExplore permission on the folder's datasets is inherited. For
            /// folder viewers, the Read permission on the folder's datasets is inherited.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            public static void PutDatasetUser(this IDatasetsOperations operations, string datasetId, DatasetUserAccess userDetails)
            {
                operations.PutDatasetUserAsync(datasetId, userDetails).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the existing dataset permissions of the specified user to the
            /// specified permissions.
            /// </summary>
            /// <remarks>
            ///
            /// When user permissions to a dataset have been recently updated, the new
            /// permissions might not be immediately available through API calls. To
            /// refresh user permissions, use the [Refresh User
            /// Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
            /// This API call can be used to remove all the dataset permissions of the
            /// specified user by using `datasetUserAccessRight: None`
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// ## Permissions
            ///
            /// The permissions for this API call are listed in [Datasets
            /// permissions](/power-bi/developer/embedded/datasets-permissions).
            ///
            /// ## Limitations
            ///
            /// - Only datasets in a [new workspace
            /// experience](/power-bi/collaborate-share/service-new-workspaces) workspace,
            /// that is to say a V2 workspace, or **My workspace** are supported.
            /// - Updating permissions to service principals (app principalType) isn't
            /// supported
            /// - Caller must have ReadWriteReshare permissions on the dataset. That is,
            /// folder admins, members and contributors with Reshare permissions, or
            /// dataset owners.
            /// - This API can't be used to add or remove *write* permission.
            /// - This API can't be used to remove folder-level inherited permissions. For
            /// folder admins and members, the ReadWriteReshareExplore permission on the
            /// folder's datasets is inherited. For folder contributors, the
            /// ReadWriteExplore permission on the folder's datasets is inherited. For
            /// folder viewers, the Read permission on the folder's datasets is inherited.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutDatasetUserAsync(this IDatasetsOperations operations, string datasetId, DatasetUserAccess userDetails, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutDatasetUserWithHttpMessagesAsync(datasetId, userDetails, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of principals that have access to the specified dataset.
            /// </summary>
            /// <remarks>
            ///
            /// When user permissions to a dataset have been recently updated, the new
            /// permissions might not be immediately available through API calls. To
            /// refresh user permissions, use the [Refresh User
            /// Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
            ///
            /// ## Permissions
            ///
            /// The permissions for this API call are listed in [Datasets
            /// permissions](/power-bi/developer/embedded/datasets-permissions).
            ///
            /// ## Required Scope
            ///
            /// Dataset.Read.All
            /// ## Limitations
            ///
            /// - Only datasets in a [new workspace
            /// experience](/power-bi/collaborate-share/service-new-workspaces) workspace,
            /// that is to say a V2 workspace, or **My workspace** are supported.
            /// - Caller must have ReadWriteReshare permissions on the dataset. That is,
            /// folder admins, members and contributors with Reshare permissions, or
            /// dataset owners.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            public static DatasetUsersAccess GetDatasetUsers(this IDatasetsOperations operations, string datasetId)
            {
                return operations.GetDatasetUsersAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of principals that have access to the specified dataset.
            /// </summary>
            /// <remarks>
            ///
            /// When user permissions to a dataset have been recently updated, the new
            /// permissions might not be immediately available through API calls. To
            /// refresh user permissions, use the [Refresh User
            /// Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
            ///
            /// ## Permissions
            ///
            /// The permissions for this API call are listed in [Datasets
            /// permissions](/power-bi/developer/embedded/datasets-permissions).
            ///
            /// ## Required Scope
            ///
            /// Dataset.Read.All
            /// ## Limitations
            ///
            /// - Only datasets in a [new workspace
            /// experience](/power-bi/collaborate-share/service-new-workspaces) workspace,
            /// that is to say a V2 workspace, or **My workspace** are supported.
            /// - Caller must have ReadWriteReshare permissions on the dataset. That is,
            /// folder admins, members and contributors with Reshare permissions, or
            /// dataset owners.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetUsersAccess> GetDatasetUsersAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetUsersWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of datasets from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            public static Datasets GetDatasetsInGroup(this IDatasetsOperations operations, System.Guid groupId)
            {
                return operations.GetDatasetsInGroupAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasets from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datasets> GetDatasetsInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetsInGroupWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new dataset in the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// This API call only supports **push datasets**.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='dataset'>
            /// Create dataset parameters
            /// </param>
            /// <param name='defaultRetentionPolicy'>
            /// The default retention policy. Possible values include: 'None', 'basicFIFO'
            /// </param>
            public static Dataset PostDatasetInGroup(this IDatasetsOperations operations, System.Guid groupId, CreateDatasetRequest dataset, DefaultRetentionPolicy? defaultRetentionPolicy = default(DefaultRetentionPolicy?))
            {
                return operations.PostDatasetInGroupAsync(groupId, dataset, defaultRetentionPolicy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new dataset in the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// This API call only supports **push datasets**.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='dataset'>
            /// Create dataset parameters
            /// </param>
            /// <param name='defaultRetentionPolicy'>
            /// The default retention policy. Possible values include: 'None', 'basicFIFO'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dataset> PostDatasetInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, CreateDatasetRequest dataset, DefaultRetentionPolicy? defaultRetentionPolicy = default(DefaultRetentionPolicy?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostDatasetInGroupWithHttpMessagesAsync(groupId, dataset, defaultRetentionPolicy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of upstream dataflows for datasets from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            public static DatasetToDataflowLinksResponse GetDatasetToDataflowsLinksInGroup(this IDatasetsOperations operations, System.Guid groupId)
            {
                return operations.GetDatasetToDataflowsLinksInGroupAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of upstream dataflows for datasets from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetToDataflowLinksResponse> GetDatasetToDataflowsLinksInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetToDataflowsLinksInGroupWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            public static Dataset GetDatasetInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                return operations.GetDatasetInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dataset> GetDatasetInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the properties for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// The user must be the dataset owner.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='updateDatasetRequest'>
            /// Update dataset request parameters
            /// </param>
            public static void UpdateDatasetInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, UpdateDatasetRequest updateDatasetRequest)
            {
                operations.UpdateDatasetInGroupAsync(groupId, datasetId, updateDatasetRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the properties for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// The user must be the dataset owner.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='updateDatasetRequest'>
            /// Update dataset request parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateDatasetInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, UpdateDatasetRequest updateDatasetRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateDatasetInGroupWithHttpMessagesAsync(groupId, datasetId, updateDatasetRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes the specified dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            public static void DeleteDatasetInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                operations.DeleteDatasetInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDatasetInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDatasetInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of tables within the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// ## Limitations
            ///
            /// This API call only supports **push datasets**.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            public static Tables GetTablesInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                return operations.GetTablesInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of tables within the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// ## Limitations
            ///
            /// This API call only supports **push datasets**.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tables> GetTablesInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTablesInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the metadata and schema for the specified table within the
            /// specified dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// This API call only supports **push datasets**.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            public static Table PutTableInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, string tableName, Table requestMessage)
            {
                return operations.PutTableInGroupAsync(groupId, datasetId, tableName, requestMessage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the metadata and schema for the specified table within the
            /// specified dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// This API call only supports **push datasets**.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Table> PutTableInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, string tableName, Table requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutTableInGroupWithHttpMessagesAsync(groupId, datasetId, tableName, requestMessage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds new data rows to the specified table within the specified dataset from
            /// the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - This API call only supports **push datasets**.
            /// - See [Power BI REST API
            /// limitations](/power-bi/developer/automation/api-rest-api-limitations).
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            public static void PostRowsInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, string tableName, PostRowsRequest requestMessage)
            {
                operations.PostRowsInGroupAsync(groupId, datasetId, tableName, requestMessage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds new data rows to the specified table within the specified dataset from
            /// the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - This API call only supports **push datasets**.
            /// - See [Power BI REST API
            /// limitations](/power-bi/developer/automation/api-rest-api-limitations).
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='requestMessage'>
            /// The request message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostRowsInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, string tableName, PostRowsRequest requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostRowsInGroupWithHttpMessagesAsync(groupId, datasetId, tableName, requestMessage, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes all rows from the specified table within the specified dataset from
            /// the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// This API call only supports **push datasets**.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            public static void DeleteRowsInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, string tableName)
            {
                operations.DeleteRowsInGroupAsync(groupId, datasetId, tableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes all rows from the specified table within the specified dataset from
            /// the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// This API call only supports **push datasets**.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='tableName'>
            /// The table name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteRowsInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteRowsInGroupWithHttpMessagesAsync(groupId, datasetId, tableName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the refresh history for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            ///
            /// ## Limitations
            ///
            /// OneDrive refresh history isn't returned.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='top'>
            /// The requested number of entries in the refresh history. If not provided,
            /// the default is all available entries.
            /// </param>
            public static Refreshes GetRefreshHistoryInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, int? top = default(int?))
            {
                return operations.GetRefreshHistoryInGroupAsync(groupId, datasetId, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the refresh history for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            ///
            /// ## Limitations
            ///
            /// OneDrive refresh history isn't returned.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='top'>
            /// The requested number of entries in the refresh history. If not provided,
            /// the default is all available entries.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Refreshes> GetRefreshHistoryInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRefreshHistoryInGroupWithHttpMessagesAsync(groupId, datasetId, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Triggers a refresh for the specified dataset from the specified workspace.
            /// An [asynchronous refresh](/power-bi/connect-data/asynchronous-refresh)
            /// would be triggered only if any request payload except `notifyOption` is
            /// set. Asynchronous refresh has a response header, `Location`, which includes
            /// the `refreshId` and could be used to [get refresh execution details in
            /// group](/rest/api/power-bi/datasets/get-refresh-execution-details-in-group)
            /// or [cancel refresh in
            /// group](/rest/api/power-bi/datasets/cancel-refresh-in-group).
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - For Shared capacities, a maximum of eight requests per day, which
            /// includes refreshes executed using a scheduled refresh.
            /// - For Premium capacities, the maximum requests per day is only limited by
            /// the available resources in the capacity. If available resources are
            /// overloaded, refreshes are throttled until the load is reduced. The refresh
            /// will fail if throttling exceeds 1 hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='datasetRefreshRequest'>
            /// </param>
            public static DatasetsRefreshDatasetInGroupHeaders RefreshDatasetInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, DatasetRefreshRequest datasetRefreshRequest = default(DatasetRefreshRequest))
            {
                return operations.RefreshDatasetInGroupAsync(groupId, datasetId, datasetRefreshRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Triggers a refresh for the specified dataset from the specified workspace.
            /// An [asynchronous refresh](/power-bi/connect-data/asynchronous-refresh)
            /// would be triggered only if any request payload except `notifyOption` is
            /// set. Asynchronous refresh has a response header, `Location`, which includes
            /// the `refreshId` and could be used to [get refresh execution details in
            /// group](/rest/api/power-bi/datasets/get-refresh-execution-details-in-group)
            /// or [cancel refresh in
            /// group](/rest/api/power-bi/datasets/cancel-refresh-in-group).
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - For Shared capacities, a maximum of eight requests per day, which
            /// includes refreshes executed using a scheduled refresh.
            /// - For Premium capacities, the maximum requests per day is only limited by
            /// the available resources in the capacity. If available resources are
            /// overloaded, refreshes are throttled until the load is reduced. The refresh
            /// will fail if throttling exceeds 1 hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='datasetRefreshRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetsRefreshDatasetInGroupHeaders> RefreshDatasetInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, DatasetRefreshRequest datasetRefreshRequest = default(DatasetRefreshRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RefreshDatasetInGroupWithHttpMessagesAsync(groupId, datasetId, datasetRefreshRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Returns execution details of an [asynchronous refresh
            /// operation](/power-bi/connect-data/asynchronous-refresh) for the specified
            /// dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='refreshId'>
            /// The refresh ID
            /// </param>
            public static DatasetRefreshDetail GetRefreshExecutionDetailsInGroup(this IDatasetsOperations operations, System.Guid groupId, System.Guid datasetId, System.Guid refreshId)
            {
                return operations.GetRefreshExecutionDetailsInGroupAsync(groupId, datasetId, refreshId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns execution details of an [asynchronous refresh
            /// operation](/power-bi/connect-data/asynchronous-refresh) for the specified
            /// dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='refreshId'>
            /// The refresh ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetRefreshDetail> GetRefreshExecutionDetailsInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, System.Guid datasetId, System.Guid refreshId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRefreshExecutionDetailsInGroupWithHttpMessagesAsync(groupId, datasetId, refreshId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels the specified [asynchronous refresh
            /// operation](/power-bi/connect-data/asynchronous-refresh) for the specified
            /// dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='refreshId'>
            /// The refresh ID
            /// </param>
            public static void CancelRefreshInGroup(this IDatasetsOperations operations, System.Guid groupId, System.Guid datasetId, System.Guid refreshId)
            {
                operations.CancelRefreshInGroupAsync(groupId, datasetId, refreshId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels the specified [asynchronous refresh
            /// operation](/power-bi/connect-data/asynchronous-refresh) for the specified
            /// dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='refreshId'>
            /// The refresh ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelRefreshInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, System.Guid datasetId, System.Guid refreshId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelRefreshInGroupWithHttpMessagesAsync(groupId, datasetId, refreshId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the refresh schedule for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            public static RefreshSchedule GetRefreshScheduleInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                return operations.GetRefreshScheduleInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the refresh schedule for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RefreshSchedule> GetRefreshScheduleInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRefreshScheduleInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the refresh schedule for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// A request that disables the refresh schedule should contain no other
            /// changes.
            ///
            /// At least one day must be specified. If no times are specified, then Power
            /// BI will use a default single time per day.
            ///
            /// ## Permissions
            ///
            /// - The user must be the dataset owner.
            /// - This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// The limit on the number of time slots per day depends on whether a
            /// [Premium](/power-bi/admin/service-premium-what-is) or Shared capacity is
            /// used.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='datasetModelRefreshScheduleRequest'>
            /// Update Refresh Schedule parameters, by specifying all or some of the
            /// parameters
            /// </param>
            public static void UpdateRefreshScheduleInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, RefreshScheduleRequest datasetModelRefreshScheduleRequest)
            {
                operations.UpdateRefreshScheduleInGroupAsync(groupId, datasetId, datasetModelRefreshScheduleRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the refresh schedule for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// A request that disables the refresh schedule should contain no other
            /// changes.
            ///
            /// At least one day must be specified. If no times are specified, then Power
            /// BI will use a default single time per day.
            ///
            /// ## Permissions
            ///
            /// - The user must be the dataset owner.
            /// - This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// The limit on the number of time slots per day depends on whether a
            /// [Premium](/power-bi/admin/service-premium-what-is) or Shared capacity is
            /// used.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='datasetModelRefreshScheduleRequest'>
            /// Update Refresh Schedule parameters, by specifying all or some of the
            /// parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateRefreshScheduleInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, RefreshScheduleRequest datasetModelRefreshScheduleRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateRefreshScheduleInGroupWithHttpMessagesAsync(groupId, datasetId, datasetModelRefreshScheduleRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the refresh schedule for a specified
            /// [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or
            /// [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections)
            /// dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            public static DirectQueryRefreshSchedule GetDirectQueryRefreshScheduleInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                return operations.GetDirectQueryRefreshScheduleInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the refresh schedule for a specified
            /// [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or
            /// [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections)
            /// dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DirectQueryRefreshSchedule> GetDirectQueryRefreshScheduleInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDirectQueryRefreshScheduleInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the refresh schedule for a specified
            /// [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or
            /// [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections)
            /// dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// A request should contain either a set of days and times *or* a valid
            /// frequency, but not both. If you choose a set of days without specifying any
            /// times, then Power BI will use a default single time per day. Setting the
            /// frequency will automatically overwrite the days and times setting.
            ///
            /// ## Permissions
            ///
            /// - The user must be the dataset owner.
            /// - This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='datasetDQRefreshScheduleRequest'>
            /// Patch DirectQuery or LiveConnection Refresh Schedule parameters, by
            /// specifying all or some of the parameters
            /// </param>
            public static void UpdateDirectQueryRefreshScheduleInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest)
            {
                operations.UpdateDirectQueryRefreshScheduleInGroupAsync(groupId, datasetId, datasetDQRefreshScheduleRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the refresh schedule for a specified
            /// [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or
            /// [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections)
            /// dataset from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// A request should contain either a set of days and times *or* a valid
            /// frequency, but not both. If you choose a set of days without specifying any
            /// times, then Power BI will use a default single time per day. Setting the
            /// frequency will automatically overwrite the days and times setting.
            ///
            /// ## Permissions
            ///
            /// - The user must be the dataset owner.
            /// - This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='datasetDQRefreshScheduleRequest'>
            /// Patch DirectQuery or LiveConnection Refresh Schedule parameters, by
            /// specifying all or some of the parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateDirectQueryRefreshScheduleInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateDirectQueryRefreshScheduleInGroupWithHttpMessagesAsync(groupId, datasetId, datasetDQRefreshScheduleRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of parameters for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Datasets with SQL, Oracle, Teradata, and SAP HANA
            /// [DirectQuery](/power-bi/connect-data/desktop-directquery-about) connections
            /// aren't supported.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            public static MashupParameters GetParametersInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                return operations.GetParametersInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of parameters for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Datasets with SQL, Oracle, Teradata, and SAP HANA
            /// [DirectQuery](/power-bi/connect-data/desktop-directquery-about) connections
            /// aren't supported.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MashupParameters> GetParametersInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetParametersInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the parameters values for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!NOTE]
            /// &gt; We recommend using [enhanced dataset
            /// metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with
            /// this API call.
            ///
            /// &gt; [!IMPORTANT]
            /// &gt;
            /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset
            /// to apply the new parameter values.
            /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes
            /// for the update data sources operation to complete, and then refresh the
            /// dataset.
            ///
            /// ## Permissions
            ///
            /// - The user must be the dataset owner.
            /// - This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - Datasets created using the public [XMLA
            /// endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported.
            /// To make changes to those data sources, the admin must use the Azure
            /// Analysis Services client library for Tabular Object Model.
            /// - [DirectQuery](/power-bi/connect-data/desktop-directquery-about)
            /// connections are only supported with [enhanced dataset
            /// metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
            /// - Datasets with Azure Analysis Services live connections aren't supported.
            /// - Maximum of 100 parameters per request.
            /// - All specified parameters must exist in the dataset.
            /// - Parameters values should be of the expected type.
            /// - The parameter list can't be empty or include duplicate parameters.
            /// - Parameters names are case-sensitive.
            /// - Parameter `IsRequired` must have a non-empty value.
            /// - The parameter types `Any` and `Binary` can't be updated.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='updateMashupParametersRequest'>
            /// </param>
            public static void UpdateParametersInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, UpdateMashupParametersRequest updateMashupParametersRequest)
            {
                operations.UpdateParametersInGroupAsync(groupId, datasetId, updateMashupParametersRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the parameters values for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!NOTE]
            /// &gt; We recommend using [enhanced dataset
            /// metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with
            /// this API call.
            ///
            /// &gt; [!IMPORTANT]
            /// &gt;
            /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset
            /// to apply the new parameter values.
            /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes
            /// for the update data sources operation to complete, and then refresh the
            /// dataset.
            ///
            /// ## Permissions
            ///
            /// - The user must be the dataset owner.
            /// - This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - Datasets created using the public [XMLA
            /// endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported.
            /// To make changes to those data sources, the admin must use the Azure
            /// Analysis Services client library for Tabular Object Model.
            /// - [DirectQuery](/power-bi/connect-data/desktop-directquery-about)
            /// connections are only supported with [enhanced dataset
            /// metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
            /// - Datasets with Azure Analysis Services live connections aren't supported.
            /// - Maximum of 100 parameters per request.
            /// - All specified parameters must exist in the dataset.
            /// - Parameters values should be of the expected type.
            /// - The parameter list can't be empty or include duplicate parameters.
            /// - Parameters names are case-sensitive.
            /// - Parameter `IsRequired` must have a non-empty value.
            /// - The parameter types `Any` and `Binary` can't be updated.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='updateMashupParametersRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateParametersInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, UpdateMashupParametersRequest updateMashupParametersRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateParametersInGroupWithHttpMessagesAsync(groupId, datasetId, updateMashupParametersRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of data sources for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            public static Datasources GetDatasourcesInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                return operations.GetDatasourcesInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of data sources for the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datasources> GetDatasourcesInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasourcesInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the data sources of the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!NOTE]
            /// &gt; We recommend using [enhanced dataset
            /// metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with
            /// this API call.
            ///
            /// &gt; [!IMPORTANT]
            /// &gt;
            /// &gt; - The original data source and the new data source must have the exact
            /// same schema.
            /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset
            /// to get data from the new data sources.
            /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes
            /// for the update data sources operation to complete, and then refresh the
            /// dataset.
            ///
            /// ## Permissions
            ///
            /// - The user must be the dataset owner.
            /// - This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - Datasets created using the public [XMLA
            /// endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported.
            /// To make changes to those data sources, the admin must use the Azure
            /// Analysis Services client library for Tabular Object Model.
            /// - Only these data sources are supported: SQL Server, Azure SQL Server,
            /// Azure Analysis Services, Azure Synapse, OData, SharePoint, Teradata, and
            /// SAP HANA. For other data sources, use the [Update Parameters In
            /// Group](/rest/api/power-bi/datasets/update-parameters-in-group) API call.
            /// - Changing the data source type isn't supported.
            /// - Data sources that contain parameters in the connection string aren't
            /// supported.
            /// - Updating data sources that are part of merged or joined tables is only
            /// supported if you're using [enhanced dataset
            /// metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
            /// - For an Advanced Query that reference multiple data sources, only the
            /// first data source will be updated. To overcome this limitation, define the
            /// data source as a parameter and use the [Update Parameters In
            /// Group](/rest/api/power-bi/datasets/update-parameters-in-group) API call.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='updateDatasourcesRequest'>
            /// </param>
            public static void UpdateDatasourcesInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, UpdateDatasourcesRequest updateDatasourcesRequest)
            {
                operations.UpdateDatasourcesInGroupAsync(groupId, datasetId, updateDatasourcesRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the data sources of the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!NOTE]
            /// &gt; We recommend using [enhanced dataset
            /// metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with
            /// this API call.
            ///
            /// &gt; [!IMPORTANT]
            /// &gt;
            /// &gt; - The original data source and the new data source must have the exact
            /// same schema.
            /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset
            /// to get data from the new data sources.
            /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes
            /// for the update data sources operation to complete, and then refresh the
            /// dataset.
            ///
            /// ## Permissions
            ///
            /// - The user must be the dataset owner.
            /// - This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - Datasets created using the public [XMLA
            /// endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported.
            /// To make changes to those data sources, the admin must use the Azure
            /// Analysis Services client library for Tabular Object Model.
            /// - Only these data sources are supported: SQL Server, Azure SQL Server,
            /// Azure Analysis Services, Azure Synapse, OData, SharePoint, Teradata, and
            /// SAP HANA. For other data sources, use the [Update Parameters In
            /// Group](/rest/api/power-bi/datasets/update-parameters-in-group) API call.
            /// - Changing the data source type isn't supported.
            /// - Data sources that contain parameters in the connection string aren't
            /// supported.
            /// - Updating data sources that are part of merged or joined tables is only
            /// supported if you're using [enhanced dataset
            /// metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
            /// - For an Advanced Query that reference multiple data sources, only the
            /// first data source will be updated. To overcome this limitation, define the
            /// data source as a parameter and use the [Update Parameters In
            /// Group](/rest/api/power-bi/datasets/update-parameters-in-group) API call.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='updateDatasourcesRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateDatasourcesInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, UpdateDatasourcesRequest updateDatasourcesRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateDatasourcesInGroupWithHttpMessagesAsync(groupId, datasetId, updateDatasourcesRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates all connections for the specified dataset from the specified
            /// workspace. This API call only supports SQL DirectQuery datasets.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; This API call is deprecated and no longer supported. This API call
            /// isn't compatible with [enhanced dataset
            /// metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
            /// &gt;
            /// &gt; Instead use:
            /// &gt;
            /// &gt; - [Update Parameters In
            /// Group](/rest/api/power-bi/datasets/update-parameters-in-group) to update
            /// connections for SQL, Azure Synapse, OData, and SharePoint data sources.
            /// &gt; - [Update Datasources In
            /// Group](/rest/api/power-bi/datasets/update-datasources-in-group) to
            /// connections for other data sources.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Supports SQL DirectQuery datasets.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='parameters'>
            /// The body
            /// </param>
            [System.Obsolete()]
            public static void SetAllDatasetConnectionsInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, ConnectionDetails parameters)
            {
                operations.SetAllDatasetConnectionsInGroupAsync(groupId, datasetId, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates all connections for the specified dataset from the specified
            /// workspace. This API call only supports SQL DirectQuery datasets.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; This API call is deprecated and no longer supported. This API call
            /// isn't compatible with [enhanced dataset
            /// metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
            /// &gt;
            /// &gt; Instead use:
            /// &gt;
            /// &gt; - [Update Parameters In
            /// Group](/rest/api/power-bi/datasets/update-parameters-in-group) to update
            /// connections for SQL, Azure Synapse, OData, and SharePoint data sources.
            /// &gt; - [Update Datasources In
            /// Group](/rest/api/power-bi/datasets/update-datasources-in-group) to
            /// connections for other data sources.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Supports SQL DirectQuery datasets.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='parameters'>
            /// The body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete()]
            public static async Task SetAllDatasetConnectionsInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, ConnectionDetails parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetAllDatasetConnectionsInGroupWithHttpMessagesAsync(groupId, datasetId, parameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Binds the specified dataset from the specified workspace to the specified
            /// gateway, optionally with a given set of data source IDs. If you don't
            /// supply a specific data source ID, the dataset will be bound to the first
            /// matching data source in the gateway.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; Add the API caller principal as a data source user on the gateway.
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Only supports the on-premises data gateway
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='bindToGatewayRequest'>
            /// The bind to gateway request
            /// </param>
            public static void BindToGatewayInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, BindToGatewayRequest bindToGatewayRequest)
            {
                operations.BindToGatewayInGroupAsync(groupId, datasetId, bindToGatewayRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Binds the specified dataset from the specified workspace to the specified
            /// gateway, optionally with a given set of data source IDs. If you don't
            /// supply a specific data source ID, the dataset will be bound to the first
            /// matching data source in the gateway.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; Add the API caller principal as a data source user on the gateway.
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Only supports the on-premises data gateway
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='bindToGatewayRequest'>
            /// The bind to gateway request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BindToGatewayInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, BindToGatewayRequest bindToGatewayRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BindToGatewayInGroupWithHttpMessagesAsync(groupId, datasetId, bindToGatewayRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of gateway data sources for the specified dataset from the
            /// specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; This API call is deprecated, use [Get Datasources In
            /// Group](/rest/api/power-bi/datasets/get-datasources-in-group) instead.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            public static GatewayDatasources GetGatewayDatasourcesInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                return operations.GetGatewayDatasourcesInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of gateway data sources for the specified dataset from the
            /// specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; This API call is deprecated, use [Get Datasources In
            /// Group](/rest/api/power-bi/datasets/get-datasources-in-group) instead.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GatewayDatasources> GetGatewayDatasourcesInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGatewayDatasourcesInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of gateways that the specified dataset from the specified
            /// workspace can be bound to.
            /// </summary>
            /// <remarks>
            ///
            /// This API call is only relevant to datasets that have at least one
            /// on-premises connection. For datasets with cloud-only connections, this API
            /// call returns an empty list.
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            public static Gateways DiscoverGatewaysInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                return operations.DiscoverGatewaysInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of gateways that the specified dataset from the specified
            /// workspace can be bound to.
            /// </summary>
            /// <remarks>
            ///
            /// This API call is only relevant to datasets that have at least one
            /// on-premises connection. For datasets with cloud-only connections, this API
            /// call returns an empty list.
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Gateways> DiscoverGatewaysInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DiscoverGatewaysInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Transfers ownership over the specified dataset to the current authorized
            /// user.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            public static void TakeOverInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId)
            {
                operations.TakeOverInGroupAsync(groupId, datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Transfers ownership over the specified dataset to the current authorized
            /// user.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task TakeOverInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.TakeOverInGroupWithHttpMessagesAsync(groupId, datasetId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Generates an embed token based on the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!NOTE]
            /// &gt; An embed token can be used to [embed
            /// Q&amp;A](/power-bi/developer/qanda) within your application.
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; This API call is only relevant to the [embed for your
            /// customers](/power-bi/developer/embed-sample-for-customers) scenario. To
            /// learn more about using this API, see [Considerations when generating an
            /// embed token](/power-bi/developer/embedded/generate-embed-token).
            ///
            /// ## Permissions
            ///
            /// - When using a service principal for authentication, refer to [Embed Power
            /// BI content with service
            /// principal](/power-bi/developer/embed-service-principal) and [Considerations
            /// and
            /// limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
            /// - This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            public static EmbedToken GenerateTokenInGroup(this IDatasetsOperations operations, System.Guid groupId, string datasetId, GenerateTokenRequest requestParameters)
            {
                return operations.GenerateTokenInGroupAsync(groupId, datasetId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generates an embed token based on the specified dataset from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!NOTE]
            /// &gt; An embed token can be used to [embed
            /// Q&amp;A](/power-bi/developer/qanda) within your application.
            ///
            /// &gt; [!IMPORTANT]
            /// &gt; This API call is only relevant to the [embed for your
            /// customers](/power-bi/developer/embed-sample-for-customers) scenario. To
            /// learn more about using this API, see [Considerations when generating an
            /// embed token](/power-bi/developer/embedded/generate-embed-token).
            ///
            /// ## Permissions
            ///
            /// - When using a service principal for authentication, refer to [Embed Power
            /// BI content with service
            /// principal](/power-bi/developer/embed-service-principal) and [Considerations
            /// and
            /// limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
            /// - This API call can be called by a service principal profile.
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='requestParameters'>
            /// Generate token parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbedToken> GenerateTokenInGroupAsync(this IDatasetsOperations operations, System.Guid groupId, string datasetId, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateTokenInGroupWithHttpMessagesAsync(groupId, datasetId, requestParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of datasets for the organization.
            /// </summary>
            /// <remarks>
            ///
            /// Each request takes two seconds to process, during which time other requests
            /// are queued.
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            public static AdminDatasets GetDatasetsAsAdmin(this IDatasetsOperations operations, string filter = default(string), int? top = default(int?), int? skip = default(int?))
            {
                return operations.GetDatasetsAsAdminAsync(filter, top, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasets for the organization.
            /// </summary>
            /// <remarks>
            ///
            /// Each request takes two seconds to process, during which time other requests
            /// are queued.
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AdminDatasets> GetDatasetsAsAdminAsync(this IDatasetsOperations operations, string filter = default(string), int? top = default(int?), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetsAsAdminWithHttpMessagesAsync(filter, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of data sources for the specified dataset.
            /// </summary>
            /// <remarks>
            ///
            /// Each request takes 0.5 seconds to process, during which time other requests
            /// are queued.
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            public static Datasources GetDatasourcesAsAdmin(this IDatasetsOperations operations, string datasetId)
            {
                return operations.GetDatasourcesAsAdminAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of data sources for the specified dataset.
            /// </summary>
            /// <remarks>
            ///
            /// Each request takes 0.5 seconds to process, during which time other requests
            /// are queued.
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datasources> GetDatasourcesAsAdminAsync(this IDatasetsOperations operations, string datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasourcesAsAdminWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of users that have access to the specified dataset.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            /// - The permissions for this API call are listed in [Datasets
            /// permissions](/power-bi/developer/embedded/datasets-permissions).
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            public static DatasetUsers GetDatasetUsersAsAdmin(this IDatasetsOperations operations, System.Guid datasetId)
            {
                return operations.GetDatasetUsersAsAdminAsync(datasetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of users that have access to the specified dataset.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            /// - The permissions for this API call are listed in [Datasets
            /// permissions](/power-bi/developer/embedded/datasets-permissions).
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The dataset ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetUsers> GetDatasetUsersAsAdminAsync(this IDatasetsOperations operations, System.Guid datasetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetUsersAsAdminWithHttpMessagesAsync(datasetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of datasets from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline
            /// </param>
            public static AdminDatasets GetDatasetsInGroupAsAdmin(this IDatasetsOperations operations, System.Guid groupId, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string))
            {
                return operations.GetDatasetsInGroupAsAdminAsync(groupId, filter, top, skip, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasets from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AdminDatasets> GetDatasetsInGroupAsAdminAsync(this IDatasetsOperations operations, System.Guid groupId, string filter = default(string), int? top = default(int?), int? skip = default(int?), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetsInGroupAsAdminWithHttpMessagesAsync(groupId, filter, top, skip, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of upstream dataflows for datasets from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            public static DatasetToDataflowLinksResponse GetDatasetToDataflowsLinksInGroupAsAdmin(this IDatasetsOperations operations, System.Guid groupId)
            {
                return operations.GetDatasetToDataflowsLinksInGroupAsAdminAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of upstream dataflows for datasets from the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DatasetToDataflowLinksResponse> GetDatasetToDataflowsLinksInGroupAsAdminAsync(this IDatasetsOperations operations, System.Guid groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDatasetToDataflowsLinksInGroupAsAdminWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
