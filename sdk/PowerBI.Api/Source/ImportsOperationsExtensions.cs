// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ImportsOperations.
    /// </summary>
    public static partial class ImportsOperationsExtensions
    {
            /// <summary>
            /// Returns a list of imports from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Imports GetImports(this IImportsOperations operations)
            {
                return operations.GetImportsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of imports from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Imports> GetImportsAsync(this IImportsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetImportsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates new content in **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!NOTE]
            /// &gt; Supported content:
            /// &gt;
            /// &gt; - **.pbix** (Power BI Desktop reports)
            /// &gt; - **.json** (JSON files)
            /// &gt; - **.xlsx** (Excel files)
            /// &gt; - **.rdl** (SQL Server Report Definition Language files)
            ///
            /// - To import a file, specify the content type **multipart/form-data** in the
            /// request headers and encode the file as [form
            /// data](https://www.w3.org/TR/html401/interact/forms.html) in the request
            /// body.
            /// - To import an **.rdl** file, include the file extension in the name
            /// specified by `datasetDisplayName`, as described in [URI
            /// parameters](/rest/api/power-bi/imports/post-import-in-group#uri-parameters).
            /// - To import an **.xlsx** file from OneDrive for Business, include the
            /// content type **application/json** in the request headers. Include
            /// [ImportInfo](/rest/api/power-bi/imports/post-import-in-group#importinfo)
            /// with `filePath` set to the .xlsx file path in the request body.
            /// - To import large **.pbix** files that are between 1 GB and 10 GB in size,
            /// see [Create Temporary Upload
            /// Location](/rest/api/power-bi/imports/create-temporary-upload-location).
            /// This is only supported for Premium capacity workspaces.
            /// - To create a dataflow from a model.json file, set `datasetDisplayName` to
            /// *model.json*, as described in [URI
            /// parameters](/rest/api/power-bi/imports/post-import-in-group#uri-parameters).
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - Dataflows with service principal aren't supported.
            /// - Importing a **.pbix** file from OneDrive isn't supported.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetDisplayName'>
            /// The display name of the dataset, should include file extension. Not
            /// supported when importing from OneDrive for Business.
            /// </param>
            /// <param name='importInfo'>
            /// The import to post
            /// </param>
            /// <param name='nameConflict'>
            /// Determines what to do if a dataset with the same name already exists.
            /// Default value is 'Ignore'.&lt;br/&gt;Only Abort and Overwrite are supported
            /// with Rdl files. Possible values include: 'Ignore', 'Abort', 'Overwrite',
            /// 'CreateOrOverwrite', 'GenerateUniqueName'
            /// </param>
            /// <param name='skipReport'>
            /// Determines whether to skip report import, if specified value must be
            /// 'true'. Only supported for PBIX files.
            /// </param>
            /// <param name='overrideReportLabel'>
            /// Determines whether to override existing label on report during republish of
            /// PBIX file, service default value is true.
            /// </param>
            /// <param name='overrideModelLabel'>
            /// Determines whether to override existing label on model during republish of
            /// PBIX file, service default value is true.
            /// </param>
            public static Import PostImport(this IImportsOperations operations, string datasetDisplayName, ImportInfo importInfo, ImportConflictHandlerMode? nameConflict = default(ImportConflictHandlerMode?), bool? skipReport = default(bool?), bool? overrideReportLabel = default(bool?), bool? overrideModelLabel = default(bool?))
            {
                return operations.PostImportAsync(datasetDisplayName, importInfo, nameConflict, skipReport, overrideReportLabel, overrideModelLabel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates new content in **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!NOTE]
            /// &gt; Supported content:
            /// &gt;
            /// &gt; - **.pbix** (Power BI Desktop reports)
            /// &gt; - **.json** (JSON files)
            /// &gt; - **.xlsx** (Excel files)
            /// &gt; - **.rdl** (SQL Server Report Definition Language files)
            ///
            /// - To import a file, specify the content type **multipart/form-data** in the
            /// request headers and encode the file as [form
            /// data](https://www.w3.org/TR/html401/interact/forms.html) in the request
            /// body.
            /// - To import an **.rdl** file, include the file extension in the name
            /// specified by `datasetDisplayName`, as described in [URI
            /// parameters](/rest/api/power-bi/imports/post-import-in-group#uri-parameters).
            /// - To import an **.xlsx** file from OneDrive for Business, include the
            /// content type **application/json** in the request headers. Include
            /// [ImportInfo](/rest/api/power-bi/imports/post-import-in-group#importinfo)
            /// with `filePath` set to the .xlsx file path in the request body.
            /// - To import large **.pbix** files that are between 1 GB and 10 GB in size,
            /// see [Create Temporary Upload
            /// Location](/rest/api/power-bi/imports/create-temporary-upload-location).
            /// This is only supported for Premium capacity workspaces.
            /// - To create a dataflow from a model.json file, set `datasetDisplayName` to
            /// *model.json*, as described in [URI
            /// parameters](/rest/api/power-bi/imports/post-import-in-group#uri-parameters).
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - Dataflows with service principal aren't supported.
            /// - Importing a **.pbix** file from OneDrive isn't supported.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetDisplayName'>
            /// The display name of the dataset, should include file extension. Not
            /// supported when importing from OneDrive for Business.
            /// </param>
            /// <param name='importInfo'>
            /// The import to post
            /// </param>
            /// <param name='nameConflict'>
            /// Determines what to do if a dataset with the same name already exists.
            /// Default value is 'Ignore'.&lt;br/&gt;Only Abort and Overwrite are supported
            /// with Rdl files. Possible values include: 'Ignore', 'Abort', 'Overwrite',
            /// 'CreateOrOverwrite', 'GenerateUniqueName'
            /// </param>
            /// <param name='skipReport'>
            /// Determines whether to skip report import, if specified value must be
            /// 'true'. Only supported for PBIX files.
            /// </param>
            /// <param name='overrideReportLabel'>
            /// Determines whether to override existing label on report during republish of
            /// PBIX file, service default value is true.
            /// </param>
            /// <param name='overrideModelLabel'>
            /// Determines whether to override existing label on model during republish of
            /// PBIX file, service default value is true.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Import> PostImportAsync(this IImportsOperations operations, string datasetDisplayName, ImportInfo importInfo, ImportConflictHandlerMode? nameConflict = default(ImportConflictHandlerMode?), bool? skipReport = default(bool?), bool? overrideReportLabel = default(bool?), bool? overrideModelLabel = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostImportWithHttpMessagesAsync(datasetDisplayName, importInfo, nameConflict, skipReport, overrideReportLabel, overrideModelLabel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified import from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='importId'>
            /// The import ID
            /// </param>
            public static Import GetImport(this IImportsOperations operations, System.Guid importId)
            {
                return operations.GetImportAsync(importId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified import from **My workspace**.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='importId'>
            /// The import ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Import> GetImportAsync(this IImportsOperations operations, System.Guid importId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetImportWithHttpMessagesAsync(importId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a temporary blob storage upload location for importing large .pbix
            /// files that are between 1 GB and 10 GB in size.
            /// </summary>
            /// <remarks>
            ///
            /// To import large .pbix files:
            ///
            /// 1. Create a temporary upload location using this API call.
            /// 1. Upload the .pbix files using the *shared access signature* URL from the
            /// API call response.
            /// 1. Call [Post Import In Group](/rest/api/power-bi/imports/post-import),
            /// specifying the *shared access signature* URL in the `fileUrl` parameter of
            /// the [request body](/rest/api/power-bi/imports/post-import#request-body).
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Importing large .pbix files between 1 GB and 10 GB in size is only
            /// available for Premium capacity workspaces.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static TemporaryUploadLocation CreateTemporaryUploadLocation(this IImportsOperations operations)
            {
                return operations.CreateTemporaryUploadLocationAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a temporary blob storage upload location for importing large .pbix
            /// files that are between 1 GB and 10 GB in size.
            /// </summary>
            /// <remarks>
            ///
            /// To import large .pbix files:
            ///
            /// 1. Create a temporary upload location using this API call.
            /// 1. Upload the .pbix files using the *shared access signature* URL from the
            /// API call response.
            /// 1. Call [Post Import In Group](/rest/api/power-bi/imports/post-import),
            /// specifying the *shared access signature* URL in the `fileUrl` parameter of
            /// the [request body](/rest/api/power-bi/imports/post-import#request-body).
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Importing large .pbix files between 1 GB and 10 GB in size is only
            /// available for Premium capacity workspaces.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TemporaryUploadLocation> CreateTemporaryUploadLocationAsync(this IImportsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTemporaryUploadLocationWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of imports from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            ///
            /// ## Limitations
            ///
            /// Importing .pbix files from OneDrive isn't supported.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            public static Imports GetImportsInGroup(this IImportsOperations operations, System.Guid groupId)
            {
                return operations.GetImportsInGroupAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of imports from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            ///
            /// ## Limitations
            ///
            /// Importing .pbix files from OneDrive isn't supported.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Imports> GetImportsInGroupAsync(this IImportsOperations operations, System.Guid groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetImportsInGroupWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates new content in the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!NOTE]
            /// &gt; Supported content:
            /// &gt;
            /// &gt; - **.pbix** (Power BI Desktop reports)
            /// &gt; - **.json** (JSON files)
            /// &gt; - **.xlsx** (Excel files)
            /// &gt; - **.rdl** (SQL Server Report Definition Language files)
            ///
            /// - To import a file, specify the content type **multipart/form-data** in the
            /// request headers and encode the file as [form
            /// data](https://www.w3.org/TR/html401/interact/forms.html) in the request
            /// body.
            /// - To import an **.rdl** file, include the file extension in the name
            /// specified by `datasetDisplayName`, as described in [URI
            /// parameters](/rest/api/power-bi/imports/post-import-in-group#uri-parameters).
            /// - To import an **.xlsx** file from OneDrive for Business, include the
            /// content type **application/json** in the request headers. Include
            /// [ImportInfo](/rest/api/power-bi/imports/post-import-in-group#importinfo)
            /// with `filePath` set to the .xlsx file path in the request body.
            /// - To import large **.pbix** files that are between 1 GB and 10 GB in size,
            /// see [Create Temporary Upload Location In
            /// Group](/rest/api/power-bi/imports/create-temporary-upload-location-in-group).
            /// This is only supported for Premium capacity workspaces.
            /// - To create a dataflow from a model.json file, set `datasetDisplayName` to
            /// *model.json*, as described in [URI
            /// parameters](/rest/api/power-bi/imports/post-import-in-group#uri-parameters).
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - Dataflows with service principal aren't supported.
            /// - Importing a **.pbix** file from OneDrive isn't supported.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetDisplayName'>
            /// The display name of the dataset should include file extension. Not
            /// supported when importing from OneDrive for Business. For importing or
            /// creating dataflows, this parameter should be hardcoded to model.json.
            /// </param>
            /// <param name='importInfo'>
            /// The import to post
            /// </param>
            /// <param name='nameConflict'>
            /// Determines what to do if a dataset with the same name already exists.
            /// Default value is 'Ignore'.&lt;br/&gt;Only Abort and Overwrite are supported
            /// with Rdl files.&lt;br/&gt;Only Abort and GenerateUniqueName are supported
            /// with dataflow model.json files. Possible values include: 'Ignore', 'Abort',
            /// 'Overwrite', 'CreateOrOverwrite', 'GenerateUniqueName'
            /// </param>
            /// <param name='skipReport'>
            /// Determines whether to skip report import, if specified value must be
            /// 'true'. Only supported for PBIX files.
            /// </param>
            /// <param name='overrideReportLabel'>
            /// Determines whether to override existing label on report during republish of
            /// PBIX file, service default value is true.
            /// </param>
            /// <param name='overrideModelLabel'>
            /// Determines whether to override existing label on model during republish of
            /// PBIX file, service default value is true.
            /// </param>
            public static Import PostImportInGroup(this IImportsOperations operations, System.Guid groupId, string datasetDisplayName, ImportInfo importInfo, ImportConflictHandlerMode? nameConflict = default(ImportConflictHandlerMode?), bool? skipReport = default(bool?), bool? overrideReportLabel = default(bool?), bool? overrideModelLabel = default(bool?))
            {
                return operations.PostImportInGroupAsync(groupId, datasetDisplayName, importInfo, nameConflict, skipReport, overrideReportLabel, overrideModelLabel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates new content in the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// &gt; [!NOTE]
            /// &gt; Supported content:
            /// &gt;
            /// &gt; - **.pbix** (Power BI Desktop reports)
            /// &gt; - **.json** (JSON files)
            /// &gt; - **.xlsx** (Excel files)
            /// &gt; - **.rdl** (SQL Server Report Definition Language files)
            ///
            /// - To import a file, specify the content type **multipart/form-data** in the
            /// request headers and encode the file as [form
            /// data](https://www.w3.org/TR/html401/interact/forms.html) in the request
            /// body.
            /// - To import an **.rdl** file, include the file extension in the name
            /// specified by `datasetDisplayName`, as described in [URI
            /// parameters](/rest/api/power-bi/imports/post-import-in-group#uri-parameters).
            /// - To import an **.xlsx** file from OneDrive for Business, include the
            /// content type **application/json** in the request headers. Include
            /// [ImportInfo](/rest/api/power-bi/imports/post-import-in-group#importinfo)
            /// with `filePath` set to the .xlsx file path in the request body.
            /// - To import large **.pbix** files that are between 1 GB and 10 GB in size,
            /// see [Create Temporary Upload Location In
            /// Group](/rest/api/power-bi/imports/create-temporary-upload-location-in-group).
            /// This is only supported for Premium capacity workspaces.
            /// - To create a dataflow from a model.json file, set `datasetDisplayName` to
            /// *model.json*, as described in [URI
            /// parameters](/rest/api/power-bi/imports/post-import-in-group#uri-parameters).
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// - Dataflows with service principal aren't supported.
            /// - Importing a **.pbix** file from OneDrive isn't supported.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='datasetDisplayName'>
            /// The display name of the dataset should include file extension. Not
            /// supported when importing from OneDrive for Business. For importing or
            /// creating dataflows, this parameter should be hardcoded to model.json.
            /// </param>
            /// <param name='importInfo'>
            /// The import to post
            /// </param>
            /// <param name='nameConflict'>
            /// Determines what to do if a dataset with the same name already exists.
            /// Default value is 'Ignore'.&lt;br/&gt;Only Abort and Overwrite are supported
            /// with Rdl files.&lt;br/&gt;Only Abort and GenerateUniqueName are supported
            /// with dataflow model.json files. Possible values include: 'Ignore', 'Abort',
            /// 'Overwrite', 'CreateOrOverwrite', 'GenerateUniqueName'
            /// </param>
            /// <param name='skipReport'>
            /// Determines whether to skip report import, if specified value must be
            /// 'true'. Only supported for PBIX files.
            /// </param>
            /// <param name='overrideReportLabel'>
            /// Determines whether to override existing label on report during republish of
            /// PBIX file, service default value is true.
            /// </param>
            /// <param name='overrideModelLabel'>
            /// Determines whether to override existing label on model during republish of
            /// PBIX file, service default value is true.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Import> PostImportInGroupAsync(this IImportsOperations operations, System.Guid groupId, string datasetDisplayName, ImportInfo importInfo, ImportConflictHandlerMode? nameConflict = default(ImportConflictHandlerMode?), bool? skipReport = default(bool?), bool? overrideReportLabel = default(bool?), bool? overrideModelLabel = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostImportInGroupWithHttpMessagesAsync(groupId, datasetDisplayName, importInfo, nameConflict, skipReport, overrideReportLabel, overrideModelLabel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the specified import from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='importId'>
            /// The import ID
            /// </param>
            public static Import GetImportInGroup(this IImportsOperations operations, System.Guid groupId, System.Guid importId)
            {
                return operations.GetImportInGroupAsync(groupId, importId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the specified import from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All or Dataset.Read.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='importId'>
            /// The import ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Import> GetImportInGroupAsync(this IImportsOperations operations, System.Guid groupId, System.Guid importId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetImportInGroupWithHttpMessagesAsync(groupId, importId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a temporary blob storage upload location for importing large .pbix
            /// files that are between 1 GB and 10 GB in size.
            /// </summary>
            /// <remarks>
            ///
            /// To import large .pbix files:
            ///
            /// 1. Create a temporary upload location using this API call.
            /// 1. Upload the .pbix files using the *shared access signature* URL from the
            /// API call response.
            /// 1. Call [Post Import In
            /// Group](/rest/api/power-bi/imports/post-import-in-group), specifying the
            /// *shared access signature* URL in the `fileUrl` parameter of the [request
            /// body](/rest/api/power-bi/imports/post-import-in-group#request-body).
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Importing large .pbix files between 1 GB and 10 GB in size is only
            /// available for Premium capacity workspaces.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            public static TemporaryUploadLocation CreateTemporaryUploadLocationInGroup(this IImportsOperations operations, System.Guid groupId)
            {
                return operations.CreateTemporaryUploadLocationInGroupAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a temporary blob storage upload location for importing large .pbix
            /// files that are between 1 GB and 10 GB in size.
            /// </summary>
            /// <remarks>
            ///
            /// To import large .pbix files:
            ///
            /// 1. Create a temporary upload location using this API call.
            /// 1. Upload the .pbix files using the *shared access signature* URL from the
            /// API call response.
            /// 1. Call [Post Import In
            /// Group](/rest/api/power-bi/imports/post-import-in-group), specifying the
            /// *shared access signature* URL in the `fileUrl` parameter of the [request
            /// body](/rest/api/power-bi/imports/post-import-in-group#request-body).
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Importing large .pbix files between 1 GB and 10 GB in size is only
            /// available for Premium capacity workspaces.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TemporaryUploadLocation> CreateTemporaryUploadLocationInGroupAsync(this IImportsOperations operations, System.Guid groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTemporaryUploadLocationInGroupWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of imports for the organization.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            public static Imports GetImportsAsAdmin(this IImportsOperations operations, string expand = default(string), string filter = default(string), int? top = default(int?), int? skip = default(int?))
            {
                return operations.GetImportsAsAdminAsync(expand, filter, top, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of imports for the organization.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expand'>
            /// Expands related entities inline
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Imports> GetImportsAsAdminAsync(this IImportsOperations operations, string expand = default(string), string filter = default(string), int? top = default(int?), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetImportsAsAdminWithHttpMessagesAsync(expand, filter, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
