// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api
{
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DataflowsOperations.
    /// </summary>
    public static partial class DataflowsOperationsExtensions
    {
            /// <summary>
            /// Exports the specified dataflow definition to a JSON file.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataflow.ReadWrite.All or Dataflow.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            public static Stream GetDataflow(this IDataflowsOperations operations, System.Guid groupId, System.Guid dataflowId)
            {
                return operations.GetDataflowAsync(groupId, dataflowId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exports the specified dataflow definition to a JSON file.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataflow.ReadWrite.All or Dataflow.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetDataflowAsync(this IDataflowsOperations operations, System.Guid groupId, System.Guid dataflowId, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetDataflowWithHttpMessagesAsync(groupId, dataflowId, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Deletes a dataflow from Power BI data prep storage, including its
            /// definition file and model.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataflow.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            public static void DeleteDataflow(this IDataflowsOperations operations, System.Guid groupId, System.Guid dataflowId)
            {
                operations.DeleteDataflowAsync(groupId, dataflowId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a dataflow from Power BI data prep storage, including its
            /// definition file and model.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataflow.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDataflowAsync(this IDataflowsOperations operations, System.Guid groupId, System.Guid dataflowId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDataflowWithHttpMessagesAsync(groupId, dataflowId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates dataflow properties, capabilities and settings.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataflow.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            /// <param name='dataflowUpdateRequest'>
            /// Patch dataflow properties, capabilities and settings
            /// </param>
            public static void UpdateDataflow(this IDataflowsOperations operations, System.Guid groupId, System.Guid dataflowId, DataflowUpdateRequestMessage dataflowUpdateRequest)
            {
                operations.UpdateDataflowAsync(groupId, dataflowId, dataflowUpdateRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates dataflow properties, capabilities and settings.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataflow.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            /// <param name='dataflowUpdateRequest'>
            /// Patch dataflow properties, capabilities and settings
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateDataflowAsync(this IDataflowsOperations operations, System.Guid groupId, System.Guid dataflowId, DataflowUpdateRequestMessage dataflowUpdateRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateDataflowWithHttpMessagesAsync(groupId, dataflowId, dataflowUpdateRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Triggers a refresh for the specified dataflow.
            /// </summary>
            /// <remarks>
            ///
            /// Supported email notification options are **MailOnFailure** and
            /// **NoNotification**. **MailOnCompletion** isn't supported.
            ///
            /// ## Required scope
            ///
            /// Dataflow.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            /// <param name='refreshRequest'>
            /// </param>
            /// <param name='processType'>
            /// Type of refresh process to use.
            /// </param>
            public static void RefreshDataflow(this IDataflowsOperations operations, System.Guid groupId, System.Guid dataflowId, RefreshRequest refreshRequest = default(RefreshRequest), System.Guid? processType = default(System.Guid?))
            {
                operations.RefreshDataflowAsync(groupId, dataflowId, refreshRequest, processType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Triggers a refresh for the specified dataflow.
            /// </summary>
            /// <remarks>
            ///
            /// Supported email notification options are **MailOnFailure** and
            /// **NoNotification**. **MailOnCompletion** isn't supported.
            ///
            /// ## Required scope
            ///
            /// Dataflow.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            /// <param name='refreshRequest'>
            /// </param>
            /// <param name='processType'>
            /// Type of refresh process to use.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RefreshDataflowAsync(this IDataflowsOperations operations, System.Guid groupId, System.Guid dataflowId, RefreshRequest refreshRequest = default(RefreshRequest), System.Guid? processType = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RefreshDataflowWithHttpMessagesAsync(groupId, dataflowId, refreshRequest, processType, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of data sources for the specified dataflow.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataflow.ReadWrite.All or Dataflow.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            public static Datasources GetDataflowDataSources(this IDataflowsOperations operations, System.Guid groupId, System.Guid dataflowId)
            {
                return operations.GetDataflowDataSourcesAsync(groupId, dataflowId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of data sources for the specified dataflow.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataflow.ReadWrite.All or Dataflow.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datasources> GetDataflowDataSourcesAsync(this IDataflowsOperations operations, System.Guid groupId, System.Guid dataflowId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataflowDataSourcesWithHttpMessagesAsync(groupId, dataflowId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of all dataflows from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataflow.ReadWrite.All or Dataflow.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            public static Dataflows GetDataflows(this IDataflowsOperations operations, System.Guid groupId)
            {
                return operations.GetDataflowsAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of all dataflows from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataflow.ReadWrite.All or Dataflow.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dataflows> GetDataflowsAsync(this IDataflowsOperations operations, System.Guid groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataflowsWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of upstream dataflows for the specified dataflow.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataflow.ReadWrite.All or Dataflow.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            public static DependentDataflows GetUpstreamDataflowsInGroup(this IDataflowsOperations operations, System.Guid groupId, System.Guid dataflowId)
            {
                return operations.GetUpstreamDataflowsInGroupAsync(groupId, dataflowId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of upstream dataflows for the specified dataflow.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataflow.ReadWrite.All or Dataflow.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DependentDataflows> GetUpstreamDataflowsInGroupAsync(this IDataflowsOperations operations, System.Guid groupId, System.Guid dataflowId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUpstreamDataflowsInGroupWithHttpMessagesAsync(groupId, dataflowId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates the refresh schedule for a specified dataflow.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataflow.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            /// <param name='refreshScheduleRequest'>
            /// The dataflow refresh schedule to create or update
            /// </param>
            public static void UpdateRefreshSchedule(this IDataflowsOperations operations, System.Guid groupId, System.Guid dataflowId, RefreshScheduleRequest refreshScheduleRequest)
            {
                operations.UpdateRefreshScheduleAsync(groupId, dataflowId, refreshScheduleRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates the refresh schedule for a specified dataflow.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataflow.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            /// <param name='refreshScheduleRequest'>
            /// The dataflow refresh schedule to create or update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateRefreshScheduleAsync(this IDataflowsOperations operations, System.Guid groupId, System.Guid dataflowId, RefreshScheduleRequest refreshScheduleRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateRefreshScheduleWithHttpMessagesAsync(groupId, dataflowId, refreshScheduleRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of transactions for the specified dataflow.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataflow.ReadWrite.All or Dataflow.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            public static DataflowTransactions GetDataflowTransactions(this IDataflowsOperations operations, System.Guid groupId, System.Guid dataflowId)
            {
                return operations.GetDataflowTransactionsAsync(groupId, dataflowId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of transactions for the specified dataflow.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataflow.ReadWrite.All or Dataflow.Read.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataflowTransactions> GetDataflowTransactionsAsync(this IDataflowsOperations operations, System.Guid groupId, System.Guid dataflowId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataflowTransactionsWithHttpMessagesAsync(groupId, dataflowId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Attempts to cancel the specified transactions.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataflow.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='transactionId'>
            /// The transaction ID
            /// </param>
            public static DataflowTransactionStatus CancelDataflowTransaction(this IDataflowsOperations operations, System.Guid groupId, System.Guid transactionId)
            {
                return operations.CancelDataflowTransactionAsync(groupId, transactionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Attempts to cancel the specified transactions.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required scope
            ///
            /// Dataflow.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='transactionId'>
            /// The transaction ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataflowTransactionStatus> CancelDataflowTransactionAsync(this IDataflowsOperations operations, System.Guid groupId, System.Guid transactionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelDataflowTransactionWithHttpMessagesAsync(groupId, transactionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of upstream dataflows for the specified dataflow.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            public static DependentDataflows GetUpstreamDataflowsInGroupAsAdmin(this IDataflowsOperations operations, System.Guid groupId, System.Guid dataflowId)
            {
                return operations.GetUpstreamDataflowsInGroupAsAdminAsync(groupId, dataflowId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of upstream dataflows for the specified dataflow.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DependentDataflows> GetUpstreamDataflowsInGroupAsAdminAsync(this IDataflowsOperations operations, System.Guid groupId, System.Guid dataflowId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUpstreamDataflowsInGroupAsAdminWithHttpMessagesAsync(groupId, dataflowId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of dataflows from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            public static Dataflows GetDataflowsInGroupAsAdmin(this IDataflowsOperations operations, System.Guid groupId, string filter = default(string), int? top = default(int?), int? skip = default(int?))
            {
                return operations.GetDataflowsInGroupAsAdminAsync(groupId, filter, top, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of dataflows from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dataflows> GetDataflowsInGroupAsAdminAsync(this IDataflowsOperations operations, System.Guid groupId, string filter = default(string), int? top = default(int?), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataflowsInGroupAsAdminWithHttpMessagesAsync(groupId, filter, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of dataflows for the organization.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            public static Dataflows GetDataflowsAsAdmin(this IDataflowsOperations operations, string filter = default(string), int? top = default(int?), int? skip = default(int?))
            {
                return operations.GetDataflowsAsAdminAsync(filter, top, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of dataflows for the organization.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Dataflows> GetDataflowsAsAdminAsync(this IDataflowsOperations operations, string filter = default(string), int? top = default(int?), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataflowsAsAdminWithHttpMessagesAsync(filter, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Exports the definition for the specified dataflow to a JSON file.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            public static Stream ExportDataflowAsAdmin(this IDataflowsOperations operations, System.Guid dataflowId)
            {
                return operations.ExportDataflowAsAdminAsync(dataflowId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exports the definition for the specified dataflow to a JSON file.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> ExportDataflowAsAdminAsync(this IDataflowsOperations operations, System.Guid dataflowId, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ExportDataflowAsAdminWithHttpMessagesAsync(dataflowId, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Returns a list of data sources for the specified dataflow.
            /// </summary>
            /// <remarks>
            ///
            /// Deleted data sources will still appear in the response. This may include
            /// both cloud and on-premise data gateway sources. For more information see
            /// [Dataflows considerations and
            /// limitations](/power-bi/transform-model/dataflows/dataflows-features-limitations).
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            public static Datasources GetDataflowDatasourcesAsAdmin(this IDataflowsOperations operations, System.Guid dataflowId)
            {
                return operations.GetDataflowDatasourcesAsAdminAsync(dataflowId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of data sources for the specified dataflow.
            /// </summary>
            /// <remarks>
            ///
            /// Deleted data sources will still appear in the response. This may include
            /// both cloud and on-premise data gateway sources. For more information see
            /// [Dataflows considerations and
            /// limitations](/power-bi/transform-model/dataflows/dataflows-features-limitations).
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Datasources> GetDataflowDatasourcesAsAdminAsync(this IDataflowsOperations operations, System.Guid dataflowId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataflowDatasourcesAsAdminWithHttpMessagesAsync(dataflowId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of users that have access to the specified dataflow. This is
            /// a preview API call.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            public static DataflowUsers GetDataflowUsersAsAdmin(this IDataflowsOperations operations, System.Guid dataflowId)
            {
                return operations.GetDataflowUsersAsAdminAsync(dataflowId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of users that have access to the specified dataflow. This is
            /// a preview API call.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            ///
            /// ######
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dataflowId'>
            /// The dataflow ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataflowUsers> GetDataflowUsersAsAdminAsync(this IDataflowsOperations operations, System.Guid dataflowId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataflowUsersAsAdminWithHttpMessagesAsync(dataflowId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
