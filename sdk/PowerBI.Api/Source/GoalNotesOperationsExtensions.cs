// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for GoalNotesOperations.
    /// </summary>
    public static partial class GoalNotesOperationsExtensions
    {
            /// <summary>
            /// Adds a new note to a goal value check-in.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalNote'>
            /// The goal check-in note.
            /// </param>
            public static GoalNote Post(this IGoalNotesOperations operations, GoalNoteRequest goalNote)
            {
                return operations.PostAsync(goalNote).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new note to a goal value check-in.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalNote'>
            /// The goal check-in note.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GoalNote> PostAsync(this IGoalNotesOperations operations, GoalNoteRequest goalNote, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(goalNote, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a goal value check-in note by ID.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalNote'>
            /// The note content to be updated
            /// </param>
            public static GoalNote PatchByID(this IGoalNotesOperations operations, GoalNoteRequest goalNote)
            {
                return operations.PatchByIDAsync(goalNote).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a goal value check-in note by ID.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalNote'>
            /// The note content to be updated
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GoalNote> PatchByIDAsync(this IGoalNotesOperations operations, GoalNoteRequest goalNote, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchByIDWithHttpMessagesAsync(goalNote, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a goal value check-in note by ID.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void DeleteByID(this IGoalNotesOperations operations)
            {
                operations.DeleteByIDAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a goal value check-in note by ID.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Dataset.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteByIDAsync(this IGoalNotesOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteByIDWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
