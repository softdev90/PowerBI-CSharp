// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.PowerBI.Api
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for GroupsOperations.
    /// </summary>
    public static partial class GroupsOperationsExtensions
    {
            /// <summary>
            /// Returns a list of workspaces the user has access to.
            /// </summary>
            /// <remarks>
            ///
            /// When user permissions to a workspace have been recently updated, the new
            /// permissions might not be immediately available through API calls. To
            /// refresh user permissions, use the [Refresh User
            /// Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Workspace.Read.All or Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            public static Groups GetGroups(this IGroupsOperations operations, string filter = default(string), int? top = default(int?), int? skip = default(int?))
            {
                return operations.GetGroupsAsync(filter, top, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of workspaces the user has access to.
            /// </summary>
            /// <remarks>
            ///
            /// When user permissions to a workspace have been recently updated, the new
            /// permissions might not be immediately available through API calls. To
            /// refresh user permissions, use the [Refresh User
            /// Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Workspace.Read.All or Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// Filters the results, based on a boolean condition
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Groups> GetGroupsAsync(this IGroupsOperations operations, string filter = default(string), int? top = default(int?), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupsWithHttpMessagesAsync(filter, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestParameters'>
            /// Create group request parameters
            /// </param>
            /// <param name='workspaceV2'>
            /// (Preview feature) Whether to create a [new workspace
            /// experience](/power-bi/collaborate-share/service-new-workspaces) workspace,
            /// that is to say a **V2** workspace. The only supported value is `true`.
            /// </param>
            public static Group CreateGroup(this IGroupsOperations operations, GroupCreationRequest requestParameters, bool? workspaceV2 = default(bool?))
            {
                return operations.CreateGroupAsync(requestParameters, workspaceV2).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestParameters'>
            /// Create group request parameters
            /// </param>
            /// <param name='workspaceV2'>
            /// (Preview feature) Whether to create a [new workspace
            /// experience](/power-bi/collaborate-share/service-new-workspaces) workspace,
            /// that is to say a **V2** workspace. The only supported value is `true`.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Group> CreateGroupAsync(this IGroupsOperations operations, GroupCreationRequest requestParameters, bool? workspaceV2 = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGroupWithHttpMessagesAsync(requestParameters, workspaceV2, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID to delete
            /// </param>
            public static void DeleteGroup(this IGroupsOperations operations, System.Guid groupId)
            {
                operations.DeleteGroupAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteGroupAsync(this IGroupsOperations operations, System.Guid groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteGroupWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of users that have access to the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// When user permissions to a workspace have been recently updated, the new
            /// permissions might not be immediately available through API calls. As a
            /// result, this API call might return an HTTP 401 error when a user has
            /// permissions to a workspace. To refresh user permissions, use the [Refresh
            /// User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API
            /// call.
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Workspace.Read.All or Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            public static GroupUsers GetGroupUsers(this IGroupsOperations operations, System.Guid groupId, int? top = default(int?), int? skip = default(int?))
            {
                return operations.GetGroupUsersAsync(groupId, top, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of users that have access to the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// When user permissions to a workspace have been recently updated, the new
            /// permissions might not be immediately available through API calls. As a
            /// result, this API call might return an HTTP 401 error when a user has
            /// permissions to a workspace. To refresh user permissions, use the [Refresh
            /// User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API
            /// call.
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Workspace.Read.All or Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GroupUsers> GetGroupUsersAsync(this IGroupsOperations operations, System.Guid groupId, int? top = default(int?), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupUsersWithHttpMessagesAsync(groupId, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Grants the specified user the specified permissions to the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// When user permissions to a workspace have been recently updated, the new
            /// permissions might not be immediately available through API calls. To
            /// refresh user permissions, use the [Refresh User
            /// Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            public static void AddGroupUser(this IGroupsOperations operations, System.Guid groupId, GroupUser userDetails)
            {
                operations.AddGroupUserAsync(groupId, userDetails).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Grants the specified user the specified permissions to the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// When user permissions to a workspace have been recently updated, the new
            /// permissions might not be immediately available through API calls. To
            /// refresh user permissions, use the [Refresh User
            /// Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddGroupUserAsync(this IGroupsOperations operations, System.Guid groupId, GroupUser userDetails, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddGroupUserWithHttpMessagesAsync(groupId, userDetails, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the specified user permissions to the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// When user permissions to a workspace have been recently updated, the new
            /// permissions might not be immediately available through API calls. To
            /// refresh user permissions, use the [Refresh User
            /// Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            public static void UpdateGroupUser(this IGroupsOperations operations, System.Guid groupId, GroupUser userDetails)
            {
                operations.UpdateGroupUserAsync(groupId, userDetails).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the specified user permissions to the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// When user permissions to a workspace have been recently updated, the new
            /// permissions might not be immediately available through API calls. To
            /// refresh user permissions, use the [Refresh User
            /// Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateGroupUserAsync(this IGroupsOperations operations, System.Guid groupId, GroupUser userDetails, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateGroupUserWithHttpMessagesAsync(groupId, userDetails, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes the specified user permissions from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='user'>
            /// The email address of the user or object ID of the service principal to
            /// delete
            /// </param>
            /// <param name='profileId'>
            /// The service principal profile ID to delete
            /// </param>
            public static void DeleteUserInGroup(this IGroupsOperations operations, System.Guid groupId, string user, System.Guid? profileId = default(System.Guid?))
            {
                operations.DeleteUserInGroupAsync(groupId, user, profileId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified user permissions from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='user'>
            /// The email address of the user or object ID of the service principal to
            /// delete
            /// </param>
            /// <param name='profileId'>
            /// The service principal profile ID to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUserInGroupAsync(this IGroupsOperations operations, System.Guid groupId, string user, System.Guid? profileId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUserInGroupWithHttpMessagesAsync(groupId, user, profileId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Assigns **My workspace** to the specified capacity.
            /// </summary>
            /// <remarks>
            ///
            /// To unassign **My workspace** from a capacity, provide an empty GUID
            /// (`00000000-0000-0000-0000-000000000000`) as the `capacityId`.
            ///
            /// ## Permissions
            ///
            /// The user must have administrator rights or Assign permission on the
            /// capacity.
            ///
            /// ## Required Scope
            ///
            /// Capacity.ReadWrite.All and Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestParameters'>
            /// Assign to capacity parameters
            /// </param>
            public static void AssignMyWorkspaceToCapacity(this IGroupsOperations operations, AssignToCapacityRequest requestParameters)
            {
                operations.AssignMyWorkspaceToCapacityAsync(requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Assigns **My workspace** to the specified capacity.
            /// </summary>
            /// <remarks>
            ///
            /// To unassign **My workspace** from a capacity, provide an empty GUID
            /// (`00000000-0000-0000-0000-000000000000`) as the `capacityId`.
            ///
            /// ## Permissions
            ///
            /// The user must have administrator rights or Assign permission on the
            /// capacity.
            ///
            /// ## Required Scope
            ///
            /// Capacity.ReadWrite.All and Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestParameters'>
            /// Assign to capacity parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AssignMyWorkspaceToCapacityAsync(this IGroupsOperations operations, AssignToCapacityRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AssignMyWorkspaceToCapacityWithHttpMessagesAsync(requestParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Assigns the specified workspace to the specified capacity.
            /// </summary>
            /// <remarks>
            ///
            /// To unassign **My workspace** from a capacity, provide an empty GUID
            /// (`00000000-0000-0000-0000-000000000000`) as the `capacityId`.
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights or assign permissions on the
            /// capacity.
            /// - This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Capacity.ReadWrite.All and Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='requestParameters'>
            /// Assign to capacity parameters
            /// </param>
            public static void AssignToCapacity(this IGroupsOperations operations, System.Guid groupId, AssignToCapacityRequest requestParameters)
            {
                operations.AssignToCapacityAsync(groupId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Assigns the specified workspace to the specified capacity.
            /// </summary>
            /// <remarks>
            ///
            /// To unassign **My workspace** from a capacity, provide an empty GUID
            /// (`00000000-0000-0000-0000-000000000000`) as the `capacityId`.
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights or assign permissions on the
            /// capacity.
            /// - This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Capacity.ReadWrite.All and Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='requestParameters'>
            /// Assign to capacity parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AssignToCapacityAsync(this IGroupsOperations operations, System.Guid groupId, AssignToCapacityRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AssignToCapacityWithHttpMessagesAsync(groupId, requestParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the status of the **My workspace** assignment-to-capacity operation.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Workspace.Read.All and Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static WorkspaceCapacityAssignmentStatus CapacityAssignmentStatusMyWorkspace(this IGroupsOperations operations)
            {
                return operations.CapacityAssignmentStatusMyWorkspaceAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the status of the **My workspace** assignment-to-capacity operation.
            /// </summary>
            /// <remarks>
            ///
            /// ## Required Scope
            ///
            /// Workspace.Read.All and Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkspaceCapacityAssignmentStatus> CapacityAssignmentStatusMyWorkspaceAsync(this IGroupsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CapacityAssignmentStatusMyWorkspaceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the status of the assignment-to-capacity operation for the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights or assign permissions on the
            /// capacity.
            /// - This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Workspace.Read.All and Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            public static WorkspaceCapacityAssignmentStatus CapacityAssignmentStatus(this IGroupsOperations operations, System.Guid groupId)
            {
                return operations.CapacityAssignmentStatusAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the status of the assignment-to-capacity operation for the specified
            /// workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights or assign permissions on the
            /// capacity.
            /// - This API call can be called by a service principal profile. For more
            /// information see: [Service principal profiles in Power BI
            /// Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
            ///
            /// ## Required Scope
            ///
            /// Workspace.Read.All and Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkspaceCapacityAssignmentStatus> CapacityAssignmentStatusAsync(this IGroupsOperations operations, System.Guid groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CapacityAssignmentStatusWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Assigns the specified workspace to the specified dataflow storage account.
            /// </summary>
            /// <remarks>
            ///
            /// To perform this operation, the user must be an admin on the specified
            /// workspace and the Power BI dataflow storage account must be enabled.
            ///
            /// To unassign the specified workspace from a Power BI dataflow storage
            /// account, provide an empty GUID (`00000000-0000-0000-0000-000000000000`) as
            /// the `dataflowStorageId`.
            ///
            /// ## Required Scope
            ///
            /// StorageAccount.ReadWrite.All and Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='requestParameters'>
            /// Assign to Power BI dataflow storage account parameters
            /// </param>
            public static void AssignToDataflowStorage(this IGroupsOperations operations, System.Guid groupId, AssignToDataflowStorageRequest requestParameters)
            {
                operations.AssignToDataflowStorageAsync(groupId, requestParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Assigns the specified workspace to the specified dataflow storage account.
            /// </summary>
            /// <remarks>
            ///
            /// To perform this operation, the user must be an admin on the specified
            /// workspace and the Power BI dataflow storage account must be enabled.
            ///
            /// To unassign the specified workspace from a Power BI dataflow storage
            /// account, provide an empty GUID (`00000000-0000-0000-0000-000000000000`) as
            /// the `dataflowStorageId`.
            ///
            /// ## Required Scope
            ///
            /// StorageAccount.ReadWrite.All and Workspace.ReadWrite.All
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='requestParameters'>
            /// Assign to Power BI dataflow storage account parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AssignToDataflowStorageAsync(this IGroupsOperations operations, System.Guid groupId, AssignToDataflowStorageRequest requestParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AssignToDataflowStorageWithHttpMessagesAsync(groupId, requestParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of workspaces for the organization.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 50 requests per hour, per tenant. This call will also time out
            /// after 30 seconds to prevent adverse effect on the Power BI service.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results. This parameter is mandatory and must be
            /// in the range of 1-5000.
            /// </param>
            /// <param name='expand'>
            /// Accepts a comma-separated list of data types, which will be expanded inline
            /// in the response. Supports `users`, `reports`, `dashboards`, `datasets`,
            /// `dataflows`, and `workbooks`.
            /// </param>
            /// <param name='filter'>
            /// Filters the results based on a boolean condition
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results. Use with top to fetch results beyond the first
            /// 5000.
            /// </param>
            public static AdminGroups GetGroupsAsAdmin(this IGroupsOperations operations, int top, string expand = default(string), string filter = default(string), int? skip = default(int?))
            {
                return operations.GetGroupsAsAdminAsync(top, expand, filter, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of workspaces for the organization.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 50 requests per hour, per tenant. This call will also time out
            /// after 30 seconds to prevent adverse effect on the Power BI service.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='top'>
            /// Returns only the first n results. This parameter is mandatory and must be
            /// in the range of 1-5000.
            /// </param>
            /// <param name='expand'>
            /// Accepts a comma-separated list of data types, which will be expanded inline
            /// in the response. Supports `users`, `reports`, `dashboards`, `datasets`,
            /// `dataflows`, and `workbooks`.
            /// </param>
            /// <param name='filter'>
            /// Filters the results based on a boolean condition
            /// </param>
            /// <param name='skip'>
            /// Skips the first n results. Use with top to fetch results beyond the first
            /// 5000.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AdminGroups> GetGroupsAsAdminAsync(this IGroupsOperations operations, int top, string expand = default(string), string filter = default(string), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupsAsAdminWithHttpMessagesAsync(top, expand, filter, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a workspace for the organization.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='expand'>
            /// Accepts a comma-separated list of data types, which will be expanded inline
            /// in the response. Supports `users`, `reports`, `dashboards`, `datasets`,
            /// `dataflows`, and `workbooks`.
            /// </param>
            public static AdminGroup GetGroupAsAdmin(this IGroupsOperations operations, System.Guid groupId, string expand = default(string))
            {
                return operations.GetGroupAsAdminAsync(groupId, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a workspace for the organization.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='expand'>
            /// Accepts a comma-separated list of data types, which will be expanded inline
            /// in the response. Supports `users`, `reports`, `dashboards`, `datasets`,
            /// `dataflows`, and `workbooks`.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AdminGroup> GetGroupAsAdminAsync(this IGroupsOperations operations, System.Guid groupId, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupAsAdminWithHttpMessagesAsync(groupId, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the properties of the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// This API call call only updates workspaces in the new workspace experience.
            /// Only the name and description can be updated. The name must be unique
            /// inside an organization.
            ///
            /// ## Permissions
            ///
            /// The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator).
            ///
            /// ## Required Scope
            ///
            /// Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='groupProperties'>
            /// The properties to update
            /// </param>
            public static void UpdateGroupAsAdmin(this IGroupsOperations operations, System.Guid groupId, AdminGroup groupProperties)
            {
                operations.UpdateGroupAsAdminAsync(groupId, groupProperties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the properties of the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// This API call call only updates workspaces in the new workspace experience.
            /// Only the name and description can be updated. The name must be unique
            /// inside an organization.
            ///
            /// ## Permissions
            ///
            /// The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator).
            ///
            /// ## Required Scope
            ///
            /// Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='groupProperties'>
            /// The properties to update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateGroupAsAdminAsync(this IGroupsOperations operations, System.Guid groupId, AdminGroup groupProperties, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateGroupAsAdminWithHttpMessagesAsync(groupId, groupProperties, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of users that have access to the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            public static GroupUsers GetGroupUsersAsAdmin(this IGroupsOperations operations, System.Guid groupId)
            {
                return operations.GetGroupUsersAsAdminAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of users that have access to the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GroupUsers> GetGroupUsersAsAdminAsync(this IGroupsOperations operations, System.Guid groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupUsersAsAdminWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Grants user permissions to the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// This API call only supports updating workspaces in the new workspace
            /// experience and adding a user principle.
            ///
            /// ## Permissions
            ///
            /// The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator).
            ///
            /// ## Required Scope
            ///
            /// Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            public static void AddUserAsAdmin(this IGroupsOperations operations, System.Guid groupId, GroupUser userDetails)
            {
                operations.AddUserAsAdminAsync(groupId, userDetails).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Grants user permissions to the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// This API call only supports updating workspaces in the new workspace
            /// experience and adding a user principle.
            ///
            /// ## Permissions
            ///
            /// The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator).
            ///
            /// ## Required Scope
            ///
            /// Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='userDetails'>
            /// Details of user access right
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddUserAsAdminAsync(this IGroupsOperations operations, System.Guid groupId, GroupUser userDetails, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddUserAsAdminWithHttpMessagesAsync(groupId, userDetails, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Removes user permissions from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// This API call only supports updating workspaces in the new workspace
            /// experience and adding a user principle.
            ///
            /// ## Permissions
            ///
            /// The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator).
            ///
            /// ## Required Scope
            ///
            /// Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='user'>
            /// The user principal name (UPN) of the user to remove
            /// </param>
            /// <param name='profileId'>
            /// The service principal profile ID to delete
            /// </param>
            public static void DeleteUserAsAdmin(this IGroupsOperations operations, System.Guid groupId, string user, System.Guid? profileId = default(System.Guid?))
            {
                operations.DeleteUserAsAdminAsync(groupId, user, profileId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes user permissions from the specified workspace.
            /// </summary>
            /// <remarks>
            ///
            /// This API call only supports updating workspaces in the new workspace
            /// experience and adding a user principle.
            ///
            /// ## Permissions
            ///
            /// The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator).
            ///
            /// ## Required Scope
            ///
            /// Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='user'>
            /// The user principal name (UPN) of the user to remove
            /// </param>
            /// <param name='profileId'>
            /// The service principal profile ID to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUserAsAdminAsync(this IGroupsOperations operations, System.Guid groupId, string user, System.Guid? profileId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUserAsAdminWithHttpMessagesAsync(groupId, user, profileId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Restores a deleted workspace.
            /// </summary>
            /// <remarks>
            ///
            /// This API call only supports restoring workspaces in the new workspace
            /// experience.
            ///
            /// ## Permissions
            ///
            /// The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator).
            ///
            /// ## Required Scope
            ///
            /// Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='groupRestoreRequest'>
            /// Details of the group restore request
            /// </param>
            public static void RestoreDeletedGroupAsAdmin(this IGroupsOperations operations, System.Guid groupId, GroupRestoreRequest groupRestoreRequest)
            {
                operations.RestoreDeletedGroupAsAdminAsync(groupId, groupRestoreRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores a deleted workspace.
            /// </summary>
            /// <remarks>
            ///
            /// This API call only supports restoring workspaces in the new workspace
            /// experience.
            ///
            /// ## Permissions
            ///
            /// The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator).
            ///
            /// ## Required Scope
            ///
            /// Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='groupRestoreRequest'>
            /// Details of the group restore request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestoreDeletedGroupAsAdminAsync(this IGroupsOperations operations, System.Guid groupId, GroupRestoreRequest groupRestoreRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RestoreDeletedGroupAsAdminWithHttpMessagesAsync(groupId, groupRestoreRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of datasets, reports, and dashboards that have not been used
            /// within 30 days for the specified workspace. This is a preview API call.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='continuationToken'>
            /// Token required to get the next chunk of the result set
            /// </param>
            public static UnusedArtifactsResponse GetUnusedArtifactsAsAdmin(this IGroupsOperations operations, System.Guid groupId, string continuationToken = default(string))
            {
                return operations.GetUnusedArtifactsAsAdminAsync(groupId, continuationToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of datasets, reports, and dashboards that have not been used
            /// within 30 days for the specified workspace. This is a preview API call.
            /// </summary>
            /// <remarks>
            ///
            /// ## Permissions
            ///
            /// - The user must have administrator rights (such as Office 365 Global
            /// Administrator or Power BI Service Administrator) or authenticate using a
            /// service principal.
            /// - Delegated permissions are supported.
            ///
            /// ## Required Scope
            ///
            /// Tenant.Read.All or Tenant.ReadWrite.All
            ///
            /// ## Limitations
            ///
            /// Maximum 200 requests per hour.
            /// &lt;br&gt;&lt;br&gt;
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The workspace ID
            /// </param>
            /// <param name='continuationToken'>
            /// Token required to get the next chunk of the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UnusedArtifactsResponse> GetUnusedArtifactsAsAdminAsync(this IGroupsOperations operations, System.Guid groupId, string continuationToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUnusedArtifactsAsAdminWithHttpMessagesAsync(groupId, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
